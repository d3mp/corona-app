{"version":3,"sources":["features/map/Map.module.css","features/map/tooltip/Tooltip.module.css","common/theme/ThemeContext.tsx","common/theme/themeUtils.ts","features/countries/countriesTypes.ts","api/corona.ts","common/constants/global.ts","features/sideBar/sideBarSlice.ts","features/countries/countriesSlice.ts","features/themeSwitch/ThemeSwitch.tsx","features/map/mapSlice.ts","features/map/mapUtils.ts","features/map/tooltip/Row.tsx","features/map/tooltip/Tooltip.tsx","features/map/Map.tsx","features/countriesTable/CountriesTableHeader.tsx","features/countriesTable/CountriesTable.tsx","features/sideBar/HeaderOption.tsx","features/sideBar/timelinePanel/TimelinePanel.tsx","features/sideBar/SideBar.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/countriesTable/CountriesTable.module.css","features/sideBar/SideBar.module.css","features/themeSwitch/ThemeSwitch.module.css"],"names":["module","exports","Theme","ThemeContext","React","createContext","theme","switchTheme","ThemeContextProvider","children","defaultTheme","localStorage","getItem","window","matchMedia","matches","Dark","Light","useState","useLayoutEffect","prevTheme","root","document","getElementsByTagName","className","includes","replace","split","concat","join","setItem","Provider","value","Status","defaultTimeline","Active","Confirmed","Deaths","Recovered","getCountries","a","urls","Promise","all","map","url","fetch","response","json","countriesByName","getCountriesByHistoricalName","historicalCountriesWithProvincesByName","getHistoricalCountriesWithProvincesByGlobalName","Object","values","reduce","countries","country","historicalCountry","timeline","keys","length","console","warn","removeEmptyDays","date","moment","utc","format","name","province","coordinates","latitude","countryInfo","lat","longitude","long","cases","deaths","recovered","updated","globalToHistoricalNames","toLowerCase","prev","curr","timeline1","timeline2","convertHistoricalNameToGlobal","prevDates","active","shouldSummarizeProvinces","status","timelineDates1","timelineDates2","dates","statuses","Palestine","Myanmar","Réunion","Macao","Curaçao","key","initialState","filterBy","sortBy","sortDirection","SortDirection","DESC","timelineDate","isTableVisibleOnMobile","sideBarSlice","createSlice","reducers","setFilterType","state","action","payload","setTimelineDate","sort","toggleTableVisibility","selectSortBy","sideBar","selectSortDirection","selectFilterBy","selectIsTableVisibleOnMobile","selectMomentTimelineDate","createSelector","actions","fetchCountries","createAsyncThunk","CoronaAPI","countriesSlice","loading","error","extraReducers","builder","addCase","pending","fulfilled","rejected","selectCountriesByName","selectCountries","selectCountriesByTimelineDate","filter","confirmed","selectSortedCountriesByTimelineDate","isSortByStatus","_","orderBy","ASC","index","selectSumDataByTimelineDate","total","selectlCountriesByTimelineFC","type","features","geometry","properties","ThemeSwitch","useContext","styles","themeSwitch","checked","onChange","clsx","icon","iconDark","aria-label","role","mapSlice","viewport","zoom","setViewport","selectViewPort","COLORS_BY_FILTER_TYPE","getInOurPais","max","steps","step","push","getTimelineExpression","operator","Row","label","perDay","style","color","toLocaleString","isNaN","Tooltip","hoveredCountry","currentDate","prevDate","clone","subtract","tooltip","top","offsetY","left","offsetX","memo","mapRef","useRef","initialViewport","useSelector","setHoveredCountry","featureCollection","currentMoment","hasCasesExpression","getCasesExpression","onHover","useCallback","srcEvent","feature","find","f","layer","id","useEffect","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","mapContainer","ref","width","height","mapStyle","mapboxApiAccessToken","onViewportChange","nextViewport","data","paint","layout","headerRenderer","dataKey","headerCol","CountriesTable","dispatch","useDispatch","tableContainer","hiddenForMobile","colWidth","countryWidth","headerHeight","rowHeight","rowCount","rowClassName","rowGetter","onRowClick","rowData","disableSort","defaultSortDirection","cellDataGetter","toggleTable","onClick","evenRow","oddRow","headerRow","HeaderOption","quantity","activeColor","isActive","headerStat","headerStatActive","headerStatLabel","headerStatTotalQuantity","minDate","maxDate","updateValue","e","newDate","dayOfYear","currentTarget","min","SideBar","sumData","open","header","App","store","configureStore","reducer","middleware","getDefaultMiddleware","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.55a02977.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapContainer\":\"Map_mapContainer__dIyOX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"Tooltip_tooltip__39nFh\"};","import React, { useLayoutEffect, useState } from \"react\";\nimport { Nullable } from \"../../genericTypes\";\nimport { getBrowserTheme } from \"./themeUtils\";\n\nexport enum Theme {\n  Light = \"light\",\n  Dark = \"dark\",\n}\n\nexport interface ThemeContext {\n  theme: Nullable<Theme>;\n  switchTheme: (theme: Theme) => void;\n}\n\nexport const ThemeContext = React.createContext<ThemeContext>({\n  theme: null,\n  switchTheme: (theme: Theme) => {},\n});\n\ninterface ThemeContextProviderProps {\n  children: React.ReactNode | ((theme: Theme) => Theme);\n}\n\nexport function ThemeContextProvider({ children }: ThemeContextProviderProps) {\n  const defaultTheme: Theme =\n    (localStorage.getItem(\"theme\") as Nullable<Theme>) || getBrowserTheme();\n  const [theme, switchTheme] = useState(defaultTheme);\n\n  useLayoutEffect(() => {\n    const prevTheme: string = theme === Theme.Dark ? Theme.Light : Theme.Dark;\n    const root = document.getElementsByTagName(\"html\")[0];\n    root.className = root.className.includes(theme)\n      ? root.className\n      : root.className.includes(prevTheme)\n      ? root.className.replace(prevTheme, theme)\n      : root.className.split(\" \").concat(theme).join(\" \");\n\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, switchTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","import { Theme } from \"./ThemeContext\";\n\nexport function getBrowserTheme(): Theme {\n  return window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ? Theme.Dark\n    : Theme.Light;\n}\n","import { HashMap, Nullable } from \"../../genericTypes\";\n\nexport enum Status {\n  Active = \"active\",\n  Confirmed = \"confirmed\",\n  Deaths = \"deaths\",\n  Recovered = \"recovered\",\n}\n\nexport interface Country {\n  country: string;\n  province: Nullable<string>;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timeline: Timeline;\n  updated?: Date;\n}\n\nexport type CountriesByName = HashMap<Country>;\nexport type TimelineDates = HashMap<number>;\n\nexport interface Timeline {\n  [Status.Active]: TimelineDates;\n  [Status.Confirmed]: TimelineDates;\n  [Status.Deaths]: TimelineDates;\n  [Status.Recovered]: TimelineDates;\n}\n\nexport interface Timeline {\n  [Status.Active]: HashMap<number>;\n  [Status.Confirmed]: HashMap<number>;\n  [Status.Deaths]: HashMap<number>;\n  [Status.Recovered]: HashMap<number>;\n}\n\nexport interface TotalByCountry {\n  active: number;\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n}\n","import moment from \"moment\";\nimport { SHORT_DATE_FORMAT } from \"../common/constants/global\";\nimport {\n  CountriesByName,\n  Country,\n  Status,\n  Timeline,\n  TimelineDates,\n} from \"../features/countries/countriesTypes\";\n\nconst defaultTimeline: Timeline = {\n  [Status.Active]: {},\n  [Status.Confirmed]: {},\n  [Status.Deaths]: {},\n  [Status.Recovered]: {},\n};\n\nexport async function getCountries(): Promise<CountriesByName> {\n  const urls: string[] = [\n    \"https://corona.lmao.ninja/v2/countries\",\n    \"https://corona.lmao.ninja/v2/historical?lastdays=all\",\n  ];\n  const response = await Promise.all(\n    urls.map(async (url: string) => {\n      const response = await fetch(url);\n      return response.json();\n    })\n  );\n\n  const countriesByName: CountriesByName = getCountriesByHistoricalName(\n    response[0]\n  );\n  const historicalCountriesWithProvincesByName: CountriesByName = getHistoricalCountriesWithProvincesByGlobalName(\n    response[1],\n    countriesByName\n  );\n  // Merge historical and current data\n  return Object.values(countriesByName).reduce(\n    (countries: CountriesByName, country: Country) => {\n      const historicalCountry =\n        historicalCountriesWithProvincesByName[country.country];\n      const timeline: Timeline = historicalCountry\n        ? historicalCountry.timeline\n        : defaultTimeline;\n\n      if (!Object.keys(timeline[Status.Confirmed]).length) {\n        console.warn(\"countries without timeline\", country);\n      }\n\n      return {\n        ...countries,\n        [country.country]: {\n          ...country,\n          timeline: removeEmptyDays({\n            [Status.Active]: {\n              ...timeline[Status.Active],\n              ...country.timeline[Status.Active],\n            },\n            [Status.Confirmed]: {\n              ...timeline[Status.Confirmed],\n              ...country.timeline[Status.Confirmed],\n            },\n            [Status.Deaths]: {\n              ...timeline[Status.Deaths],\n              ...country.timeline[Status.Deaths],\n            },\n            [Status.Recovered]: {\n              ...timeline[Status.Recovered],\n              ...country.timeline[Status.Recovered],\n            },\n          }),\n        },\n      };\n    },\n    {}\n  );\n}\n\n/**\n * Returns map of countrise by historical name\n * @param response\n */\nfunction getCountriesByHistoricalName(response: []): CountriesByName {\n  const date = moment.utc().format(SHORT_DATE_FORMAT);\n\n  return response.reduce((countriesByName: CountriesByName, value: any) => {\n    const country: Country = {\n      country: value.country,\n      province: null,\n      coordinates: {\n        latitude: value.countryInfo.lat,\n        longitude: value.countryInfo.long,\n      },\n      timeline: {\n        [Status.Active]: {\n          [date]: value.cases - value.deaths - value.recovered,\n        },\n        [Status.Confirmed]: {\n          [date]: value.cases,\n        },\n        [Status.Deaths]: {\n          [date]: value.deaths,\n        },\n        [Status.Recovered]: {\n          [date]: value.recovered,\n        },\n      },\n      updated: value.updated,\n    };\n\n    return {\n      ...countriesByName,\n      [convertGlobalNameToHistorical(country.country)]: country,\n    };\n  }, {});\n}\n\n/**\n * Returns map of historical countries and provinces by global name\n * @param response\n * @param countriesByName\n */\nfunction getHistoricalCountriesWithProvincesByGlobalName(\n  response: [],\n  countriesByName: CountriesByName\n): CountriesByName {\n  return response.reduce((prev: CountriesByName, curr: any) => {\n    const country: Country = {\n      country:\n        countriesByName[curr.country]?.country ||\n        convertHistoricalNameToGlobal(curr.country),\n      province:\n        countriesByName[curr.province]?.country ||\n        convertHistoricalNameToGlobal(curr.province),\n      coordinates: {\n        latitude: 0,\n        longitude: 0,\n      },\n      timeline: {\n        [Status.Active]: Object.keys(curr.timeline.cases).reduce(\n          (prevDates: TimelineDates, date: string) => {\n            const active: number =\n              curr.timeline.cases[date] -\n              curr.timeline.deaths[date] -\n              curr.timeline.recovered[date];\n\n            prevDates[date] = active;\n\n            return prevDates;\n          },\n          {}\n        ),\n        [Status.Confirmed]: curr.timeline.cases,\n        [Status.Deaths]: curr.timeline.deaths,\n        [Status.Recovered]: curr.timeline.recovered,\n      },\n    };\n    const shouldSummarizeProvinces: boolean = [\n      \"Australia\",\n      \"China\",\n      \"Canada\",\n    ].includes(country.country);\n\n    if (!prev[country.country]) {\n      if (!country.province || shouldSummarizeProvinces) {\n        prev[country.country] = {\n          ...country,\n          province: null,\n          timeline: country.province ? defaultTimeline : country.timeline,\n        };\n      }\n    }\n\n    if (country.province) {\n      prev[country.province] = country;\n    }\n\n    if (prev[country.country] && country.province) {\n      if (shouldSummarizeProvinces) {\n        prev[country.country].timeline = sumTimelines(\n          prev[country.country].timeline,\n          country.timeline\n        );\n      }\n    }\n\n    return prev;\n  }, {});\n}\n\n/**\n * Returns Timeline without empty days to optimize store size\n * @param timeline\n */\nfunction removeEmptyDays(timeline: Timeline): Timeline {\n  const statuses = Object.keys(timeline) as Status[];\n\n  return statuses.reduce((statuses: Timeline, status: Status) => {\n    return {\n      ...statuses,\n      [status]: Object.keys(timeline[status]).reduce(\n        (dates: TimelineDates, date: string) => {\n          if (timeline[status][date]) {\n            dates[date] = timeline[status][date];\n          }\n\n          return dates;\n        },\n        {}\n      ),\n    };\n  }, defaultTimeline);\n}\n\n/**\n * Returns summarized timelines\n * @param timeline1\n * @param timeline2\n */\nfunction sumTimelines(timeline1: Timeline, timeline2: Timeline) {\n  const statuses = Object.keys(timeline1) as Status[];\n\n  return statuses.reduce((timeline: Timeline, status: Status) => {\n    const timelineDates1 = Object.keys(timeline1[status]);\n    const timelineDates2 = Object.keys(timeline2[status]);\n    const dates = timelineDates1.length ? timelineDates1 : timelineDates2;\n\n    return {\n      ...timeline,\n      [status]: dates.reduce((dates, date: string) => {\n        return {\n          ...dates,\n          [date]:\n            (timeline1[status][date] || 0) + (timeline2[status][date] || 0),\n        };\n      }, {}),\n    };\n  }, defaultTimeline);\n}\n\nconst globalToHistoricalNames: { [name: string]: string } = {\n  \"Côte d'Ivoire\": \"Cote d'Ivoire\",\n  Palestine: \"West Bank and Gaza\",\n  \"Lao People's Democratic Republic\": 'Lao People\"s Democratic Republic',\n  Myanmar: \"Burma\",\n  \"Holy See (Vatican City State)\": \"Holy See\",\n  Réunion: \"Reunion\",\n  Macao: \"macau\",\n  \"Saint Martin\": \"st martin\",\n  \"St. Barth\": \"saint barthelemy\",\n  \"Saint Pierre Miquelon\": \"saint pierre and miquelon\",\n  Curaçao: \"curacao\",\n  \"Caribbean Netherlands\": \"bonaire, sint eustatius and saba\",\n};\n\nfunction convertGlobalNameToHistorical(name: string) {\n  return (globalToHistoricalNames[name] || name).toLowerCase();\n}\n\nfunction convertHistoricalNameToGlobal(name: string) {\n  const historicalToGlobalNames: {\n    [name: string]: string;\n  } = Object.keys(globalToHistoricalNames).reduce(\n    (prev, key) => ({ ...prev, [globalToHistoricalNames[key]]: key }),\n    {}\n  );\n\n  return historicalToGlobalNames[name] || name;\n}\n","export const SHORT_DATE_FORMAT = \"M/D/YY\";\n","import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport moment from \"moment\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport { RootState } from \"../../app/store\";\nimport { Status } from \"../countries/countriesTypes\";\n\ninterface SideBarState {\n  filterBy: Status;\n  sortBy: string;\n  sortDirection: SortDirectionType;\n  timelineDate: string; // ISO format\n  isTableVisibleOnMobile: boolean;\n}\n\nconst initialState: SideBarState = {\n  filterBy: Status.Confirmed,\n  sortBy: Status.Confirmed,\n  sortDirection: SortDirection.DESC,\n  timelineDate: moment().format(),\n  isTableVisibleOnMobile: false,\n};\n\nexport const sideBarSlice = createSlice({\n  name: \"sideBar\",\n  initialState,\n  reducers: {\n    setFilterType: (state, action: PayloadAction<Status>) => {\n      state.filterBy = action.payload;\n    },\n    setTimelineDate: (state, action: PayloadAction<string>) => {\n      state.timelineDate = action.payload;\n    },\n    sort: (\n      state,\n      action: PayloadAction<{\n        sortBy: string;\n        sortDirection: SortDirectionType;\n      }>\n    ) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortDirection = action.payload.sortDirection;\n    },\n    toggleTableVisibility: (state) => {\n      state.isTableVisibleOnMobile = !state.isTableVisibleOnMobile;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectSortBy = (state: RootState) => state.sideBar.sortBy;\nexport const selectSortDirection = (state: RootState) =>\n  state.sideBar.sortDirection;\nexport const selectTimelineDate = (state: RootState) =>\n  state.sideBar.timelineDate;\nexport const selectFilterBy = (state: RootState) => state.sideBar.filterBy;\nexport const selectIsTableVisibleOnMobile = (state: RootState) =>\n  state.sideBar.isTableVisibleOnMobile;\n\nexport const selectMomentTimelineDate = createSelector(\n  [selectTimelineDate],\n  (timelineDate: string) => moment(timelineDate)\n);\n\nexport const {\n  setFilterType,\n  setTimelineDate,\n  sort,\n  toggleTableVisibility,\n} = sideBarSlice.actions;\nexport default sideBarSlice.reducer;\n","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n  PayloadAction,\n  SerializedError,\n} from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\nimport { Moment } from \"moment\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport * as CoronaAPI from \"../../api/corona\";\nimport { RootState } from \"../../app/store\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { Nullable } from \"../../genericTypes\";\nimport {\n  selectMomentTimelineDate,\n  selectSortBy,\n  selectSortDirection,\n} from \"../sideBar/sideBarSlice\";\nimport {\n  CountriesByName,\n  Country,\n  Status,\n  TotalByCountry,\n} from \"./countriesTypes\";\n\n// Async actions\n\nexport const fetchCountries = createAsyncThunk(\n  \"countries/fetchCountries\",\n  async () => await CoronaAPI.getCountries()\n);\n\n// Slice\n\ninterface CountriesState {\n  loading: \"idle\" | \"pending\" | \"succeeded\" | \"failed\";\n  countriesByName: CountriesByName;\n  error: Nullable<SerializedError>;\n}\n\nconst initialState: CountriesState = {\n  loading: \"idle\",\n  countriesByName: {},\n  error: null,\n};\n\nexport const countriesSlice = createSlice({\n  name: \"countries\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCountries.pending, (state) => {\n        if (state.loading === \"idle\") {\n          state.loading = \"pending\";\n        }\n      })\n      .addCase(\n        fetchCountries.fulfilled,\n        (state, action: PayloadAction<CountriesByName>) => {\n          if (state.loading === \"pending\") {\n            state.loading = \"idle\";\n          }\n\n          state.countriesByName = action.payload;\n        }\n      )\n      .addCase(fetchCountries.rejected, (state, action) => {\n        state.error = action.error;\n      });\n  },\n});\n\n// Selectors\n\nexport const selectCountriesByName = (state: RootState) =>\n  state.countries.countriesByName;\n\nexport const selectCountries = createSelector(\n  [selectCountriesByName],\n  (countriesByName: CountriesByName) => Object.values(countriesByName)\n);\n\nexport const selectCountriesByTimelineDate = createSelector(\n  [selectCountries, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.filter((country: Country) => {\n      return (\n        country.timeline.active[date] ||\n        country.timeline.confirmed[date] ||\n        country.timeline.deaths[date] ||\n        country.timeline.recovered[date]\n      );\n    });\n  }\n);\n\nexport const selectSortedCountriesByTimelineDate = createSelector(\n  [\n    selectCountriesByTimelineDate,\n    selectMomentTimelineDate,\n    selectSortBy,\n    selectSortDirection,\n  ],\n  (\n    countries: Country[],\n    timelineDate: Moment,\n    sortBy: string,\n    sortDirection: SortDirectionType\n  ) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n    const isSortByStatus = Object.values(Status as any).includes(sortBy);\n\n    return _.orderBy(\n      countries,\n      (country: Country) => {\n        if (isSortByStatus) {\n          return country.timeline[sortBy as Status][date] || 0;\n        }\n\n        return country[sortBy as keyof Country];\n      },\n      sortDirection === SortDirection.ASC ? \"asc\" : \"desc\"\n    ).map((country, index) => ({ ...country, index: index + 1 }));\n  }\n);\n\nexport const selectSumDataByTimelineDate = createSelector(\n  [selectCountriesByTimelineDate, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const defaultValues: TotalByCountry = {\n      active: 0,\n      confirmed: 0,\n      deaths: 0,\n      recovered: 0,\n    };\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.reduce((total: TotalByCountry, country: Country) => {\n      return {\n        active: total.active + (country.timeline.active[date] || 0),\n        confirmed: total.confirmed + (country.timeline.confirmed[date] || 0),\n        deaths: total.deaths + (country.timeline.deaths[date] || 0),\n        recovered: total.recovered + (country.timeline.recovered[date] || 0),\n      };\n    }, defaultValues);\n  }\n);\n\nexport const selectlCountriesByTimelineFC = createSelector(\n  [selectCountriesByTimelineDate],\n  (countries: Country[]) => {\n    const featuerCollection: GeoJSON.FeatureCollection<\n      GeoJSON.Point,\n      Country\n    > = {\n      type: \"FeatureCollection\",\n      features: countries.map((country) => {\n        const feature: GeoJSON.Feature<GeoJSON.Point, Country> = {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              country.coordinates.longitude,\n              country.coordinates.latitude,\n            ],\n          },\n          properties: country,\n        };\n\n        return feature;\n      }),\n    };\n\n    return featuerCollection;\n  }\n);\n\nexport default countriesSlice.reducer;\n","import clsx from \"clsx\";\nimport React, { useContext } from \"react\";\nimport { Theme, ThemeContext } from \"../../common/theme/ThemeContext\";\nimport styles from \"./ThemeSwitch.module.css\";\n\nfunction ThemeSwitch() {\n  const { theme, switchTheme } = useContext(ThemeContext);\n\n  return (\n    <label className={styles.themeSwitch}>\n      <input\n        type=\"checkbox\"\n        checked={theme === Theme.Dark}\n        onChange={() =>\n          switchTheme(theme === Theme.Dark ? Theme.Light : Theme.Dark)\n        }\n      />\n      <span\n        className={clsx(styles.icon, theme === Theme.Dark && styles.iconDark)}\n        aria-label=\"Switch theme\"\n        role=\"img\"\n      >\n        💡\n      </span>\n    </label>\n  );\n}\n\nexport { ThemeSwitch };\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Viewport } from \"./mapTypes\";\n\nexport interface MapState {\n  viewport: Viewport;\n}\n\nconst initialState: MapState = {\n  viewport: {\n    longitude: 0,\n    latitude: 15,\n    zoom: 1.5,\n  },\n};\n\n// Slice\n\nexport const mapSlice = createSlice({\n  name: \"map\",\n  initialState,\n  reducers: {\n    setViewport: (state, action: PayloadAction<Viewport>) => {\n      state.viewport = action.payload;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectViewPort = (state: RootState) => state.map.viewport;\n\nexport const { setViewport } = mapSlice.actions;\nexport default mapSlice.reducer;\n","import { Status } from \"../countries/countriesTypes\";\n\nexport const COLORS_BY_FILTER_TYPE = {\n  [Status.Confirmed]: \"#FF5733\",\n  [Status.Recovered]: \"#7ECB88\",\n  [Status.Deaths]: \"#BD33FF\",\n  [Status.Active]: \"#FFBD33\",\n};\n\n/**\n * Creates an array with input/output paris for interpolate expression\n * @param max\n */\nexport function getInOurPais(max: number = 1000000) {\n  const steps = [0, 1, 5, 10, 50, 100, 500, 1000, 2000];\n  let step = 5000;\n\n  while (step <= max) {\n    steps.push(step);\n\n    if (step < 100000) {\n      step += 5000;\n    } else if (step < 200000) {\n      step += 10000;\n    } else {\n      step += 20000;\n    }\n  }\n\n  return steps.reduce((steps: number[], step: number, index) => {\n    return [...steps, step, index + 2 * 2];\n  }, []);\n}\n\n/**\n * Creates specific expression for getting timeline information from feature property\n * @param operator\n * @param date\n * @param status\n */\nexport function getTimelineExpression(\n  operator: mapboxgl.ExpressionName = \"get\",\n  date: string,\n  status: Status\n): mapboxgl.Expression {\n  return [operator, date, [\"get\", status, [\"get\", \"timeline\"]]];\n}\n","import React from \"react\";\nimport { Status } from \"../../countries/countriesTypes\";\nimport { COLORS_BY_FILTER_TYPE } from \"../mapUtils\";\n\ninterface RowProps {\n  label: string;\n  value: number;\n  perDay: number;\n  status: Status;\n}\n\nfunction Row({ label, value, perDay, status }: RowProps) {\n  return (\n    <div>\n      <span>{label}:</span>\n      <span style={{ color: COLORS_BY_FILTER_TYPE[status] }}>\n        <span>{value?.toLocaleString() || 0}</span>\n        <sup>\n          (\n          {`${perDay > 0 ? \"+\" : \"\"}${\n            (!isNaN(perDay) && perDay?.toLocaleString()) || 0\n          }`}\n          )\n        </sup>\n      </span>\n    </div>\n  );\n}\n\nexport { Row };\n","import { Moment } from \"moment\";\nimport React from \"react\";\nimport { SHORT_DATE_FORMAT } from \"../../../common/constants/global\";\nimport { Status } from \"../../countries/countriesTypes\";\nimport { HoveredCountry } from \"../mapTypes\";\nimport { Row } from \"./Row\";\nimport styles from \"./Tooltip.module.css\";\n\ninterface TooltipProps {\n  date: Moment;\n  hoveredCountry: HoveredCountry;\n}\n\nfunction Tooltip({ date, hoveredCountry }: TooltipProps) {\n  if (hoveredCountry.country) {\n    const currentDate: string = date.format(SHORT_DATE_FORMAT);\n    const prevDate: string = date\n      .clone()\n      .subtract(1, \"day\")\n      .format(SHORT_DATE_FORMAT);\n    const timeline = hoveredCountry.country.timeline;\n\n    return (\n      <div\n        className={styles.tooltip}\n        style={{\n          top: hoveredCountry.offsetY,\n          left: hoveredCountry.offsetX,\n        }}\n      >\n        <b>{hoveredCountry.country.country}</b>\n        <Row\n          label=\"Confirmed\"\n          value={timeline[Status.Confirmed][currentDate]}\n          perDay={\n            timeline[Status.Confirmed][currentDate] -\n            timeline[Status.Confirmed][prevDate]\n          }\n          status={Status.Confirmed}\n        />\n        <Row\n          label=\"Death\"\n          value={timeline[Status.Deaths][currentDate]}\n          perDay={\n            timeline[Status.Deaths][currentDate] -\n            timeline[Status.Deaths][prevDate]\n          }\n          status={Status.Deaths}\n        />\n        <Row\n          label=\"Recovered\"\n          value={timeline[Status.Recovered][currentDate]}\n          perDay={\n            timeline[Status.Recovered][currentDate] -\n            timeline[Status.Recovered][prevDate]\n          }\n          status={Status.Recovered}\n        />\n        <Row\n          label=\"Active\"\n          value={timeline[Status.Active][currentDate]}\n          perDay={\n            timeline[Status.Active][currentDate] -\n            timeline[Status.Active][prevDate]\n          }\n          status={Status.Active}\n        />\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport { Tooltip };\n","import { Feature } from \"geojson\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { Moment } from \"moment\";\nimport React, {\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport MapGL, {\n  FlyToInterpolator,\n  InteractiveMap,\n  InteractiveMapProps,\n  Layer,\n  Source,\n} from \"react-map-gl\";\nimport { useSelector } from \"react-redux\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { Theme, ThemeContext } from \"../../common/theme/ThemeContext\";\nimport { Nullable } from \"../../genericTypes\";\nimport {\n  selectCountriesByName,\n  selectlCountriesByTimelineFC,\n} from \"../countries/countriesSlice\";\nimport { CountriesByName, Country, Status } from \"../countries/countriesTypes\";\nimport {\n  selectFilterBy,\n  selectMomentTimelineDate,\n} from \"../sideBar/sideBarSlice\";\nimport { ThemeSwitch } from \"../themeSwitch/ThemeSwitch\";\nimport styles from \"./Map.module.css\";\nimport { selectViewPort } from \"./mapSlice\";\nimport {\n  COLORS_BY_FILTER_TYPE,\n  getInOurPais,\n  getTimelineExpression,\n} from \"./mapUtils\";\nimport { Tooltip } from \"./tooltip/Tooltip\";\n\nfunction Map() {\n  const mapRef = useRef<InteractiveMap>(null);\n  const { theme } = useContext(ThemeContext);\n  const initialViewport = useSelector(selectViewPort);\n  const [viewport, setViewport] = useState<Partial<InteractiveMapProps>>(\n    initialViewport\n  );\n  const [hoveredCountry, setHoveredCountry] = useState<{\n    country: Nullable<Country>;\n    offsetX: number;\n    offsetY: number;\n  }>({\n    country: null,\n    offsetX: 0,\n    offsetY: 0,\n  });\n  const countriesByName: CountriesByName = useSelector(selectCountriesByName);\n  const featureCollection = useSelector(selectlCountriesByTimelineFC);\n  const filterBy: Status = useSelector(selectFilterBy);\n  const currentMoment: Moment = useSelector(selectMomentTimelineDate);\n  const date: string = currentMoment.format(SHORT_DATE_FORMAT);\n  const hasCasesExpression = getTimelineExpression(\"has\", date, filterBy);\n  const getCasesExpression = getTimelineExpression(\"get\", date, filterBy);\n  const onHover = useCallback(\n    ({ features = [], srcEvent: { offsetX, offsetY } }) => {\n      const feature: Feature = features.find((f: any) =>\n        [\"label\", \"point\"].includes(f.layer.id)\n      );\n\n      if (feature && feature.properties && feature.properties.country) {\n        if (hoveredCountry.country !== feature.properties.country) {\n          return setHoveredCountry({\n            offsetX,\n            offsetY,\n            country: countriesByName[feature.properties.country],\n          });\n        }\n      } else {\n        if (hoveredCountry.country) {\n          return setHoveredCountry({\n            offsetX: 0,\n            offsetY: 0,\n            country: null,\n          });\n        }\n      }\n    },\n    [countriesByName, hoveredCountry]\n  );\n\n  useEffect(() => {\n    // fly to the new position\n    setViewport({\n      ...initialViewport,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: \"auto\",\n    });\n  }, [initialViewport]);\n\n  return (\n    <div className={styles.mapContainer}>\n      <MapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={`mapbox://styles/mapbox/${theme}-v10`}\n        mapboxApiAccessToken=\"pk.eyJ1IjoiZGVtcGtoIiwiYSI6ImNrOGZwanFuazAxdnozbG4yNm1tOHVuYzkifQ.fRJrCsndLJ4yM-jlPaAG9Q\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        onHover={onHover}\n      >\n        <Source id=\"data\" type=\"geojson\" data={featureCollection}>\n          <Layer\n            id=\"point\"\n            type=\"circle\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"circle-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                getCasesExpression,\n                ...getInOurPais(),\n              ],\n              \"circle-color\": COLORS_BY_FILTER_TYPE[filterBy],\n              \"circle-opacity\": 0.4,\n              \"circle-stroke-width\": 1,\n              \"circle-stroke-color\": COLORS_BY_FILTER_TYPE[filterBy],\n            }}\n          />\n          <Layer\n            id=\"label\"\n            type=\"symbol\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"text-color\": theme === Theme.Light ? \"#3B3B3B\" : \"#EBEBEB\",\n            }}\n            layout={{\n              \"text-field\": getCasesExpression,\n              \"text-font\": [\"DIN Offc Pro Medium\", \"Arial Unicode MS Bold\"],\n              \"text-size\": 12,\n            }}\n          />\n        </Source>\n        <Tooltip date={currentMoment} hoveredCountry={hoveredCountry} />\n      </MapGL>\n      <ThemeSwitch />\n    </div>\n  );\n}\n\nexport default memo(Map);\n","import React from \"react\";\nimport { SortIndicator, TableHeaderProps } from \"react-virtualized\";\nimport styles from \"./CountriesTable.module.css\";\n\nexport function headerRenderer({\n  dataKey,\n  label,\n  sortBy,\n  sortDirection,\n}: TableHeaderProps): React.ReactNode {\n  return (\n    <div key={dataKey} className={styles.headerCol}>\n      <span>{label}</span>\n      <span>\n        {sortBy === dataKey && <SortIndicator sortDirection={sortDirection} />}\n      </span>\n    </div>\n  );\n}\n","import clsx from \"clsx\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AutoSizer, Column, SortDirectionType, Table } from \"react-virtualized\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { selectSortedCountriesByTimelineDate } from \"../countries/countriesSlice\";\nimport { Country, Status } from \"../countries/countriesTypes\";\nimport { setViewport } from \"../map/mapSlice\";\nimport {\n  selectIsTableVisibleOnMobile,\n  selectMomentTimelineDate,\n  selectSortBy,\n  selectSortDirection,\n  sort,\n  toggleTableVisibility,\n} from \"../sideBar/sideBarSlice\";\nimport styles from \"./CountriesTable.module.css\";\nimport { headerRenderer } from \"./CountriesTableHeader\";\n\nexport function CountriesTable() {\n  const dispatch = useDispatch();\n  const countries: Country[] = useSelector(selectSortedCountriesByTimelineDate);\n  const date: string = useSelector(selectMomentTimelineDate).format(\n    SHORT_DATE_FORMAT\n  );\n  const sortBy: string = useSelector(selectSortBy);\n  const sortDirection: SortDirectionType = useSelector(selectSortDirection);\n  const isTableVisibleOnMobile: boolean = useSelector(\n    selectIsTableVisibleOnMobile\n  );\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <div\n        className={clsx(\n          styles.tableContainer,\n          !isTableVisibleOnMobile && styles.hiddenForMobile\n        )}\n      >\n        <AutoSizer>\n          {({ width, height }) => {\n            const indexWidth: number = 50;\n            const colWidth = ((width - indexWidth) / 100) * 17.5;\n            const countryWidth = ((width - indexWidth) / 100) * 30;\n\n            return (\n              <Table\n                width={width}\n                height={height}\n                headerHeight={40}\n                rowHeight={50}\n                rowCount={countries.length}\n                rowClassName={rowClassName}\n                rowGetter={({ index }) => countries[index]}\n                onRowClick={({ rowData }: { rowData: Country }) => {\n                  if (isTableVisibleOnMobile) {\n                    dispatch(toggleTableVisibility());\n                  }\n\n                  dispatch(\n                    setViewport({\n                      longitude: rowData.coordinates.longitude,\n                      latitude: rowData.coordinates.latitude,\n                      zoom: 6,\n                    })\n                  );\n                }}\n                sort={({ sortBy, sortDirection }) =>\n                  dispatch(sort({ sortBy, sortDirection }))\n                }\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n              >\n                <Column\n                  label=\"#\"\n                  dataKey=\"index\"\n                  disableSort\n                  width={indexWidth}\n                  headerRenderer={headerRenderer}\n                />\n                <Column\n                  width={countryWidth}\n                  label=\"Country\"\n                  dataKey=\"country\"\n                  defaultSortDirection=\"ASC\"\n                  headerRenderer={headerRenderer}\n                />\n                <Column\n                  label=\"Confirmed\"\n                  dataKey={Status.Confirmed}\n                  defaultSortDirection=\"DESC\"\n                  width={colWidth}\n                  headerRenderer={headerRenderer}\n                  cellDataGetter={({ dataKey, rowData }) =>\n                    rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                  }\n                />\n                <Column\n                  label=\"Recovered\"\n                  dataKey={Status.Recovered}\n                  defaultSortDirection=\"DESC\"\n                  width={colWidth}\n                  headerRenderer={headerRenderer}\n                  cellDataGetter={({ dataKey, rowData }) =>\n                    rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                  }\n                />\n                <Column\n                  label=\"Deaths\"\n                  dataKey={Status.Deaths}\n                  defaultSortDirection=\"DESC\"\n                  width={colWidth}\n                  headerRenderer={headerRenderer}\n                  cellDataGetter={({ dataKey, rowData }) =>\n                    rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                  }\n                />\n                <Column\n                  label=\"Active\"\n                  dataKey={Status.Active}\n                  defaultSortDirection=\"DESC\"\n                  width={colWidth}\n                  headerRenderer={headerRenderer}\n                  cellDataGetter={({ dataKey, rowData }) =>\n                    rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                  }\n                />\n              </Table>\n            );\n          }}\n        </AutoSizer>\n      </div>\n      <div\n        className={styles.toggleTable}\n        onClick={() => dispatch(toggleTableVisibility())}\n      >\n        {`${isTableVisibleOnMobile ? \"Hide\" : \"Show\"} table`}\n      </div>\n    </div>\n  );\n}\n\nfunction rowClassName({ index }: { index: number }): string {\n  if (index >= 0) {\n    return index % 2 ? styles.evenRow : styles.oddRow;\n  }\n\n  return styles.headerRow;\n}\n","import clsx from \"clsx\";\nimport React from \"react\";\nimport styles from \"./SideBar.module.css\";\n\ninterface HeaderOption {\n  label: string;\n  quantity: number;\n  activeColor: string;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function HeaderOption({\n  label,\n  quantity,\n  activeColor,\n  isActive,\n  onClick,\n}: HeaderOption) {\n  return (\n    <div\n      className={clsx(styles.headerStat, isActive && styles.headerStatActive)}\n      style={isActive ? { color: activeColor } : {}}\n      onClick={onClick}\n    >\n      <div className={styles.headerStatLabel}>{label}</div>\n      <div className={styles.headerStatTotalQuantity}>\n        {quantity.toLocaleString()}\n      </div>\n    </div>\n  );\n}\n","import moment, { Moment } from \"moment\";\nimport React, { memo, useCallback } from \"react\";\nimport \"./TimelinePanel.css\";\n\ninterface TimelinePanelProps {\n  date?: Moment;\n  onChange: (date: Moment) => void;\n  minDate?: Moment;\n  maxDate?: Moment;\n}\n\nfunction TimelinePanel({\n  date = moment(),\n  onChange,\n  minDate,\n  maxDate,\n}: TimelinePanelProps) {\n  const updateValue = useCallback(\n    (e) => {\n      const newDate = date.clone().dayOfYear(+e.currentTarget.value);\n      return onChange(newDate);\n    },\n    [date, onChange]\n  );\n\n  return (\n    <div className=\"timeline-panel\">\n      <label>{date.format(\"LL\")}</label>\n      <input\n        className=\"range\"\n        type=\"range\"\n        value={date.dayOfYear()}\n        step={1}\n        min={minDate?.dayOfYear()}\n        max={maxDate?.dayOfYear()}\n        onChange={updateValue}\n      />\n    </div>\n  );\n}\n\nexport default memo(TimelinePanel);\n","import clsx from \"clsx\";\nimport moment, { Moment } from \"moment\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSumDataByTimelineDate } from \"../countries/countriesSlice\";\nimport { Status } from \"../countries/countriesTypes\";\nimport { CountriesTable } from \"../countriesTable/CountriesTable\";\nimport { COLORS_BY_FILTER_TYPE } from \"../map/mapUtils\";\nimport { HeaderOption } from \"./HeaderOption\";\nimport styles from \"./SideBar.module.css\";\nimport {\n  selectFilterBy,\n  selectIsTableVisibleOnMobile,\n  selectMomentTimelineDate,\n  setFilterType,\n  setTimelineDate,\n} from \"./sideBarSlice\";\nimport TimelinePanel from \"./timelinePanel/TimelinePanel\";\n\nexport function SideBar() {\n  const dispatch = useDispatch();\n  const date: Moment = useSelector(selectMomentTimelineDate);\n  const filterBy: Status = useSelector(selectFilterBy);\n  const sumData = useSelector(selectSumDataByTimelineDate);\n  const isTableVisibleOnMobile: boolean = useSelector(\n    selectIsTableVisibleOnMobile\n  );\n\n  return (\n    <div\n      className={clsx(styles.sideBar, isTableVisibleOnMobile && styles.open)}\n    >\n      <div className={styles.header}>\n        <HeaderOption\n          label=\"Confirmed\"\n          quantity={sumData.confirmed}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Confirmed}\n          onClick={() => dispatch(setFilterType(Status.Confirmed))}\n        />\n        <HeaderOption\n          label=\"Recovered\"\n          quantity={sumData.recovered}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Recovered}\n          onClick={() => dispatch(setFilterType(Status.Recovered))}\n        />\n        <HeaderOption\n          label=\"Deaths\"\n          quantity={sumData.deaths}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Deaths}\n          onClick={() => dispatch(setFilterType(Status.Deaths))}\n        />\n        <HeaderOption\n          label=\"Active\"\n          quantity={sumData.active}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Active}\n          onClick={() => dispatch(setFilterType(Status.Active))}\n        />\n      </div>\n      <TimelinePanel\n        date={moment(date)}\n        onChange={(date) => dispatch(setTimelineDate(date.format()))}\n        minDate={moment(\"2020-01-22T00:00:00\")}\n        maxDate={moment()}\n      />\n      <CountriesTable />\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ThemeContextProvider } from \"../common/theme/ThemeContext\";\nimport { fetchCountries } from \"../features/countries/countriesSlice\";\nimport Map from \"../features/map/Map\";\nimport { SideBar } from \"../features/sideBar/SideBar\";\nimport \"./App.css\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCountries());\n  }, [dispatch]);\n\n  return (\n    <ThemeContextProvider>\n      <div className=\"App\">\n        <SideBar />\n        <Map />\n      </div>\n    </ThemeContextProvider>\n  );\n}\n\nexport default App;\n","import {\n  Action,\n  configureStore,\n  getDefaultMiddleware,\n  ThunkAction,\n} from \"@reduxjs/toolkit\";\nimport countries from \"../features/countries/countriesSlice\";\nimport map from \"../features/map/mapSlice\";\nimport sideBar from \"../features/sideBar/sideBarSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    countries,\n    map,\n    sideBar,\n  },\n  middleware: getDefaultMiddleware(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./app/App\";\nimport { store } from \"./app/store\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"CountriesTable_tableContainer__HsFmS\",\"toggleTable\":\"CountriesTable_toggleTable__1hgWR\",\"hiddenForMobile\":\"CountriesTable_hiddenForMobile__3k__Z\",\"headerCol\":\"CountriesTable_headerCol__2UGwN\",\"headerRow\":\"CountriesTable_headerRow__9aWhl\",\"evenRow\":\"CountriesTable_evenRow__24xvc\",\"oddRow\":\"CountriesTable_oddRow__3SP1f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBar\":\"SideBar_sideBar__3wXsx\",\"open\":\"SideBar_open__EKK0f\",\"header\":\"SideBar_header__1g25-\",\"headerStat\":\"SideBar_headerStat__3YXJj\",\"headerStatLabel\":\"SideBar_headerStatLabel__4KGyw\",\"headerStatTotalQuantity\":\"SideBar_headerStatTotalQuantity__hZtn3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"themeSwitch\":\"ThemeSwitch_themeSwitch__3iKsS\",\"icon\":\"ThemeSwitch_icon__1ZNa-\",\"iconDark\":\"ThemeSwitch_iconDark__349Y0\"};"],"sourceRoot":""}