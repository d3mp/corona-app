{"version":3,"sources":["features/countries/countriesTypes.ts","features/map/mapUtils.ts","features/map/mapSlice.ts","features/sideBar/sideBarSlice.ts","api/corona.ts","common/constants/global.ts","features/countries/countriesSlice.ts","features/map/Map.tsx","features/sideBar/HeaderOption.tsx","features/countriesTable/CountriesTableHeader.tsx","features/countriesTable/CountriesTable.tsx","features/sideBar/TimelinePanel.tsx","features/sideBar/SideBar.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/sideBar/SideBar.module.css","features/countriesTable/CountriesTable.module.css","features/map/Map.module.css"],"names":["Status","COLORS_BY_FILTER_TYPE","Comfirmed","Recovered","Deaths","Active","getInOurPais","max","steps","step","push","reduce","index","getTimelineExpression","operator","date","status","mapSlice","createSlice","name","initialState","viewport","longitude","latitude","zoom","reducers","setViewport","state","action","payload","selectViewPort","map","actions","filterBy","sortBy","sortDirection","SortDirection","DESC","timelineDate","moment","format","sideBarSlice","setFilterType","setTimelineDate","sort","selectSortBy","sideBar","selectSortDirection","selectFilterBy","selectMomentTimelineDate","createSelector","defaultTimeline","getCountries","a","urls","Promise","all","url","fetch","response","json","countriesByName","getCountriesByHistoricalName","historicalCountriesWithProvincesByName","getHistoricalCountriesWithProvincesByGlobalName","Object","values","countries","country","historicalCountry","timeline","keys","length","console","warn","removeEmptyDays","utc","value","province","coordinates","countryInfo","lat","long","cases","deaths","recovered","updated","globalToHistoricalNames","toLowerCase","prev","curr","timeline1","timeline2","convertHistoricalNameToGlobal","prevDates","active","shouldSummarizeProvinces","includes","timelineDates1","timelineDates2","dates","statuses","Palestine","Myanmar","Réunion","Macao","Curaçao","key","fetchCountries","createAsyncThunk","CoronaAPI","countriesSlice","loading","error","extraReducers","builder","addCase","pending","fulfilled","rejected","selectCountriesByName","selectCountries","selectCountriesByTimelineDate","filter","confirmed","selectSortedCountriesByTimelineDate","isSortByStatus","_","orderBy","ASC","selectSumDataByTimelineDate","total","selectlCountriesByTimelineFC","type","features","geometry","properties","memo","mapRef","useRef","initialViewport","useSelector","useState","offsetX","offsetY","hoveredCountry","setHoveredCountry","featureCollection","hasCasesExpression","getCasesExpression","onHover","useCallback","srcEvent","feature","find","f","layer","id","useEffect","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","className","styles","mapContainer","ref","width","height","mapStyle","mapboxApiAccessToken","onViewportChange","nextViewport","data","paint","layout","tooltip","style","top","left","color","toLocaleString","HeaderOption","label","quantity","activeColor","isActive","onClick","clsx","headerStat","headerStatActive","headerStatLabel","headerStatTotalQuantity","headerRenderer","dataKey","headerCol","CountriesTable","dispatch","useDispatch","tableContainer","colWidth","countryWidth","headerHeight","rowHeight","rowCount","rowClassName","rowGetter","onRowClick","rowData","disableSort","defaultSortDirection","cellDataGetter","evenRow","oddRow","headerRow","onChange","minDate","maxDate","updateValue","e","newDate","clone","dayOfYear","currentTarget","min","SideBar","sumData","header","body","App","store","configureStore","reducer","middleware","getDefaultMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"mOAEYA,E,6GAAAA,K,gBAAAA,E,sBAAAA,E,gBAAAA,E,uBAAAA,M,KCAL,IAAMC,GAAqB,mBAC/BD,EAAOE,UAAY,WADY,cAE/BF,EAAOG,UAAY,WAFY,cAG/BH,EAAOI,OAAS,WAHe,cAI/BJ,EAAOK,OAAS,WAJe,GAW3B,SAASC,IAId,IAJmD,IAAxBC,EAAuB,uDAAT,IACnCC,EAAQ,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IAAK,IAAK,IAAM,KAC5CC,EAAO,IAEJA,GAAQF,GACbC,EAAME,KAAKD,GAGTA,GADEA,EAAO,IACD,IACCA,EAAO,IACR,IAEA,IAIZ,OAAOD,EAAMG,QAAO,SAACH,EAAiBC,EAAcG,GAClD,MAAM,GAAN,mBAAWJ,GAAX,CAAkBC,EAAMG,EAAQ,MAC/B,IASE,SAASC,IAIQ,IAHtBC,EAGqB,uDAHe,MACpCC,EAEqB,uCADrBC,EACqB,uCACrB,MAAO,CAACF,EAAUC,EAAM,CAAC,MAAOC,EAAQ,CAAC,MAAO,c,cC3BrCC,EAAWC,YAAY,CAClCC,KAAM,MACNC,aAZ6B,CAC7BC,SAAU,CACRC,UAAW,EACXC,SAAU,GACVC,KAAM,MASRC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMN,SAAWO,EAAOC,YAOjBC,EAAiB,SAACH,GAAD,OAAsBA,EAAMI,IAAIV,UAE/CK,EAAgBT,EAASe,QAAzBN,YACAT,IAAf,Q,iCCpBMG,EAA6B,CACjCa,SAAUjC,EAAOE,UACjBgC,OAAQlC,EAAOE,UACfiC,cAAeC,IAAcC,KAC7BC,aAAcC,MAASC,UAGZC,EAAevB,YAAY,CACtCC,KAAM,UACNC,eACAK,SAAU,CACRiB,cAAe,SAACf,EAAOC,GACrBD,EAAMM,SAAWL,EAAOC,SAE1Bc,gBAAiB,SAAChB,EAAOC,GACvBD,EAAMW,aAAeV,EAAOC,SAE9Be,KAAM,SACJjB,EACAC,GAKAD,EAAMO,OAASN,EAAOC,QAAQK,OAC9BP,EAAMQ,cAAgBP,EAAOC,QAAQM,kBAO9BU,EAAe,SAAClB,GAAD,OAAsBA,EAAMmB,QAAQZ,QACnDa,EAAsB,SAACpB,GAAD,OACjCA,EAAMmB,QAAQX,eAGHa,EAAiB,SAACrB,GAAD,OAAsBA,EAAMmB,QAAQb,UAErDgB,EAA2BC,YACtC,CALgC,SAACvB,GAAD,OAChCA,EAAMmB,QAAQR,gBAKd,SAACA,GAAD,OAA0BC,IAAOD,M,EAGqBG,EAAaT,QAAtDU,E,EAAAA,cAAeC,E,EAAAA,gBAAiBC,E,EAAAA,KAChCH,IAAf,Q,2CChDMU,GAAyB,mBAC5BnD,EAAOK,OAAS,IADY,cAE5BL,EAAOE,UAAY,IAFS,cAG5BF,EAAOI,OAAS,IAHY,cAI5BJ,EAAOG,UAAY,IAJS,GAOxB,SAAeiD,IAAtB,+B,4CAAO,kCAAAC,EAAA,6DACCC,EAAiB,CACrB,sCACA,wDAHG,SAKkBC,QAAQC,IAC7BF,EAAKvB,IAAL,uCAAS,WAAO0B,GAAP,eAAAJ,EAAA,sEACgBK,MAAMD,GADtB,cACDE,EADC,yBAEAA,EAASC,QAFT,2CAAT,wDANG,cAKCD,EALD,OAYCE,EAAmCC,EACvCH,EAAS,IAELI,EAA0DC,EAC9DL,EAAS,GACTE,GAjBG,kBAoBEI,OAAOC,OAAOL,GAAiBlD,QACpC,SAACwD,EAA4BC,GAAsB,IAAD,EAC1CC,EACJN,EAAuCK,EAAQA,SAC3CE,EAAqBD,EACvBA,EAAkBC,SAClBnB,EAMJ,OAJKc,OAAOM,KAAKD,EAAStE,EAAOE,YAAYsE,QAC3CC,QAAQC,KAAK,6BAA8BN,GAGtC,eACFD,EADL,eAEGC,EAAQA,QAFX,eAGOA,EAHP,CAIIE,SAAUK,GAAe,mBACtB3E,EAAOK,OADe,eAElBiE,EAAStE,EAAOK,QAFE,GAGlB+D,EAAQE,SAAStE,EAAOK,UAHN,cAKtBL,EAAOE,UALe,eAMlBoE,EAAStE,EAAOE,WANE,GAOlBkE,EAAQE,SAAStE,EAAOE,aAPN,cAStBF,EAAOI,OATe,eAUlBkE,EAAStE,EAAOI,QAVE,GAWlBgE,EAAQE,SAAStE,EAAOI,UAXN,cAatBJ,EAAOG,UAbe,eAclBmE,EAAStE,EAAOG,WAdE,GAelBiE,EAAQE,SAAStE,EAAOG,aAfN,UAqB/B,KAzDG,4C,sBAiEP,SAAS2D,EAA6BH,GACpC,IAAM5C,EAAOwB,IAAOqC,MAAMpC,OCnFK,UDqF/B,OAAOmB,EAAShD,QAAO,SAACkD,EAAkCgB,GAAgB,IAAD,EA0KpC1D,EAzK7BiD,EAAmB,CACvBA,QAASS,EAAMT,QACfU,SAAU,KACVC,YAAa,CACXxD,SAAUsD,EAAMG,YAAYC,IAC5B3D,UAAWuD,EAAMG,YAAYE,MAE/BZ,UAAQ,mBACLtE,EAAOK,OADF,eAEHU,EAAO8D,EAAMM,MAAQN,EAAMO,OAASP,EAAMQ,YAFvC,cAILrF,EAAOE,UAJF,eAKHa,EAAO8D,EAAMM,QALV,cAOLnF,EAAOI,OAPF,eAQHW,EAAO8D,EAAMO,SARV,cAULpF,EAAOG,UAVF,eAWHY,EAAO8D,EAAMQ,YAXV,GAcRC,QAAST,EAAMS,SAGjB,OAAO,eACFzB,EADL,gBAkJM0B,EAD6BpE,EA/IFiD,EAAQA,UAgJFjD,GAAMqE,cAhJOpB,MAEnD,IAQL,SAASJ,EACPL,EACAE,GAEA,OAAOF,EAAShD,QAAO,SAAC8E,EAAuBC,GAAe,IAAD,MA6FzCC,EAAqBC,EA5FjCxB,EAAmB,CACvBA,SACE,UAAAP,EAAgB6B,EAAKtB,gBAArB,eAA+BA,UAC/ByB,EAA8BH,EAAKtB,SACrCU,UACE,UAAAjB,EAAgB6B,EAAKZ,iBAArB,eAAgCV,UAChCyB,EAA8BH,EAAKZ,UACrCC,YAAa,CACXxD,SAAU,EACVD,UAAW,GAEbgD,UAAQ,mBACLtE,EAAOK,OAAS4D,OAAOM,KAAKmB,EAAKpB,SAASa,OAAOxE,QAChD,SAACmF,EAA0B/E,GACzB,IAAMgF,EACJL,EAAKpB,SAASa,MAAMpE,GACpB2E,EAAKpB,SAASc,OAAOrE,GACrB2E,EAAKpB,SAASe,UAAUtE,GAI1B,OAFA+E,EAAU/E,GAAQgF,EAEXD,IAET,KAZI,cAcL9F,EAAOE,UAAYwF,EAAKpB,SAASa,OAd5B,cAeLnF,EAAOI,OAASsF,EAAKpB,SAASc,QAfzB,cAgBLpF,EAAOG,UAAYuF,EAAKpB,SAASe,WAhB5B,IAmBJW,EAAoC,CACxC,YACA,QACA,UACAC,SAAS7B,EAAQA,SAyBnB,OAvBKqB,EAAKrB,EAAQA,UACXA,EAAQU,WAAYkB,IACvBP,EAAKrB,EAAQA,SAAb,eACKA,EADL,CAEEU,SAAU,KACVR,SAAUF,EAAQU,SAAW3B,EAAkBiB,EAAQE,YAKzDF,EAAQU,WACVW,EAAKrB,EAAQU,UAAYV,GAGvBqB,EAAKrB,EAAQA,UAAYA,EAAQU,UAC/BkB,IACFP,EAAKrB,EAAQA,SAASE,UAwCRqB,EAvCZF,EAAKrB,EAAQA,SAASE,SAuCWsB,EAtCjCxB,EAAQE,SAuCCL,OAAOM,KAAKoB,GAEbhF,QAAO,SAAC2D,EAAoBtD,GAC1C,IAAMkF,EAAiBjC,OAAOM,KAAKoB,EAAU3E,IACvCmF,EAAiBlC,OAAOM,KAAKqB,EAAU5E,IACvCoF,EAAQF,EAAe1B,OAAS0B,EAAiBC,EAEvD,OAAO,eACF7B,EADL,eAEGtD,EAASoF,EAAMzF,QAAO,SAACyF,EAAOrF,GAC7B,OAAO,eACFqF,EADL,eAEGrF,GACE4E,EAAU3E,GAAQD,IAAS,IAAM6E,EAAU5E,GAAQD,IAAS,OAEhE,QAEJoC,KAnDMsC,IACN,IAOL,SAASd,EAAgBL,GAGvB,OAFiBL,OAAOM,KAAKD,GAEb3D,QAAO,SAAC0F,EAAoBrF,GAC1C,OAAO,eACFqF,EADL,eAEGrF,EAASiD,OAAOM,KAAKD,EAAStD,IAASL,QACtC,SAACyF,EAAsBrF,GAKrB,OAJIuD,EAAStD,GAAQD,KACnBqF,EAAMrF,GAAQuD,EAAStD,GAAQD,IAG1BqF,IAET,QAGHjD,GA6BL,IAAMoC,EAAsD,CAC1D,mBAAiB,gBACjBe,UAAW,qBACX,mCAAoC,mCACpCC,QAAS,QACT,gCAAiC,WACjCC,aAAS,UACTC,MAAO,QACP,eAAgB,YAChB,YAAa,mBACb,wBAAyB,4BACzBC,aAAS,UACT,wBAAyB,oCAO3B,SAASb,EAA8B1E,GAQrC,OALI8C,OAAOM,KAAKgB,GAAyB5E,QACvC,SAAC8E,EAAMkB,GAAP,sBAAqBlB,EAArB,eAA4BF,EAAwBoB,GAAOA,MAC3D,IAG6BxF,IAASA,EE/OnC,IAAMyF,EAAiBC,YAC5B,2BAD4C,sBAE5C,sBAAAxD,EAAA,sEAAkByD,IAAlB,oFAiBWC,EAAiB7F,YAAY,CACxCC,KAAM,YACNC,aARmC,CACnC4F,QAAS,OACTnD,gBAAiB,GACjBoD,MAAO,MAMPxF,SAAU,GACVyF,cAAe,SAACC,GACdA,EACGC,QAAQR,EAAeS,SAAS,SAAC1F,GACV,SAAlBA,EAAMqF,UACRrF,EAAMqF,QAAU,cAGnBI,QACCR,EAAeU,WACf,SAAC3F,EAAOC,GACgB,YAAlBD,EAAMqF,UACRrF,EAAMqF,QAAU,QAGlBrF,EAAMkC,gBAAkBjC,EAAOC,WAGlCuF,QAAQR,EAAeW,UAAU,SAAC5F,EAAOC,GACxCD,EAAMsF,MAAQrF,EAAOqF,YAOhBO,GAAwB,SAAC7F,GAAD,OACnCA,EAAMwC,UAAUN,iBAEL4D,GAAkBvE,YAC7B,CAACsE,KACD,SAAC3D,GAAD,OAAsCI,OAAOC,OAAOL,MAGzC6D,GAAgCxE,YAC3C,CAACuE,GAAiBxE,IAClB,SAACkB,EAAsB7B,GACrB,IAAMvB,EAAeuB,EAAaE,ODvFL,UCyF7B,OAAO2B,EAAUwD,QAAO,SAACvD,GACvB,OACEA,EAAQE,SAASyB,OAAOhF,IACxBqD,EAAQE,SAASsD,UAAU7G,IAC3BqD,EAAQE,SAASc,OAAOrE,IACxBqD,EAAQE,SAASe,UAAUtE,SAMtB8G,GAAsC3E,YACjD,CACEwE,GACAzE,EACAJ,EACAE,IAEF,SACEoB,EACA7B,EACAJ,EACAC,GAEA,IAAMpB,EAAeuB,EAAaE,ODjHL,UCkHvBsF,EAAiB7D,OAAOC,OAAOlE,GAAeiG,SAAS/D,GAE7D,OAAO6F,IAAEC,QACP7D,GACA,SAACC,GACC,OAAI0D,EACK1D,EAAQE,SAASpC,GAAkBnB,IAAS,EAG9CqD,EAAQlC,KAEjBC,IAAkBC,IAAc6F,IAAM,MAAQ,QAC9ClG,KAAI,SAACqC,EAASxD,GAAV,sBAA0BwD,EAA1B,CAAmCxD,MAAOA,EAAQ,UAI/CsH,GAA8BhF,YACzC,CAACwE,GAA+BzE,IAChC,SAACkB,EAAsB7B,GACrB,IAMMvB,EAAeuB,EAAaE,OD3IL,UC6I7B,OAAO2B,EAAUxD,QAAO,SAACwH,EAAuB/D,GAC9C,MAAO,CACL2B,OAAQoC,EAAMpC,QAAU3B,EAAQE,SAASyB,OAAOhF,IAAS,GACzD6G,UAAWO,EAAMP,WAAaxD,EAAQE,SAASsD,UAAU7G,IAAS,GAClEqE,OAAQ+C,EAAM/C,QAAUhB,EAAQE,SAASc,OAAOrE,IAAS,GACzDsE,UAAW8C,EAAM9C,WAAajB,EAAQE,SAASe,UAAUtE,IAAS,MAbhC,CACpCgF,OAAQ,EACR6B,UAAW,EACXxC,OAAQ,EACRC,UAAW,OAeJ+C,GAA+BlF,YAC1C,CAACwE,KACD,SAACvD,GAuBC,MAnBI,CACFkE,KAAM,oBACNC,SAAUnE,EAAUpC,KAAI,SAACqC,GAavB,MAZyD,CACvDiE,KAAM,UACNE,SAAU,CACRF,KAAM,QACNtD,YAAa,CACXX,EAAQW,YAAYzD,UACpB8C,EAAQW,YAAYxD,WAGxBiH,WAAYpE,UAWP2C,KAAf,Q,oBCCe0B,uBAvJf,WAAgB,IAAD,QACPC,EAASC,iBAAuB,MAChCC,EAAkBC,YAAY/G,GAFvB,EAGmBgH,mBAC9BF,GAJW,mBAGNvH,EAHM,KAGIK,EAHJ,OAM+BoH,mBAIzC,CACD1E,QAAS,KACT2E,QAAS,EACTC,QAAS,IAbE,mBAMNC,EANM,KAMUC,EANV,KAePrF,EAAmCgF,YAAYrB,IAC/C2B,EAAoBN,YAAYT,IAChCnG,EAAmB4G,YAAY7F,GAC/BjC,EAAe8H,YAAY5F,GAA0BT,OFjD5B,UEoDzB4G,EAAqBvI,EAAsB,MAAOE,EAAMkB,GACxDoH,EAAqBxI,EAAsB,MAAOE,EAAMkB,GACxDqH,EAAUC,uBACd,YAAwD,IAAD,IAApDjB,gBAAoD,MAAzC,GAAyC,MAArCkB,SAAYT,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,QAC/BS,EAAmBnB,EAASoB,MAAK,SAACC,GAAD,MACrC,CAAC,QAAS,SAAS1D,SAAS0D,EAAEC,MAAMC,OAGtC,GAAIJ,GAAWA,EAAQjB,YAAciB,EAAQjB,WAAWpE,SACtD,GAAI6E,EAAe7E,UAAYqF,EAAQjB,WAAWpE,QAChD,OAAO8E,EAAkB,CACvBH,UACAC,UACA5E,QAASP,EAAgB4F,EAAQjB,WAAWpE,gBAIhD,GAAI6E,EAAe7E,QACjB,OAAO8E,EAAkB,CACvBH,QAAS,EACTC,QAAS,EACT5E,QAAS,SAKjB,CAACP,EAAiBoF,IAYpB,OATAa,qBAAU,WAERpI,EAAY,eACPkH,EADM,CAETmB,uBAAwB,IAAIC,IAAkB,CAAEC,MAAO,MACvDC,mBAAoB,YAErB,CAACtB,IAGF,yBAAKuB,UAAWC,KAAOC,cACrB,kBAAC,IAAD,eACEC,IAAK5B,GACDrH,EAFN,CAGEkJ,MAAM,OACNC,OAAO,QACPC,SAAS,kCACTC,qBAAqB,2FACrBC,iBAAkB,SAACC,GAAD,OAAkBlJ,EAAYkJ,IAChDtB,QAASA,IAET,kBAAC,IAAD,CAAQO,GAAG,OAAOxB,KAAK,UAAUwC,KAAM1B,GACrC,kBAAC,IAAD,CACEU,GAAG,QACHxB,KAAK,SACLV,OAAQ,CAAC,MAAOyB,EAAoB,CAAC,IAAKC,EAAoB,IAC9DyB,MAAO,CACL,gBAAgB,CACd,cACA,CAAC,UACDzB,GAHF,mBAIK/I,MAEL,eAAgBL,EAAsBgC,GACtC,iBAAkB,GAClB,sBAAuB,EACvB,sBAAuBhC,EAAsBgC,MAGjD,kBAAC,IAAD,CACE4H,GAAG,QACHxB,KAAK,SACLV,OAAQ,CAAC,MAAOyB,EAAoB,CAAC,IAAKC,EAAoB,IAC9DyB,MAAO,CACL,aAAc,WAEhBC,OAAQ,CACN,aAAc1B,EACd,YAAa,CAAC,sBAAuB,yBACrC,YAAa,OAIlBJ,EAAe7E,QACd,yBACE+F,UAAWC,KAAOY,QAClBC,MAAO,CACLC,IAAKjC,EAAeD,QACpBmC,KAAMlC,EAAeF,UAGvB,2BAAIE,EAAe7E,QAAQA,SAC3B,6BACE,4CACA,0BAAM6G,MAAO,CAAEG,MAAOnL,EAAsBD,EAAOE,cAChD,UAAA+I,EAAe7E,QAAQE,SAAStE,EAAOE,WACtCa,UADD,eAEEsK,mBAAoB,IAG3B,6BACE,yCACA,0BAAMJ,MAAO,CAAEG,MAAOnL,EAAsBD,EAAOI,WAChD,UAAA6I,EAAe7E,QAAQE,SAAStE,EAAOI,QACtCW,UADD,eAEEsK,mBAAoB,IAG3B,6BACE,4CACA,0BAAMJ,MAAO,CAAEG,MAAOnL,EAAsBD,EAAOG,cAChD,UAAA8I,EAAe7E,QAAQE,SAAStE,EAAOG,WACtCY,UADD,eAEEsK,mBAAoB,IAG3B,6BACE,yCACA,0BAAMJ,MAAO,CAAEG,MAAOnL,EAAsBD,EAAOK,WAChD,UAAA4I,EAAe7E,QAAQE,SAAStE,EAAOK,QACtCU,UADD,eAEEsK,mBAAoB,KAI3B,U,6BCpKL,SAASC,GAAT,GAMW,IALhBC,EAKe,EALfA,MACAC,EAIe,EAJfA,SACAC,EAGe,EAHfA,YACAC,EAEe,EAFfA,SACAC,EACe,EADfA,QAEA,OACE,yBACExB,UAAWyB,aAAKxB,KAAOyB,WAAYH,GAAYtB,KAAO0B,kBACtDb,MAAOS,EAAW,CAAEN,MAAOK,GAAgB,GAC3CE,QAASA,GAET,yBAAKxB,UAAWC,KAAO2B,iBAAkBR,GACzC,yBAAKpB,UAAWC,KAAO4B,yBACpBR,EAASH,mB,wBCtBX,SAASY,GAAT,GAKgC,IAJrCC,EAIoC,EAJpCA,QACAX,EAGoC,EAHpCA,MACArJ,EAEoC,EAFpCA,OACAC,EACoC,EADpCA,cAEA,OACE,yBAAKwE,IAAKuF,EAAS/B,UAAWC,KAAO+B,WACnC,8BAAOZ,GACP,8BACGrJ,IAAWgK,GAAW,kBAAC,IAAD,CAAe/J,cAAeA,MCCtD,SAASiK,KACd,IAAMC,EAAWC,cACXnI,EAAuB0E,YAAYhB,IACnC9G,EAAe8H,YAAY5F,GAA0BT,OLnB5B,UKsBzBN,EAAiB2G,YAAYhG,GAC7BV,EAAmC0G,YAAY9F,GAErD,OACE,yBAAKoH,UAAWC,KAAOmC,gBACrB,kBAAC,IAAD,MACG,YAAwB,IAArBhC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAEHgC,GAAajC,EADQ,IACc,IAAO,KAC1CkC,GAAiBlC,EAFI,IAEkB,IAAO,GAEpD,OACE,kBAAC,IAAD,CACEA,MAAOA,EACPC,OAAQA,EACRkC,aAAc,GACdC,UAAW,GACXC,SAAUzI,EAAUK,OACpBqI,aAAcA,GACdC,UAAW,gBAAGlM,EAAH,EAAGA,MAAH,OAAeuD,EAAUvD,IACpCmM,WAAY,gBAAGC,EAAH,EAAGA,QAAH,OACVX,EACE3K,EAAY,CACVJ,UAAW0L,EAAQjI,YAAYzD,UAC/BC,SAAUyL,EAAQjI,YAAYxD,SAC9BC,KAAM,MAIZoB,KAAM,gBAAGV,EAAH,EAAGA,OAAQC,EAAX,EAAWA,cAAX,OACJkK,EAASzJ,EAAK,CAAEV,SAAQC,oBAE1BD,OAAQA,EACRC,cAAeA,GAEf,kBAAC,IAAD,CACEoJ,MAAM,IACNW,QAAQ,QACRe,aAAW,EACX1C,MAhCqB,GAiCrB0B,eAAgBA,KAElB,kBAAC,IAAD,CACE1B,MAAOkC,EACPlB,MAAM,UACNW,QAAQ,UACRgB,qBAAqB,MACrBjB,eAAgBA,KAElB,kBAAC,IAAD,CACEV,MAAM,YACNW,QAASlM,EAAOE,UAChBgN,qBAAqB,OACrB3C,MAAOiC,EACPP,eAAgBA,GAChBkB,eAAgB,kBAAGjB,EAAH,EAAGA,QAAH,OACd,UADc,EAAYc,QAClB1I,SAAS4H,GAASnL,UAA1B,eAAiCsK,mBAAoB,KAGzD,kBAAC,IAAD,CACEE,MAAM,YACNW,QAASlM,EAAOG,UAChB+M,qBAAqB,OACrB3C,MAAOiC,EACPP,eAAgBA,GAChBkB,eAAgB,kBAAGjB,EAAH,EAAGA,QAAH,OACd,UADc,EAAYc,QAClB1I,SAAS4H,GAASnL,UAA1B,eAAiCsK,mBAAoB,KAGzD,kBAAC,IAAD,CACEE,MAAM,SACNW,QAASlM,EAAOI,OAChB8M,qBAAqB,OACrB3C,MAAOiC,EACPP,eAAgBA,GAChBkB,eAAgB,kBAAGjB,EAAH,EAAGA,QAAH,OACd,UADc,EAAYc,QAClB1I,SAAS4H,GAASnL,UAA1B,eAAiCsK,mBAAoB,KAGzD,kBAAC,IAAD,CACEE,MAAM,SACNW,QAASlM,EAAOK,OAChB6M,qBAAqB,OACrB3C,MAAOiC,EACPP,eAAgBA,GAChBkB,eAAgB,kBAAGjB,EAAH,EAAGA,QAAH,OACd,UADc,EAAYc,QAClB1I,SAAS4H,GAASnL,UAA1B,eAAiCsK,mBAAoB,UAWvE,SAASwB,GAAT,GAA6D,IAArCjM,EAAoC,EAApCA,MACtB,OAAIA,GAAS,EACJA,EAAQ,EAAIwJ,KAAOgD,QAAUhD,KAAOiD,OAGtCjD,KAAOkD,U,OCnFD7E,uBA9Bf,YAKwB,IAAD,IAJrB1H,YAIqB,MAJdwB,MAIc,EAHrBgL,EAGqB,EAHrBA,SACAC,EAEqB,EAFrBA,QACAC,EACqB,EADrBA,QAEMC,EAAcnE,uBAClB,SAACoE,GACC,IAAMC,EAAU7M,EAAK8M,QAAQC,WAAWH,EAAEI,cAAclJ,OACxD,OAAO0I,EAASK,KAElB,CAAC7M,EAAMwM,IAGT,OACE,yBAAKpD,UAAU,kBACb,+BAAQpJ,EAAKyB,OAAO,OACpB,2BACE2H,UAAU,QACV9B,KAAK,QACLxD,MAAO9D,EAAK+M,YACZrN,KAAM,EACNuN,IAAG,OAAER,QAAF,IAAEA,OAAF,EAAEA,EAASM,YACdvN,IAAG,OAAEkN,QAAF,IAAEA,OAAF,EAAEA,EAASK,YACdP,SAAUG,QCjBX,SAASO,KACd,IAAM5B,EAAWC,cACXvL,EAAe8H,YAAY5F,GAC3BhB,EAAmB4G,YAAY7F,GAC/BkL,EAAUrF,YAAYX,IAE5B,OACE,yBAAKiC,UAAWC,KAAOtH,SACrB,yBAAKqH,UAAWC,KAAO+D,QACrB,kBAAC7C,GAAD,CACEC,MAAM,YACNC,SAAU0C,EAAQtG,UAClB6D,YAAaxL,EAAsBgC,GACnCyJ,SAAUzJ,IAAajC,EAAOE,UAC9ByL,QAAS,kBAAMU,EAAS3J,EAAc1C,EAAOE,eAE/C,kBAACoL,GAAD,CACEC,MAAM,YACNC,SAAU0C,EAAQ7I,UAClBoG,YAAaxL,EAAsBgC,GACnCyJ,SAAUzJ,IAAajC,EAAOG,UAC9BwL,QAAS,kBAAMU,EAAS3J,EAAc1C,EAAOG,eAE/C,kBAACmL,GAAD,CACEC,MAAM,SACNC,SAAU0C,EAAQ9I,OAClBqG,YAAaxL,EAAsBgC,GACnCyJ,SAAUzJ,IAAajC,EAAOI,OAC9BuL,QAAS,kBAAMU,EAAS3J,EAAc1C,EAAOI,YAE/C,kBAACkL,GAAD,CACEC,MAAM,SACNC,SAAU0C,EAAQnI,OAClB0F,YAAaxL,EAAsBgC,GACnCyJ,SAAUzJ,IAAajC,EAAOK,OAC9BsL,QAAS,kBAAMU,EAAS3J,EAAc1C,EAAOK,aAGjD,yBAAK8J,UAAWC,KAAOgE,MACrB,kBAAC,GAAD,CACErN,KAAMwB,IAAOxB,GACbwM,SAAU,SAACxM,GAAD,OAAUsL,EAAS1J,EAAgB5B,EAAKyB,YAClDgL,QAASjL,IAAO,uBAChBkL,QAASlL,QAEX,kBAAC6J,GAAD,Q,OCxCOiC,OAhBf,WACE,IAAMhC,EAAWC,cAMjB,OAJAxC,qBAAU,WACRuC,EAASzF,OACR,CAACyF,IAGF,yBAAKlC,UAAU,OACb,kBAAC8D,GAAD,MACA,kBAAC,GAAD,QCPOK,GAAQC,YAAe,CAClCC,QAAS,CACPrK,aACApC,MACAe,WAEF2L,WAAYC,gBCJMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUX,MAAOA,IACf,kBAAC,GAAD,OAEFY,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACzI,GACNxC,QAAQwC,MAAMA,EAAM0I,a,mBE7I5BC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,WAAa,4BAA4B,gBAAkB,iCAAiC,wBAA0B,yCAAyC,KAAO,wB,mBCA5PD,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,UAAY,kCAAkC,UAAY,kCAAkC,QAAU,gCAAgC,OAAS,iC,mBCAzND,EAAOC,QAAU,CAAC,aAAe,0BAA0B,QAAU,wB","file":"static/js/main.214692b0.chunk.js","sourcesContent":["import { Nullable, HashMap } from \"../../genericTypes\";\n\nexport enum Status {\n  Active = \"active\",\n  Comfirmed = \"confirmed\",\n  Deaths = \"deaths\",\n  Recovered = \"recovered\",\n}\n\nexport interface Country {\n  country: string;\n  province: Nullable<string>;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timeline: Timeline;\n  updated?: Date;\n}\n\nexport type CountriesByName = HashMap<Country>;\nexport type TimelineDates = HashMap<number>;\n\nexport interface Timeline {\n  [Status.Active]: TimelineDates;\n  [Status.Comfirmed]: TimelineDates;\n  [Status.Deaths]: TimelineDates;\n  [Status.Recovered]: TimelineDates;\n}\n\nexport interface Timeline {\n  [Status.Active]: HashMap<number>;\n  [Status.Comfirmed]: HashMap<number>;\n  [Status.Deaths]: HashMap<number>;\n  [Status.Recovered]: HashMap<number>;\n}\n\nexport interface TotalByCountry {\n  active: number;\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n}\n","import { Status } from \"../countries/countriesTypes\";\n\nexport const COLORS_BY_FILTER_TYPE = {\n  [Status.Comfirmed]: \"#FF5733\",\n  [Status.Recovered]: \"#75FF33\",\n  [Status.Deaths]: \"#BD33FF\",\n  [Status.Active]: \"#FFBD33\",\n};\n\n/**\n * Creates an array with input/output paris for interpolate expression\n * @param max\n */\nexport function getInOurPais(max: number = 1000000) {\n  const steps = [0, 1, 5, 10, 50, 100, 500, 1000, 2000];\n  let step = 5000;\n\n  while (step <= max) {\n    steps.push(step);\n\n    if (step < 100000) {\n      step += 5000;\n    } else if (step < 200000) {\n      step += 10000;\n    } else {\n      step += 20000;\n    }\n  }\n\n  return steps.reduce((steps: number[], step: number, index) => {\n    return [...steps, step, index + 2 * 2];\n  }, []);\n}\n\n/**\n * Creates specific expression for getting timeline information from feature property\n * @param operator\n * @param date\n * @param status\n */\nexport function getTimelineExpression(\n  operator: mapboxgl.ExpressionName = \"get\",\n  date: string,\n  status: Status\n): mapboxgl.Expression {\n  return [operator, date, [\"get\", status, [\"get\", \"timeline\"]]];\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Viewport } from \"./mapTypes\";\n\nexport interface MapState {\n  viewport: Viewport;\n}\n\nconst initialState: MapState = {\n  viewport: {\n    longitude: 0,\n    latitude: 15,\n    zoom: 1.5,\n  },\n};\n\n// Slice\n\nexport const mapSlice = createSlice({\n  name: \"map\",\n  initialState,\n  reducers: {\n    setViewport: (state, action: PayloadAction<Viewport>) => {\n      state.viewport = action.payload;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectViewPort = (state: RootState) => state.map.viewport;\n\nexport const { setViewport } = mapSlice.actions;\nexport default mapSlice.reducer;\n","import moment from \"moment\";\nimport { createSlice, PayloadAction, createSelector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { SortDirectionType, SortDirection } from \"react-virtualized\";\nimport { Status } from \"../countries/countriesTypes\";\n\ninterface SideBarState {\n  filterBy: Status;\n  sortBy: string;\n  sortDirection: SortDirectionType;\n  timelineDate: string; // ISO format\n}\n\nconst initialState: SideBarState = {\n  filterBy: Status.Comfirmed,\n  sortBy: Status.Comfirmed,\n  sortDirection: SortDirection.DESC,\n  timelineDate: moment().format(),\n};\n\nexport const sideBarSlice = createSlice({\n  name: \"sideBar\",\n  initialState,\n  reducers: {\n    setFilterType: (state, action: PayloadAction<Status>) => {\n      state.filterBy = action.payload;\n    },\n    setTimelineDate: (state, action: PayloadAction<string>) => {\n      state.timelineDate = action.payload;\n    },\n    sort: (\n      state,\n      action: PayloadAction<{\n        sortBy: string;\n        sortDirection: SortDirectionType;\n      }>\n    ) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortDirection = action.payload.sortDirection;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectSortBy = (state: RootState) => state.sideBar.sortBy;\nexport const selectSortDirection = (state: RootState) =>\n  state.sideBar.sortDirection;\nexport const selectTimelineDate = (state: RootState) =>\n  state.sideBar.timelineDate;\nexport const selectFilterBy = (state: RootState) => state.sideBar.filterBy;\n\nexport const selectMomentTimelineDate = createSelector(\n  [selectTimelineDate],\n  (timelineDate: string) => moment(timelineDate)\n);\n\nexport const { setFilterType, setTimelineDate, sort } = sideBarSlice.actions;\nexport default sideBarSlice.reducer;\n","import moment from \"moment\";\nimport {\n  Country,\n  Status,\n  Timeline,\n  CountriesByName,\n  TimelineDates,\n} from \"../features/countries/countriesTypes\";\nimport { SHORT_DATE_FORMAT } from \"../common/constants/global\";\n\nconst defaultTimeline: Timeline = {\n  [Status.Active]: {},\n  [Status.Comfirmed]: {},\n  [Status.Deaths]: {},\n  [Status.Recovered]: {},\n};\n\nexport async function getCountries(): Promise<CountriesByName> {\n  const urls: string[] = [\n    \"https://corona.lmao.ninja/countries\",\n    \"https://corona.lmao.ninja/v2/historical?lastdays=all\",\n  ];\n  const response = await Promise.all(\n    urls.map(async (url: string) => {\n      const response = await fetch(url);\n      return response.json();\n    })\n  );\n\n  const countriesByName: CountriesByName = getCountriesByHistoricalName(\n    response[0]\n  );\n  const historicalCountriesWithProvincesByName: CountriesByName = getHistoricalCountriesWithProvincesByGlobalName(\n    response[1],\n    countriesByName\n  );\n  // Merge historical and current data\n  return Object.values(countriesByName).reduce(\n    (countries: CountriesByName, country: Country) => {\n      const historicalCountry =\n        historicalCountriesWithProvincesByName[country.country];\n      const timeline: Timeline = historicalCountry\n        ? historicalCountry.timeline\n        : defaultTimeline;\n\n      if (!Object.keys(timeline[Status.Comfirmed]).length) {\n        console.warn(\"countries without timeline\", country);\n      }\n\n      return {\n        ...countries,\n        [country.country]: {\n          ...country,\n          timeline: removeEmptyDays({\n            [Status.Active]: {\n              ...timeline[Status.Active],\n              ...country.timeline[Status.Active],\n            },\n            [Status.Comfirmed]: {\n              ...timeline[Status.Comfirmed],\n              ...country.timeline[Status.Comfirmed],\n            },\n            [Status.Deaths]: {\n              ...timeline[Status.Deaths],\n              ...country.timeline[Status.Deaths],\n            },\n            [Status.Recovered]: {\n              ...timeline[Status.Recovered],\n              ...country.timeline[Status.Recovered],\n            },\n          }),\n        },\n      };\n    },\n    {}\n  );\n}\n\n/**\n * Returns map of countrise by historical name\n * @param response\n */\nfunction getCountriesByHistoricalName(response: []): CountriesByName {\n  const date = moment.utc().format(SHORT_DATE_FORMAT);\n\n  return response.reduce((countriesByName: CountriesByName, value: any) => {\n    const country: Country = {\n      country: value.country,\n      province: null,\n      coordinates: {\n        latitude: value.countryInfo.lat,\n        longitude: value.countryInfo.long,\n      },\n      timeline: {\n        [Status.Active]: {\n          [date]: value.cases - value.deaths - value.recovered,\n        },\n        [Status.Comfirmed]: {\n          [date]: value.cases,\n        },\n        [Status.Deaths]: {\n          [date]: value.deaths,\n        },\n        [Status.Recovered]: {\n          [date]: value.recovered,\n        },\n      },\n      updated: value.updated,\n    };\n\n    return {\n      ...countriesByName,\n      [convertGlobalNameToHistorical(country.country)]: country,\n    };\n  }, {});\n}\n\n/**\n * Returns map of historical countries and provinces by global name\n * @param response\n * @param countriesByName\n */\nfunction getHistoricalCountriesWithProvincesByGlobalName(\n  response: [],\n  countriesByName: CountriesByName\n): CountriesByName {\n  return response.reduce((prev: CountriesByName, curr: any) => {\n    const country: Country = {\n      country:\n        countriesByName[curr.country]?.country ||\n        convertHistoricalNameToGlobal(curr.country),\n      province:\n        countriesByName[curr.province]?.country ||\n        convertHistoricalNameToGlobal(curr.province),\n      coordinates: {\n        latitude: 0,\n        longitude: 0,\n      },\n      timeline: {\n        [Status.Active]: Object.keys(curr.timeline.cases).reduce(\n          (prevDates: TimelineDates, date: string) => {\n            const active: number =\n              curr.timeline.cases[date] -\n              curr.timeline.deaths[date] -\n              curr.timeline.recovered[date];\n\n            prevDates[date] = active;\n\n            return prevDates;\n          },\n          {}\n        ),\n        [Status.Comfirmed]: curr.timeline.cases,\n        [Status.Deaths]: curr.timeline.deaths,\n        [Status.Recovered]: curr.timeline.recovered,\n      },\n    };\n    const shouldSummarizeProvinces: boolean = [\n      \"Australia\",\n      \"China\",\n      \"Canada\",\n    ].includes(country.country);\n\n    if (!prev[country.country]) {\n      if (!country.province || shouldSummarizeProvinces) {\n        prev[country.country] = {\n          ...country,\n          province: null,\n          timeline: country.province ? defaultTimeline : country.timeline,\n        };\n      }\n    }\n\n    if (country.province) {\n      prev[country.province] = country;\n    }\n\n    if (prev[country.country] && country.province) {\n      if (shouldSummarizeProvinces) {\n        prev[country.country].timeline = sumTimelines(\n          prev[country.country].timeline,\n          country.timeline\n        );\n      }\n    }\n\n    return prev;\n  }, {});\n}\n\n/**\n * Returns Timeline without empty days to optimize store size\n * @param timeline\n */\nfunction removeEmptyDays(timeline: Timeline): Timeline {\n  const statuses = Object.keys(timeline) as Status[];\n\n  return statuses.reduce((statuses: Timeline, status: Status) => {\n    return {\n      ...statuses,\n      [status]: Object.keys(timeline[status]).reduce(\n        (dates: TimelineDates, date: string) => {\n          if (timeline[status][date]) {\n            dates[date] = timeline[status][date];\n          }\n\n          return dates;\n        },\n        {}\n      ),\n    };\n  }, defaultTimeline);\n}\n\n/**\n * Returns summarized timelines\n * @param timeline1\n * @param timeline2\n */\nfunction sumTimelines(timeline1: Timeline, timeline2: Timeline) {\n  const statuses = Object.keys(timeline1) as Status[];\n\n  return statuses.reduce((timeline: Timeline, status: Status) => {\n    const timelineDates1 = Object.keys(timeline1[status]);\n    const timelineDates2 = Object.keys(timeline2[status]);\n    const dates = timelineDates1.length ? timelineDates1 : timelineDates2;\n\n    return {\n      ...timeline,\n      [status]: dates.reduce((dates, date: string) => {\n        return {\n          ...dates,\n          [date]:\n            (timeline1[status][date] || 0) + (timeline2[status][date] || 0),\n        };\n      }, {}),\n    };\n  }, defaultTimeline);\n}\n\nconst globalToHistoricalNames: { [name: string]: string } = {\n  \"Côte d'Ivoire\": \"Cote d'Ivoire\",\n  Palestine: \"West Bank and Gaza\",\n  \"Lao People's Democratic Republic\": 'Lao People\"s Democratic Republic',\n  Myanmar: \"Burma\",\n  \"Holy See (Vatican City State)\": \"Holy See\",\n  Réunion: \"Reunion\",\n  Macao: \"macau\",\n  \"Saint Martin\": \"st martin\",\n  \"St. Barth\": \"saint barthelemy\",\n  \"Saint Pierre Miquelon\": \"saint pierre and miquelon\",\n  Curaçao: \"curacao\",\n  \"Caribbean Netherlands\": \"bonaire, sint eustatius and saba\",\n};\n\nfunction convertGlobalNameToHistorical(name: string) {\n  return (globalToHistoricalNames[name] || name).toLowerCase();\n}\n\nfunction convertHistoricalNameToGlobal(name: string) {\n  const historicalToGlobalNames: {\n    [name: string]: string;\n  } = Object.keys(globalToHistoricalNames).reduce(\n    (prev, key) => ({ ...prev, [globalToHistoricalNames[key]]: key }),\n    {}\n  );\n\n  return historicalToGlobalNames[name] || name;\n}\n","export const SHORT_DATE_FORMAT = \"M/D/YY\";\n","import { Moment } from \"moment\";\nimport _ from \"lodash\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport {\n  createSlice,\n  createAsyncThunk,\n  createSelector,\n  PayloadAction,\n  SerializedError,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport {\n  Country,\n  TotalByCountry,\n  CountriesByName,\n  Status,\n} from \"./countriesTypes\";\nimport * as CoronaAPI from \"../../api/corona\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport {\n  selectSortBy,\n  selectSortDirection,\n  selectMomentTimelineDate,\n} from \"../sideBar/sideBarSlice\";\nimport { Nullable } from \"../../genericTypes\";\n\n// Async actions\n\nexport const fetchCountries = createAsyncThunk(\n  \"countries/fetchCountries\",\n  async () => await CoronaAPI.getCountries()\n);\n\n// Slice\n\ninterface CountriesState {\n  loading: \"idle\" | \"pending\" | \"succeeded\" | \"failed\";\n  countriesByName: CountriesByName;\n  error: Nullable<SerializedError>;\n}\n\nconst initialState: CountriesState = {\n  loading: \"idle\",\n  countriesByName: {},\n  error: null,\n};\n\nexport const countriesSlice = createSlice({\n  name: \"countries\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCountries.pending, (state) => {\n        if (state.loading === \"idle\") {\n          state.loading = \"pending\";\n        }\n      })\n      .addCase(\n        fetchCountries.fulfilled,\n        (state, action: PayloadAction<CountriesByName>) => {\n          if (state.loading === \"pending\") {\n            state.loading = \"idle\";\n          }\n\n          state.countriesByName = action.payload;\n        }\n      )\n      .addCase(fetchCountries.rejected, (state, action) => {\n        state.error = action.error;\n      });\n  },\n});\n\n// Selectors\n\nexport const selectCountriesByName = (state: RootState) =>\n  state.countries.countriesByName;\n\nexport const selectCountries = createSelector(\n  [selectCountriesByName],\n  (countriesByName: CountriesByName) => Object.values(countriesByName)\n);\n\nexport const selectCountriesByTimelineDate = createSelector(\n  [selectCountries, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.filter((country: Country) => {\n      return (\n        country.timeline.active[date] ||\n        country.timeline.confirmed[date] ||\n        country.timeline.deaths[date] ||\n        country.timeline.recovered[date]\n      );\n    });\n  }\n);\n\nexport const selectSortedCountriesByTimelineDate = createSelector(\n  [\n    selectCountriesByTimelineDate,\n    selectMomentTimelineDate,\n    selectSortBy,\n    selectSortDirection,\n  ],\n  (\n    countries: Country[],\n    timelineDate: Moment,\n    sortBy: string,\n    sortDirection: SortDirectionType\n  ) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n    const isSortByStatus = Object.values(Status as any).includes(sortBy);\n\n    return _.orderBy(\n      countries,\n      (country: Country) => {\n        if (isSortByStatus) {\n          return country.timeline[sortBy as Status][date] || 0;\n        }\n\n        return country[sortBy as keyof Country];\n      },\n      sortDirection === SortDirection.ASC ? \"asc\" : \"desc\"\n    ).map((country, index) => ({ ...country, index: index + 1 }));\n  }\n);\n\nexport const selectSumDataByTimelineDate = createSelector(\n  [selectCountriesByTimelineDate, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const defaultValues: TotalByCountry = {\n      active: 0,\n      confirmed: 0,\n      deaths: 0,\n      recovered: 0,\n    };\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.reduce((total: TotalByCountry, country: Country) => {\n      return {\n        active: total.active + (country.timeline.active[date] || 0),\n        confirmed: total.confirmed + (country.timeline.confirmed[date] || 0),\n        deaths: total.deaths + (country.timeline.deaths[date] || 0),\n        recovered: total.recovered + (country.timeline.recovered[date] || 0),\n      };\n    }, defaultValues);\n  }\n);\n\nexport const selectlCountriesByTimelineFC = createSelector(\n  [selectCountriesByTimelineDate],\n  (countries: Country[]) => {\n    const featuerCollection: GeoJSON.FeatureCollection<\n      GeoJSON.Point,\n      Country\n    > = {\n      type: \"FeatureCollection\",\n      features: countries.map((country) => {\n        const feature: GeoJSON.Feature<GeoJSON.Point, Country> = {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              country.coordinates.longitude,\n              country.coordinates.latitude,\n            ],\n          },\n          properties: country,\n        };\n\n        return feature;\n      }),\n    };\n\n    return featuerCollection;\n  }\n);\n\nexport default countriesSlice.reducer;\n","import React, { useState, useRef, memo, useEffect, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport MapGL, {\n  Source,\n  Layer,\n  InteractiveMap,\n  FlyToInterpolator,\n  InteractiveMapProps,\n} from \"react-map-gl\";\nimport { Feature } from \"geojson\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport {\n  getInOurPais,\n  getTimelineExpression,\n  COLORS_BY_FILTER_TYPE,\n} from \"./mapUtils\";\nimport { selectViewPort } from \"./mapSlice\";\nimport {\n  selectMomentTimelineDate,\n  selectFilterBy,\n} from \"../sideBar/sideBarSlice\";\nimport {\n  selectlCountriesByTimelineFC,\n  selectCountriesByName,\n} from \"../countries/countriesSlice\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { Status, Country, CountriesByName } from \"../countries/countriesTypes\";\nimport { Nullable } from \"../../genericTypes\";\n\nimport styles from \"./Map.module.css\";\n\nfunction Map() {\n  const mapRef = useRef<InteractiveMap>(null);\n  const initialViewport = useSelector(selectViewPort);\n  const [viewport, setViewport] = useState<Partial<InteractiveMapProps>>(\n    initialViewport\n  );\n  const [hoveredCountry, setHoveredCountry] = useState<{\n    country: Nullable<Country>;\n    offsetX: number;\n    offsetY: number;\n  }>({\n    country: null,\n    offsetX: 0,\n    offsetY: 0,\n  });\n  const countriesByName: CountriesByName = useSelector(selectCountriesByName);\n  const featureCollection = useSelector(selectlCountriesByTimelineFC);\n  const filterBy: Status = useSelector(selectFilterBy);\n  const date: string = useSelector(selectMomentTimelineDate).format(\n    SHORT_DATE_FORMAT\n  );\n  const hasCasesExpression = getTimelineExpression(\"has\", date, filterBy);\n  const getCasesExpression = getTimelineExpression(\"get\", date, filterBy);\n  const onHover = useCallback(\n    ({ features = [], srcEvent: { offsetX, offsetY } }) => {\n      const feature: Feature = features.find((f: any) =>\n        [\"label\", \"point\"].includes(f.layer.id)\n      );\n\n      if (feature && feature.properties && feature.properties.country) {\n        if (hoveredCountry.country !== feature.properties.country) {\n          return setHoveredCountry({\n            offsetX,\n            offsetY,\n            country: countriesByName[feature.properties.country],\n          });\n        }\n      } else {\n        if (hoveredCountry.country) {\n          return setHoveredCountry({\n            offsetX: 0,\n            offsetY: 0,\n            country: null,\n          });\n        }\n      }\n    },\n    [countriesByName, hoveredCountry]\n  );\n\n  useEffect(() => {\n    // fly to the new position\n    setViewport({\n      ...initialViewport,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: \"auto\",\n    });\n  }, [initialViewport]);\n\n  return (\n    <div className={styles.mapContainer}>\n      <MapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100vh\"\n        mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n        mapboxApiAccessToken=\"pk.eyJ1IjoiZGVtcGtoIiwiYSI6ImNrOGZwanFuazAxdnozbG4yNm1tOHVuYzkifQ.fRJrCsndLJ4yM-jlPaAG9Q\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        onHover={onHover}\n      >\n        <Source id=\"data\" type=\"geojson\" data={featureCollection}>\n          <Layer\n            id=\"point\"\n            type=\"circle\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"circle-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                getCasesExpression,\n                ...getInOurPais(),\n              ],\n              \"circle-color\": COLORS_BY_FILTER_TYPE[filterBy],\n              \"circle-opacity\": 0.4,\n              \"circle-stroke-width\": 1,\n              \"circle-stroke-color\": COLORS_BY_FILTER_TYPE[filterBy],\n            }}\n          />\n          <Layer\n            id=\"label\"\n            type=\"symbol\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"text-color\": \"#EBEBEB\",\n            }}\n            layout={{\n              \"text-field\": getCasesExpression,\n              \"text-font\": [\"DIN Offc Pro Medium\", \"Arial Unicode MS Bold\"],\n              \"text-size\": 12,\n            }}\n          />\n        </Source>\n        {hoveredCountry.country ? (\n          <div\n            className={styles.tooltip}\n            style={{\n              top: hoveredCountry.offsetY,\n              left: hoveredCountry.offsetX,\n            }}\n          >\n            <b>{hoveredCountry.country.country}</b>\n            <div>\n              <span>Confirmed:</span>\n              <span style={{ color: COLORS_BY_FILTER_TYPE[Status.Comfirmed] }}>\n                {hoveredCountry.country.timeline[Status.Comfirmed][\n                  date\n                ]?.toLocaleString() || 0}\n              </span>\n            </div>\n            <div>\n              <span>Deaths:</span>\n              <span style={{ color: COLORS_BY_FILTER_TYPE[Status.Deaths] }}>\n                {hoveredCountry.country.timeline[Status.Deaths][\n                  date\n                ]?.toLocaleString() || 0}\n              </span>\n            </div>\n            <div>\n              <span>Recovered:</span>\n              <span style={{ color: COLORS_BY_FILTER_TYPE[Status.Recovered] }}>\n                {hoveredCountry.country.timeline[Status.Recovered][\n                  date\n                ]?.toLocaleString() || 0}\n              </span>\n            </div>\n            <div>\n              <span>Active:</span>\n              <span style={{ color: COLORS_BY_FILTER_TYPE[Status.Active] }}>\n                {hoveredCountry.country.timeline[Status.Active][\n                  date\n                ]?.toLocaleString() || 0}\n              </span>\n            </div>\n          </div>\n        ) : null}\n      </MapGL>\n    </div>\n  );\n}\n\nexport default memo(Map);\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport styles from \"./SideBar.module.css\";\n\ninterface HeaderOption {\n  label: string;\n  quantity: number;\n  activeColor: string;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function HeaderOption({\n  label,\n  quantity,\n  activeColor,\n  isActive,\n  onClick,\n}: HeaderOption) {\n  return (\n    <div\n      className={clsx(styles.headerStat, isActive && styles.headerStatActive)}\n      style={isActive ? { color: activeColor } : {}}\n      onClick={onClick}\n    >\n      <div className={styles.headerStatLabel}>{label}</div>\n      <div className={styles.headerStatTotalQuantity}>\n        {quantity.toLocaleString()}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableHeaderProps, SortIndicator } from \"react-virtualized\";\n\nimport styles from \"./CountriesTable.module.css\";\n\nexport function headerRenderer({\n  dataKey,\n  label,\n  sortBy,\n  sortDirection,\n}: TableHeaderProps): React.ReactNode {\n  return (\n    <div key={dataKey} className={styles.headerCol}>\n      <span>{label}</span>\n      <span>\n        {sortBy === dataKey && <SortIndicator sortDirection={sortDirection} />}\n      </span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AutoSizer, Table, Column, SortDirectionType } from \"react-virtualized\";\nimport { selectSortedCountriesByTimelineDate } from \"../countries/countriesSlice\";\nimport {\n  selectSortBy,\n  selectSortDirection,\n  sort,\n  selectMomentTimelineDate,\n} from \"../sideBar/sideBarSlice\";\nimport { headerRenderer } from \"./CountriesTableHeader\";\nimport styles from \"./CountriesTable.module.css\";\nimport { Country, Status } from \"../countries/countriesTypes\";\nimport { setViewport } from \"../map/mapSlice\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\n\nexport function CountriesTable() {\n  const dispatch = useDispatch();\n  const countries: Country[] = useSelector(selectSortedCountriesByTimelineDate);\n  const date: string = useSelector(selectMomentTimelineDate).format(\n    SHORT_DATE_FORMAT\n  );\n  const sortBy: string = useSelector(selectSortBy);\n  const sortDirection: SortDirectionType = useSelector(selectSortDirection);\n\n  return (\n    <div className={styles.tableContainer}>\n      <AutoSizer>\n        {({ width, height }) => {\n          const indexWidth: number = 50;\n          const colWidth = ((width - indexWidth) / 100) * 17.5;\n          const countryWidth = ((width - indexWidth) / 100) * 30;\n\n          return (\n            <Table\n              width={width}\n              height={height}\n              headerHeight={40}\n              rowHeight={50}\n              rowCount={countries.length}\n              rowClassName={rowClassName}\n              rowGetter={({ index }) => countries[index]}\n              onRowClick={({ rowData }: { rowData: Country }) =>\n                dispatch(\n                  setViewport({\n                    longitude: rowData.coordinates.longitude,\n                    latitude: rowData.coordinates.latitude,\n                    zoom: 6,\n                  })\n                )\n              }\n              sort={({ sortBy, sortDirection }) =>\n                dispatch(sort({ sortBy, sortDirection }))\n              }\n              sortBy={sortBy}\n              sortDirection={sortDirection}\n            >\n              <Column\n                label=\"#\"\n                dataKey=\"index\"\n                disableSort\n                width={indexWidth}\n                headerRenderer={headerRenderer}\n              />\n              <Column\n                width={countryWidth}\n                label=\"Country\"\n                dataKey=\"country\"\n                defaultSortDirection=\"ASC\"\n                headerRenderer={headerRenderer}\n              />\n              <Column\n                label=\"Confirmed\"\n                dataKey={Status.Comfirmed}\n                defaultSortDirection=\"DESC\"\n                width={colWidth}\n                headerRenderer={headerRenderer}\n                cellDataGetter={({ dataKey, rowData }) =>\n                  rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                }\n              />\n              <Column\n                label=\"Recovered\"\n                dataKey={Status.Recovered}\n                defaultSortDirection=\"DESC\"\n                width={colWidth}\n                headerRenderer={headerRenderer}\n                cellDataGetter={({ dataKey, rowData }) =>\n                  rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                }\n              />\n              <Column\n                label=\"Deaths\"\n                dataKey={Status.Deaths}\n                defaultSortDirection=\"DESC\"\n                width={colWidth}\n                headerRenderer={headerRenderer}\n                cellDataGetter={({ dataKey, rowData }) =>\n                  rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                }\n              />\n              <Column\n                label=\"Active\"\n                dataKey={Status.Active}\n                defaultSortDirection=\"DESC\"\n                width={colWidth}\n                headerRenderer={headerRenderer}\n                cellDataGetter={({ dataKey, rowData }) =>\n                  rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                }\n              />\n            </Table>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n}\n\nfunction rowClassName({ index }: { index: number }): string {\n  if (index >= 0) {\n    return index % 2 ? styles.evenRow : styles.oddRow;\n  }\n\n  return styles.headerRow;\n}\n","import React, { memo, useCallback } from \"react\";\nimport moment, { Moment } from \"moment\";\nimport \"./TimelinePanel.css\";\n\ninterface TimelinePanelProps {\n  date?: Moment;\n  onChange: (date: Moment) => void;\n  minDate?: Moment;\n  maxDate?: Moment;\n}\n\nfunction TimelinePanel({\n  date = moment(),\n  onChange,\n  minDate,\n  maxDate,\n}: TimelinePanelProps) {\n  const updateValue = useCallback(\n    (e) => {\n      const newDate = date.clone().dayOfYear(+e.currentTarget.value);\n      return onChange(newDate);\n    },\n    [date, onChange]\n  );\n\n  return (\n    <div className=\"timeline-panel\">\n      <label>{date.format(\"LL\")}</label>\n      <input\n        className=\"range\"\n        type=\"range\"\n        value={date.dayOfYear()}\n        step={1}\n        min={minDate?.dayOfYear()}\n        max={maxDate?.dayOfYear()}\n        onChange={updateValue}\n      />\n    </div>\n  );\n}\n\nexport default memo(TimelinePanel);\n","import React from \"react\";\nimport moment, { Moment } from \"moment\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeaderOption } from \"./HeaderOption\";\nimport { CountriesTable } from \"../countriesTable/CountriesTable\";\nimport { selectSumDataByTimelineDate } from \"../countries/countriesSlice\";\nimport {\n  selectMomentTimelineDate,\n  setTimelineDate,\n  setFilterType,\n  selectFilterBy,\n} from \"./sideBarSlice\";\nimport TimelinePanel from \"./TimelinePanel\";\nimport { COLORS_BY_FILTER_TYPE } from \"../map/mapUtils\";\nimport { Status } from \"../countries/countriesTypes\";\n\nimport styles from \"./SideBar.module.css\";\n\nexport function SideBar() {\n  const dispatch = useDispatch();\n  const date: Moment = useSelector(selectMomentTimelineDate);\n  const filterBy: Status = useSelector(selectFilterBy);\n  const sumData = useSelector(selectSumDataByTimelineDate);\n\n  return (\n    <div className={styles.sideBar}>\n      <div className={styles.header}>\n        <HeaderOption\n          label=\"Confirmed\"\n          quantity={sumData.confirmed}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Comfirmed}\n          onClick={() => dispatch(setFilterType(Status.Comfirmed))}\n        />\n        <HeaderOption\n          label=\"Recovered\"\n          quantity={sumData.recovered}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Recovered}\n          onClick={() => dispatch(setFilterType(Status.Recovered))}\n        />\n        <HeaderOption\n          label=\"Deaths\"\n          quantity={sumData.deaths}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Deaths}\n          onClick={() => dispatch(setFilterType(Status.Deaths))}\n        />\n        <HeaderOption\n          label=\"Active\"\n          quantity={sumData.active}\n          activeColor={COLORS_BY_FILTER_TYPE[filterBy]}\n          isActive={filterBy === Status.Active}\n          onClick={() => dispatch(setFilterType(Status.Active))}\n        />\n      </div>\n      <div className={styles.body}>\n        <TimelinePanel\n          date={moment(date)}\n          onChange={(date) => dispatch(setTimelineDate(date.format()))}\n          minDate={moment(\"2020-01-22T00:00:00\")}\n          maxDate={moment()}\n        />\n        <CountriesTable />\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Map from \"../features/map/Map\";\nimport { useDispatch } from \"react-redux\";\nimport { SideBar } from \"../features/sideBar/SideBar\";\nimport { fetchCountries } from \"../features/countries/countriesSlice\";\nimport \"./App.css\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCountries());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <SideBar />\n      <Map />\n      {/* <MapBox /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  getDefaultMiddleware,\n} from \"@reduxjs/toolkit\";\nimport countries from \"../features/countries/countriesSlice\";\nimport map from \"../features/map/mapSlice\";\nimport sideBar from \"../features/sideBar/sideBarSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    countries,\n    map,\n    sideBar,\n  },\n  middleware: getDefaultMiddleware(),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBar\":\"SideBar_sideBar__3wXsx\",\"header\":\"SideBar_header__1g25-\",\"headerStat\":\"SideBar_headerStat__3YXJj\",\"headerStatLabel\":\"SideBar_headerStatLabel__4KGyw\",\"headerStatTotalQuantity\":\"SideBar_headerStatTotalQuantity__hZtn3\",\"body\":\"SideBar_body__GaFHr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"CountriesTable_tableContainer__HsFmS\",\"headerCol\":\"CountriesTable_headerCol__2UGwN\",\"headerRow\":\"CountriesTable_headerRow__9aWhl\",\"evenRow\":\"CountriesTable_evenRow__24xvc\",\"oddRow\":\"CountriesTable_oddRow__3SP1f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapContainer\":\"Map_mapContainer__dIyOX\",\"tooltip\":\"Map_tooltip__2ttIR\"};"],"sourceRoot":""}