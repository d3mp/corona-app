{"version":3,"sources":["components/tooltip/Tooltip.module.scss","features/map/Map.module.css","common/theme/ThemeContext.tsx","common/theme/themeUtils.ts","features/countries/countriesTypes.ts","features/countries/countriesUtils.ts","common/constants/global.ts","api/corona.ts","features/sideBar/sideBarSlice.ts","features/countries/countriesSlice.ts","components/themeSwitch/ThemeSwitch.tsx","features/map/mapUtils.ts","components/tooltip/TooltipRow.tsx","components/tooltip/Tooltip.tsx","features/map/mapSlice.ts","features/map/Map.tsx","components/searchBar/SearchBar.tsx","components/timelinePanel/TimelinePanel.tsx","features/countriesTable/CountriesTableHeader.tsx","features/countriesTable/CountriesTable.tsx","common/hooks/usePrevious.ts","features/sideBar/SideBarTotalCount.tsx","features/sideBar/SideBar.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/countriesTable/CountriesTable.module.scss","features/sideBar/SideBar.module.css","components/themeSwitch/ThemeSwitch.module.css","components/searchBar/SearchBar.module.scss"],"names":["module","exports","Theme","ThemeContext","React","createContext","theme","switchTheme","ThemeContextProvider","children","defaultTheme","localStorage","getItem","window","matchMedia","matches","Dark","Light","useState","useLayoutEffect","prevTheme","root","document","getElementsByTagName","className","includes","replace","split","concat","join","setItem","Provider","value","Status","defaultTimeline","Active","Confirmed","Deaths","Recovered","mergeCountriesWithHistoricalData","response","countriesByName","reduce","name","date","moment","utc","updated","format","country","province","coordinates","latitude","countryInfo","lat","longitude","long","timeline","cases","deaths","recovered","globalToHistoricalNames","toLowerCase","getCountriesByHistoricalName","historicalCountriesWithProvincesByName","prev","curr","timeline1","timeline2","convertHistoricalNameToGlobal","Object","keys","prevDates","active","shouldSummarizeProvinces","status","timelineDates1","timelineDates2","dates","length","getHistoricalCountriesWithProvincesByGlobalName","values","countries","historicalCountry","console","warn","removeEmptyDays","statuses","Palestine","Myanmar","Réunion","Macao","Curaçao","key","API_URL","COUNTRIES_URL","HISTORICAL_URL","getCountries","a","urls","Promise","all","map","url","fetch","json","initialState","filterBy","favorite","searchValue","sortBy","sortDirection","SortDirection","DESC","timelineDate","isTableVisibleOnMobile","sideBarSlice","createSlice","reducers","setFilterBy","state","action","payload","setTimelineDate","setSearchValue","sort","toggleTableVisibility","selectSortBy","sideBar","selectSortDirection","selectFilterBy","selectIsTableVisibleOnMobile","selectMomentTimelineDate","createSelector","actions","fetchCountries","createAsyncThunk","CoronaAPI","countriesSlice","loading","favoriteCountries","error","toggleFavorite","updateFavoriteCountries","extraReducers","builder","addCase","pending","fulfilled","rejected","selectCountriesByName","selectFavoriteCountries","selectCountries","selectFilteredCountries","filter","match","RegExp","selectFilteredWithTimelineCountries","confirmed","selectFilteredAndOrderedCountries","isSortByStatus","_","orderBy","ASC","index","selectFilteredSumData","total","selectlFilteredCountriesFC","type","features","geometry","properties","selectFilteredStartTimelineDate","startDate","confirmedKeys","minDate","isAfter","ThemeSwitch","useContext","styles","themeSwitch","checked","onChange","clsx","icon","iconDark","aria-label","role","COLORS_BY_FILTER_TYPE","getInOurPais","max","steps","step","push","getTimelineExpression","operator","TooltipRow","label","perDay","data-testid","style","color","toLocaleString","isNaN","Tooltip","hoveredCountry","currentDate","prevDate","clone","subtract","tooltipRows","tooltip","top","offsetY","left","offsetX","mapSlice","viewport","zoom","setViewport","selectViewPort","memo","mapRef","useRef","initialViewport","useSelector","setHoveredCountry","featureCollection","currentMoment","hasCasesExpression","getCasesExpression","onHover","useCallback","srcEvent","feature","find","f","layer","id","useEffect","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","mapContainer","ref","width","height","mapStyle","mapboxApiAccessToken","onViewportChange","nextViewport","data","paint","layout","SearchBar","_onChange","e","target","searchBar","placeholder","SearchOutlined","searchIcon","maxDate","updateValue","newDate","dayOfYear","currentTarget","htmlFor","min","headerRenderer","dataKey","headerCol","CountriesTable","dispatch","useDispatch","favCountries","prevFavCountries","current","usePrevious","favoriteCountriesJson","JSON","parse","ex","isEqual","stringify","container","hiddenContainer","widthWithoutIndexAndFav","colWidth","countryWidth","headerHeight","rowHeight","rowCount","rowClassName","rowGetter","onRowClick","rowData","disableSort","countryCol","defaultSortDirection","column","cellDataGetter","StarIcon","Star","StarBorder","favoriteIcon","onClick","stopPropagation","cellRenderer","toggleTable","evenRow","oddRow","headerRow","SideBarTotalCount","quantity","activeColor","isActive","totalCount","totalCountActive","totalCountLabel","totalCountTotalQuantity","SideBar","sumData","totals","open","header","App","storeConfig","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","store","configureStore","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,aAAe,4B,oJCGrBC,E,2DAAAA,K,cAAAA,E,aAAAA,M,KAUL,IAAMC,EAAeC,IAAMC,cAA4B,CAC5DC,MAAO,KACPC,YAAa,SAACD,OAOT,SAASE,EAAT,GAAwE,IAAxCC,EAAuC,EAAvCA,SAC/BC,EACHC,aAAaC,QAAQ,WCtBjBC,OAAOC,YACZD,OAAOC,WAAW,gCAAgCC,QAChDb,EAAMc,KACNd,EAAMe,ODiBkE,EAG/CC,mBAASR,GAHsC,mBAGrEJ,EAHqE,KAG9DC,EAH8D,KAiB5E,OAZAY,2BAAgB,WACd,IAAMC,EAAoBd,IAAUJ,EAAMc,KAAOd,EAAMe,MAAQf,EAAMc,KAC/DK,EAAOC,SAASC,qBAAqB,QAAQ,GACnDF,EAAKG,UAAYH,EAAKG,UAAUC,SAASnB,GACrCe,EAAKG,UACLH,EAAKG,UAAUC,SAASL,GACxBC,EAAKG,UAAUE,QAAQN,EAAWd,GAClCe,EAAKG,UAAUG,MAAM,KAAKC,OAAOtB,GAAOuB,KAAK,KAEjDlB,aAAamB,QAAQ,QAASxB,KAC7B,CAACA,IAGF,kBAACH,EAAa4B,SAAd,CAAuBC,MAAO,CAAE1B,QAAOC,gBACpCE,G,IExCKwB,E,wIAAAA,K,gBAAAA,E,sBAAAA,E,gBAAAA,E,uBAAAA,M,KCQZ,IAAMC,GAAyB,mBAC5BD,EAAOE,OAAS,IADY,cAE5BF,EAAOG,UAAY,IAFS,cAG5BH,EAAOI,OAAS,IAHY,cAI5BJ,EAAOK,UAAY,IAJS,GAWxB,SAASC,EACdC,GAEA,IAAMC,EAqDR,SAAsCD,GACpC,OAAOA,EAASE,QAAO,SAACD,EAAkCT,GAAgB,IAAD,EA2KpCW,EA1K7BC,EAAOC,IAAOC,IAAId,EAAMe,SAASC,OC/EV,UDgFvBC,EAAmB,CACvBA,QAASjB,EAAMiB,QACfC,SAAU,KACVC,YAAa,CACXC,SAAUpB,EAAMqB,YAAYC,IAC5BC,UAAWvB,EAAMqB,YAAYG,MAE/BC,UAAQ,mBACLxB,EAAOE,OADF,eAEHS,EAAOZ,EAAM0B,MAAQ1B,EAAM2B,OAAS3B,EAAM4B,YAFvC,cAIL3B,EAAOG,UAJF,eAKHQ,EAAOZ,EAAM0B,QALV,cAOLzB,EAAOI,OAPF,eAQHO,EAAOZ,EAAM2B,SARV,cAUL1B,EAAOK,UAVF,eAWHM,EAAOZ,EAAM4B,YAXV,GAcRb,QAASf,EAAMe,SAGjB,OAAO,eACFN,EADL,gBAkJMoB,EAD6BlB,EA/IFM,EAAQA,UAgJFN,GAAMmB,cAhJOb,MAEnD,IApFsCc,CACvCvB,EAAS,IAELwB,EAyFR,SACExB,EACAC,GAEA,OAAOD,EAASE,QAAO,SAACuB,EAAuBC,GAAe,IAAD,MA6FzCC,EAAqBC,EA5FjCnB,EAAmB,CACvBA,SACE,UAAAR,EAAgByB,EAAKjB,gBAArB,eAA+BA,UAC/BoB,EAA8BH,EAAKjB,SACrCC,UACE,UAAAT,EAAgByB,EAAKhB,iBAArB,eAAgCD,UAChCoB,EAA8BH,EAAKhB,UACrCC,YAAa,CACXC,SAAU,EACVG,UAAW,GAEbE,UAAQ,mBACLxB,EAAOE,OAASmC,OAAOC,KAAKL,EAAKT,SAASC,OAAOhB,QAChD,SAAC8B,EAA0B5B,GACzB,IAAM6B,EACJP,EAAKT,SAASC,MAAMd,GACpBsB,EAAKT,SAASE,OAAOf,GACrBsB,EAAKT,SAASG,UAAUhB,GAI1B,OAFA4B,EAAU5B,GAAQ6B,EAEXD,IAET,KAZI,cAcLvC,EAAOG,UAAY8B,EAAKT,SAASC,OAd5B,cAeLzB,EAAOI,OAAS6B,EAAKT,SAASE,QAfzB,cAgBL1B,EAAOK,UAAY4B,EAAKT,SAASG,WAhB5B,IAmBJc,EAAoC,CACxC,YACA,QACA,UACAjD,SAASwB,EAAQA,SAyBnB,OAvBKgB,EAAKhB,EAAQA,UACXA,EAAQC,WAAYwB,IACvBT,EAAKhB,EAAQA,SAAb,eACKA,EADL,CAEEC,SAAU,KACVO,SAAUR,EAAQC,SAAWhB,EAAkBe,EAAQQ,YAKzDR,EAAQC,WACVe,EAAKhB,EAAQC,UAAYD,GAGvBgB,EAAKhB,EAAQA,UAAYA,EAAQC,UAC/BwB,IACFT,EAAKhB,EAAQA,SAASQ,UAwCRU,EAvCZF,EAAKhB,EAAQA,SAASQ,SAuCWW,EAtCjCnB,EAAQQ,SAuCCa,OAAOC,KAAKJ,GAEbzB,QAAO,SAACe,EAAoBkB,GAC1C,IAAMC,EAAiBN,OAAOC,KAAKJ,EAAUQ,IACvCE,EAAiBP,OAAOC,KAAKH,EAAUO,IACvCG,EAAQF,EAAeG,OAASH,EAAiBC,EAEvD,OAAO,eACFpB,EADL,eAEGkB,EAASG,EAAMpC,QAAO,SAACoC,EAAOlC,GAC7B,OAAO,eACFkC,EADL,eAEGlC,GACEuB,EAAUQ,GAAQ/B,IAAS,IAAMwB,EAAUO,GAAQ/B,IAAS,OAEhE,QAEJV,KAnDM+B,IACN,IA1J6De,CAC9DxC,EAAS,GACTC,GAGF,OAAO6B,OAAOW,OAAOxC,GAAiBC,QACpC,SAACwC,EAA4BjC,GAAsB,IAAD,EAC1CkC,EACJnB,EAAuCf,EAAQA,SAC3CQ,EAAqB0B,EACvBA,EAAkB1B,SAClBvB,EAMJ,OAJKoC,OAAOC,KAAKd,EAASxB,EAAOG,YAAY2C,QAC3CK,QAAQC,KAAK,6BAA8BpC,GAGtC,eACFiC,EADL,eAEGjC,EAAQA,QAFX,eAGOA,EAHP,CAIIQ,SAAU6B,GAAe,mBACtBrD,EAAOE,OADe,eAElBsB,EAASxB,EAAOE,QAFE,GAGlBc,EAAQQ,SAASxB,EAAOE,UAHN,cAKtBF,EAAOG,UALe,eAMlBqB,EAASxB,EAAOG,WANE,GAOlBa,EAAQQ,SAASxB,EAAOG,aAPN,cAStBH,EAAOI,OATe,eAUlBoB,EAASxB,EAAOI,QAVE,GAWlBY,EAAQQ,SAASxB,EAAOI,UAXN,cAatBJ,EAAOK,UAbe,eAclBmB,EAASxB,EAAOK,WAdE,GAelBW,EAAQQ,SAASxB,EAAOK,aAfN,UAqB/B,IAuHJ,SAASgD,EAAgB7B,GAGvB,OAFiBa,OAAOC,KAAKd,GAEbf,QAAO,SAAC6C,EAAoBZ,GAC1C,OAAO,eACFY,EADL,eAEGZ,EAASL,OAAOC,KAAKd,EAASkB,IAASjC,QACtC,SAACoC,EAAsBlC,GAKrB,OAJIa,EAASkB,GAAQ/B,KACnBkC,EAAMlC,GAAQa,EAASkB,GAAQ/B,IAG1BkC,IAET,QAGH5C,GA6BL,IAAM2B,EAAsD,CAC1D,mBAAiB,gBACjB2B,UAAW,qBACX,mCAAoC,mCACpCC,QAAS,QACT,gCAAiC,WACjCC,aAAS,UACTC,MAAO,QACP,eAAgB,YAChB,YAAa,mBACb,wBAAyB,4BACzBC,aAAS,UACT,wBAAyB,oCAO3B,SAASvB,EAA8B1B,GAQrC,OALI2B,OAAOC,KAAKV,GAAyBnB,QACvC,SAACuB,EAAM4B,GAAP,sBAAqB5B,EAArB,eAA4BJ,EAAwBgC,GAAOA,MAC3D,IAG6BlD,IAASA,EElQnC,IAAMmD,EAAU,4BACVC,EAAa,UAAMD,EAAN,iBACbE,EAAc,UAAMF,EAAN,+BAEpB,SAAeG,IAAtB,+B,4CAAO,8BAAAC,EAAA,6DACCC,EAAiB,CAACJ,EAAeC,GADlC,SAEyBI,QAAQC,IACpCF,EAAKG,IAAL,uCAAS,WAAOC,GAAP,eAAAL,EAAA,sEACgBM,MAAMD,GADtB,cACD/D,EADC,yBAEAA,EAASiE,QAFT,2CAAT,wDAHG,cAECjE,EAFD,yBASED,EAAiCC,IATnC,4C,sBCSP,IAAMkE,EAA6B,CACjCC,SAAU,CACRhC,OAAQ1C,EAAOG,UACfwE,UAAU,GAEZC,YAAa,GACbC,OAAQ7E,EAAOG,UACf2E,cAAeC,IAAcC,KAC7BC,aAAcrE,MAASG,SACvBmE,wBAAwB,GAGbC,EAAeC,YAAY,CACtC1E,KAAM,UACN+D,eACAY,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnBD,EAAMb,SAAWc,EAAOC,SAE1BC,gBAAiB,SAACH,EAAOC,GACvBD,EAAMN,aAAeO,EAAOC,SAE9BE,eAAgB,SAACJ,EAAOC,GACtBD,EAAMX,YAAcY,EAAOC,SAE7BG,KAAM,SACJL,EACAC,GAKAD,EAAMV,OAASW,EAAOC,QAAQZ,OAC9BU,EAAMT,cAAgBU,EAAOC,QAAQX,eAEvCe,sBAAuB,SAACN,GACtBA,EAAML,wBAA0BK,EAAML,2BAS/BY,EAAe,SAACP,GAAD,OAAsBA,EAAMQ,QAAQlB,QACnDmB,EAAsB,SAACT,GAAD,OACjCA,EAAMQ,QAAQjB,eAGHmB,EAAiB,SAACV,GAAD,OAAsBA,EAAMQ,QAAQrB,UACrDwB,EAA+B,SAACX,GAAD,OAC1CA,EAAMQ,QAAQb,wBAEHiB,EAA2BC,YACtC,CAPgC,SAACb,GAAD,OAChCA,EAAMQ,QAAQd,gBAOd,SAACA,GAAD,OAA0BrE,IAAOqE,M,EAS/BE,EAAakB,QALff,E,EAAAA,YACAI,E,EAAAA,gBACAC,E,EAAAA,eACAC,E,EAAAA,KACAC,E,EAAAA,sBAEaV,IAAf,QCnDamB,EAAiBC,YAC5B,2BAD4C,sBAE5C,sBAAAtC,EAAA,sEAAkBuC,IAAlB,oFAmBWC,GAAiBrB,YAAY,CACxC1E,KAAM,YACN+D,aATmC,CACnCiC,QAAS,OACTlG,gBAAiB,GACjBmG,kBAAmB,GACnBC,MAAO,MAMPvB,SAAU,CACRwB,eAAgB,SAACtB,EAAOC,GAClBD,EAAMoB,kBAAkBnB,EAAOC,gBAC1BF,EAAMoB,kBAAkBnB,EAAOC,SAEtCF,EAAMoB,kBAAkBnB,EAAOC,UAAW,GAG9CqB,wBAAyB,SACvBvB,EACAC,GAEAD,EAAMoB,kBAAoBnB,EAAOC,UAGrCsB,cAAe,SAACC,GACdA,EACGC,QAAQX,EAAeY,SAAS,SAAC3B,GACV,SAAlBA,EAAMmB,UACRnB,EAAMmB,QAAU,cAGnBO,QACCX,EAAea,WACf,SAAC5B,EAAOC,GACgB,YAAlBD,EAAMmB,UACRnB,EAAMmB,QAAU,QAGlBnB,EAAM/E,gBAAkBgF,EAAOC,WAGlCwB,QAAQX,EAAec,UAAU,SAAC7B,EAAOC,GACxCD,EAAMqB,MAAQpB,EAAOoB,YAOhBS,GAAwB,SAAC9B,GAAD,OACnCA,EAAMtC,UAAUzC,iBAEL8G,GAA0B,SAAC/B,GAAD,OACrCA,EAAMtC,UAAU0D,mBAELY,GAAkBnB,YAC7B,CAACiB,KACD,SAAC7G,GAAD,OAAsC6B,OAAOW,OAAOxC,MAGzCgH,GAA0BpB,YACrC,CAACmB,GDhD8B,SAAChC,GAAD,OAC/BA,EAAMQ,QAAQnB,aC+CuBqB,EAAgBqB,KACrD,SACErE,EACA2B,EACAF,EACAiC,GAEA,OAAO1D,EAAUwE,QAAO,SAACzG,GAEvB,QAAI4D,IAAgB5D,EAAQA,QAAQ0G,MAAM,IAAIC,OAAO/C,EAAa,UAK9DF,EAASC,WAAagC,EAAkB3F,EAAQA,gBAS7C4G,GAAsCxB,YACjD,CAACoB,GAAyBrB,IAC1B,SAAClD,EAAsBgC,GACrB,IAAMtE,EAAesE,EAAalE,OHrIL,UGuI7B,OAAOkC,EAAUwE,QAAO,SAACzG,GACvB,OACEA,EAAQQ,SAASgB,OAAO7B,IACxBK,EAAQQ,SAASqG,UAAUlH,IAC3BK,EAAQQ,SAASE,OAAOf,IACxBK,EAAQQ,SAASG,UAAUhB,SAMtBmH,GAAoC1B,YAC/C,CACEwB,GACAzB,EACAL,EACAE,IAEF,SACE/C,EACAgC,EACAJ,EACAC,GAEA,IAAMnE,EAAesE,EAAalE,OH/JL,UGgKvBgH,EAAiB1F,OAAOW,OAAOhD,GAAeR,SAASqF,GAE7D,OAAOmD,IAAEC,QACPhF,GACA,SAACjC,GACC,OAAI+G,EACK/G,EAAQQ,SAASqD,GAAkBlE,IAAS,EAG9CK,EAAQ6D,KAEjBC,IAAkBC,IAAcmD,IAAM,MAAQ,QAC9C7D,KAAI,SAACrD,EAASmH,GAAV,sBAA0BnH,EAA1B,CAAmCmH,MAAOA,EAAQ,UAI/CC,GAAwBhC,YACnC,CAACwB,GAAqCzB,IACtC,SAAClD,EAAsBgC,GACrB,IAMMtE,EAAesE,EAAalE,OHzLL,UG2L7B,OAAOkC,EAAUxC,QAAO,SAAC4H,EAAuBrH,GAC9C,MAAO,CACLwB,OAAQ6F,EAAM7F,QAAUxB,EAAQQ,SAASgB,OAAO7B,IAAS,GACzDkH,UAAWQ,EAAMR,WAAa7G,EAAQQ,SAASqG,UAAUlH,IAAS,GAClEe,OAAQ2G,EAAM3G,QAAUV,EAAQQ,SAASE,OAAOf,IAAS,GACzDgB,UAAW0G,EAAM1G,WAAaX,EAAQQ,SAASG,UAAUhB,IAAS,MAbhC,CACpC6B,OAAQ,EACRqF,UAAW,EACXnG,OAAQ,EACRC,UAAW,OAeJ2G,GAA6BlC,YACxC,CAACwB,KACD,SAAC3E,GAuBC,MAnBI,CACFsF,KAAM,oBACNC,SAAUvF,EAAUoB,KAAI,SAACrD,GAavB,MAZyD,CACvDuH,KAAM,UACNE,SAAU,CACRF,KAAM,QACNrH,YAAa,CACXF,EAAQE,YAAYI,UACpBN,EAAQE,YAAYC,WAGxBuH,WAAY1H,UAWT2H,GAAkCvC,YAC7C,CAACoB,KACD,SAACvE,GACC,OAAOA,EAAUxC,QAAO,SAACmI,EAAmB3G,GAC1C,IAAM4G,EAAgBxG,OAAOC,KAAKL,EAAKT,SAASxB,EAAOG,YAEvD,GAAI0I,EAAc/F,OAAQ,CACxB,IAAMgG,EAAUlI,IAAOiI,EAAc,GH1OZ,UG4OzB,GAAID,EAAUG,QAAQD,GACpB,OAAOA,EAIX,OAAOF,IACNhI,U,GAOH6F,GAAeJ,QAFjBQ,G,GAAAA,eACAC,G,GAAAA,wBAEaL,MAAf,Q,wDCrPA,SAASuC,KAAe,IAAD,EACUC,qBAAW/K,GAAlCG,EADa,EACbA,MAAOC,EADM,EACNA,YAEf,OACE,2BAAOiB,UAAW2J,KAAOC,aACvB,2BACEZ,KAAK,WACLa,QAAS/K,IAAUJ,EAAMc,KACzBsK,SAAU,kBACR/K,EAAYD,IAAUJ,EAAMc,KAAOd,EAAMe,MAAQf,EAAMc,SAG3D,0BACEQ,UAAW+J,aAAKJ,KAAOK,KAAMlL,IAAUJ,EAAMc,MAAQmK,KAAOM,UAC5DC,aAAW,eACXC,KAAK,OAHP,iB,4BCfOC,IAAqB,qBAC/B3J,EAAOG,UAAY,WADY,eAE/BH,EAAOK,UAAY,WAFY,eAG/BL,EAAOI,OAAS,WAHe,eAI/BJ,EAAOE,OAAS,WAJe,IAW3B,SAAS0J,KAId,IAJmD,IAAxBC,EAAuB,uDAAT,IACnCC,EAAQ,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IAAK,IAAK,IAAM,KAC5CC,EAAO,IAEJA,GAAQF,GACbC,EAAME,KAAKD,GAGTA,GADEA,EAAO,IACD,IACCA,EAAO,IACR,IAEA,IAIZ,OAAOD,EAAMrJ,QAAO,SAACqJ,EAAiBC,EAAc5B,GAClD,MAAM,GAAN,oBAAW2B,GAAX,CAAkBC,EAAM5B,EAAQ,MAC/B,IASE,SAAS8B,KAIQ,IAHtBC,EAGqB,uDAHe,MACpCvJ,EAEqB,uCADrB+B,EACqB,uCACrB,MAAO,CAACwH,EAAUvJ,EAAM,CAAC,MAAO+B,EAAQ,CAAC,MAAO,cClClD,SAASyH,GAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,MAAOrK,EAA0C,EAA1CA,MAAOsK,EAAmC,EAAnCA,OAAQ3H,EAA2B,EAA3BA,OAC1C,OACE,6BACE,0BAAM4H,cAAY,iBAAiBF,EAAnC,KACA,0BACEE,cAAY,gBACZC,MAAO,CAAEC,MAAOb,GAAsBjH,MAEhC,OAAL3C,QAAK,IAALA,OAAA,EAAAA,EAAO0K,mBAAoB,EAC5B,yBAAKH,cAAY,cAAjB,WACOD,EAAS,EAAI,IAAM,IAD1B,QAEMK,MAAML,KAAP,OAAkBA,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAQI,mBAAqB,EAFpD,QCNR,SAASE,GAAT,GAA0D,IAAvChK,EAAsC,EAAtCA,KAAMiK,EAAgC,EAAhCA,eACvB,GAAIA,EAAgB,CAClB,IAAMC,EAAsBlK,EAAKI,OPhBJ,UOiBvB+J,EAAmBnK,EACtBoK,QACAC,SAAS,EAAG,OACZjK,OPpB0B,UOqBvBS,EAAWoJ,EAAe5J,QAAQQ,SAClCyJ,EAAc,CAClB,CAAEb,MAAO,YAAa1H,OAAQ1C,EAAOG,WACrC,CAAEiK,MAAO,YAAa1H,OAAQ1C,EAAOK,WACrC,CAAE+J,MAAO,SAAU1H,OAAQ1C,EAAOI,QAClC,CAAEgK,MAAO,SAAU1H,OAAQ1C,EAAOE,SAGpC,OACE,yBACEX,UAAW2J,KAAOgC,QAClBX,MAAO,CACLY,IAAKP,EAAeQ,QACpBC,KAAMT,EAAeU,UAGvB,uBAAGhB,cAAY,mBAAmBM,EAAe5J,QAAQA,SACxDiK,EAAY5G,KAAI,gBAAG+F,EAAH,EAAGA,MAAO1H,EAAV,EAAUA,OAAV,OACf,kBAACyH,GAAD,CACEvG,IAAKlB,EACL0H,MAAOA,EACPrK,MAAOyB,EAASkB,GAAQmI,GACxBR,OAAQ7I,EAASkB,GAAQmI,GAAerJ,EAASkB,GAAQoI,GACzDpI,OAAQA,QAOlB,OAAO,K,yBCjCI6I,GAAWnG,YAAY,CAClC1E,KAAM,MACN+D,aAZ6B,CAC7B+G,SAAU,CACRlK,UAAW,EACXH,SAAU,GACVsK,KAAM,MASRpG,SAAU,CACRqG,YAAa,SAACnG,EAAOC,GACnBD,EAAMiG,SAAWhG,EAAOC,YAOjBkG,GAAiB,SAACpG,GAAD,OAAsBA,EAAMlB,IAAImH,UAE/CE,GAAgBH,GAASlF,QAAzBqF,YACAH,MAAf,QCyHeK,uBAhHf,WACE,IAAMC,EAASC,iBAAuB,MAC9BzN,EAAU4K,qBAAW/K,GAArBG,MACF0N,EAAkBC,YAAYL,IAHvB,EAImB1M,mBAC9B8M,GALW,mBAINP,EAJM,KAIIE,EAJJ,OAO+BzM,mBAM1C,MAbW,mBAON2L,EAPM,KAOUqB,EAPV,KAcPzL,EAAmCwL,YAAY3E,IAC/C6E,EAAoBF,YAAY1D,IAChC5D,EAAqBsH,YAAY/F,GACjCkG,EAAwBH,YAAY7F,GACpCxF,EAAewL,EAAcpL,OT5DJ,US6DzBqL,EAAqBnC,GACzB,MACAtJ,EACA+D,EAAShC,QAEL2J,EAAqBpC,GACzB,MACAtJ,EACA+D,EAAShC,QAEL4J,EAAUC,uBACd,YAAwD,IAAD,IAApD/D,gBAAoD,MAAzC,GAAyC,MAArCgE,SAAYlB,EAAyB,EAAzBA,QAASF,EAAgB,EAAhBA,QAC/BqB,EAAmBjE,EAASkE,MAAK,SAACC,GAAD,MACrC,CAAC,QAAS,SAASnN,SAASmN,EAAEC,MAAMC,OAGtC,GAAIJ,GAAWA,EAAQ/D,YAAc+D,EAAQ/D,WAAW1H,SACtD,IAAkB,OAAd4J,QAAc,IAAdA,OAAA,EAAAA,EAAgB5J,WAAYyL,EAAQ/D,WAAW1H,QACjD,OAAOiL,EAAkB,CACvBX,UACAF,UACApK,QAASR,EAAgBiM,EAAQ/D,WAAW1H,gBAIhD,UAAI4J,QAAJ,IAAIA,OAAJ,EAAIA,EAAgB5J,QAClB,OAAOiL,EAAkB,QAI/B,CAACzL,EAAiBoK,IAYpB,OATAkC,qBAAU,WAERpB,EAAY,eACPK,EADM,CAETgB,uBAAwB,IAAIC,KAAkB,CAAEC,MAAO,MACvDC,mBAAoB,YAErB,CAACnB,IAGF,yBAAKxM,UAAW2J,KAAOiE,cACrB,kBAAC,KAAD,eACEC,IAAKvB,GACDL,EAFN,CAGE6B,MAAM,OACNC,OAAO,OACPC,SAAQ,iCAA4BlP,EAA5B,QACRmP,qBAAqB,2FACrBC,iBAAkB,SAACC,GAAD,OAAkBhC,EAAYgC,IAChDpB,QAASA,IAET,kBAAC,KAAD,CAAQO,GAAG,OAAOtE,KAAK,UAAUoF,KAAMzB,GACrC,kBAAC,KAAD,CACEW,GAAG,QACHtE,KAAK,SACLd,OAAQ,CAAC,MAAO2E,EAAoB,CAAC,IAAKC,EAAoB,IAC9DuB,MAAO,CACL,gBAAgB,CACd,cACA,CAAC,UACDvB,GAHF,oBAIKzC,OAEL,eAAgBD,GAAsBjF,EAAShC,QAC/C,iBAAkB,GAClB,sBAAuB,EACvB,sBAAuBiH,GAAsBjF,EAAShC,WAG1D,kBAAC,KAAD,CACEmK,GAAG,QACHtE,KAAK,SACLd,OAAQ,CAAC,MAAO2E,EAAoB,CAAC,IAAKC,EAAoB,IAC9DuB,MAAO,CACL,aAAcvP,IAAUJ,EAAMe,MAAQ,UAAY,WAEpD6O,OAAQ,CACN,aAAcxB,EACd,YAAa,CAAC,sBAAuB,yBACrC,YAAa,OAInB,kBAAC1B,GAAD,CAAShK,KAAMwL,EAAevB,eAAgBA,KAEhD,kBAAC5B,GAAD,U,8BC7IC,SAAS8E,GAAT,GAAkD,IAA7BzE,EAA4B,EAA5BA,SAA4B,EAChBpK,mBAAS,IADO,mBAC/C2F,EAD+C,KAClCe,EADkC,KAEhDoI,EAAYxB,uBAChB,SAACyB,GACCrI,EAAeqI,EAAEC,OAAOlO,OACxBsJ,EAAS2E,EAAEC,OAAOlO,SAEpB,CAACsJ,IAGH,OACE,yBAAK9J,UAAW2J,KAAOgF,WACrB,2BAAOnO,MAAO6E,EAAayE,SAAU0E,EAAWI,YAAY,cAC5D,kBAACC,GAAA,EAAD,CAAgB7O,UAAW2J,KAAOmF,c,OCqBzBzC,uBA/Bf,YAKwB,IAAD,IAJrBjL,YAIqB,MAJdC,MAIc,EAHrByI,EAGqB,EAHrBA,SACAP,EAEqB,EAFrBA,QACAwF,EACqB,EADrBA,QAEMC,EAAchC,uBAClB,SAACyB,GACC,IAAMQ,EAAU7N,EAAKoK,QAAQ0D,WAAWT,EAAEU,cAAc3O,OACxD,OAAOsJ,EAASmF,KAElB,CAAC7N,EAAM0I,IAGT,OACE,yBAAK9J,UAAU,iBAAiB+K,cAAY,kBAC1C,2BAAOqE,QAAQ,YAAYhO,EAAKI,OAAO,OACvC,2BACE8L,GAAG,WACHtN,UAAU,QACVgJ,KAAK,QACLxI,MAAOY,EAAK8N,YACZ1E,KAAM,EACN6E,IAAG,OAAE9F,QAAF,IAAEA,OAAF,EAAEA,EAAS2F,YACd5E,IAAG,OAAEyE,QAAF,IAAEA,OAAF,EAAEA,EAASG,YACdpF,SAAUkF,Q,mDChCX,SAASM,GAAT,GAKgC,IAJrCC,EAIoC,EAJpCA,QACA1E,EAGoC,EAHpCA,MACAvF,EAEoC,EAFpCA,OACAC,EACoC,EADpCA,cAEA,OACE,yBAAKlB,IAAKkL,EAASvP,UAAW2J,KAAO6F,WACnC,8BAAO3E,GACP,8BACGvF,IAAWiK,GAAW,kBAAC,IAAD,CAAehK,cAAeA,MCoBtD,SAASkK,KACd,IAAMC,EAAWC,cACXjM,EAAuB+I,YAAYlE,IACnCpD,EAAqBsH,YAAY/F,GACjCkJ,EAAiCnD,YAAY1E,IAC7C8H,ECrCO,SAAwBrP,GACrC,IAAMqN,EAAMtB,mBAMZ,OAJAgB,qBAAU,WACRM,EAAIiC,QAAUtP,IACb,CAACA,IAEGqN,EAAIiC,QD8BgCC,CACzCH,GAEIxO,EAAeqL,YAAY7F,GAA0BpF,Ob1C5B,Ua6CzB8D,EAAiBmH,YAAYlG,GAC7BhB,EAAmCkH,YAAYhG,GAC/Cd,EAAkC8G,YACtC9F,GAgCF,OA7BA4G,qBAAU,WACR,IACE,IAAMyC,EAA0C7Q,aAAaC,QArBxC,qBAyBrB,GAAI4Q,EAAuB,CACzB,IAAM5I,EAAoB6I,KAAKC,MAAMF,GAGrCN,EAASnI,GAAwBH,KAEnC,MAAO+I,GAEPvM,QAAQC,KAAKsM,MAEd,CAACT,IAEJnC,qBAAU,WACR,GAAIsC,IAAqBpH,IAAE2H,QAAQR,EAAcC,GAC/C,IACE1Q,aAAamB,QAxCM,oBAwCsB2P,KAAKI,UAAUT,IACxD,MAAOO,GAEPvM,QAAQC,KAAKsM,MAGhB,CAACP,EAAcC,IAGhB,yBAAK7E,MAAO,CAAE+C,OAAQ,SACpB,yBACE/N,UAAW+J,aACTJ,KAAO2G,WACN3K,GAA0BgE,KAAO4G,kBAGpC,kBAAC,IAAD,MACG,YAAwB,IAArBzC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAGHyC,GACH1C,EAAK,IAA8B,IAChC2C,EAAqC,GAA1BD,EACXE,EAAyC,GAA1BF,EAErB,OACE,kBAAC,IAAD,CACE1C,MAAOA,EACPC,OAAQA,EACR4C,aAAc,GACdC,UAAW,GACXC,SAAUnN,EAAUH,OACpBuN,aAAcA,GACdC,UAAW,gBAAGnI,EAAH,EAAGA,MAAH,OAAelF,EAAUkF,IACpCoI,WAAY,YAAwC,IAArCC,EAAoC,EAApCA,QACTtL,GACF+J,EAASpJ,KAGXoJ,EACEvD,GAAY,CACVpK,UAAWkP,EAAQtP,YAAYI,UAC/BH,SAAUqP,EAAQtP,YAAYC,SAC9BsK,KAAM,MAIZ7F,KAAM,gBAAGf,EAAH,EAAGA,OAAQC,EAAX,EAAWA,cAAX,OACJmK,EAASrJ,EAAK,CAAEf,SAAQC,oBAE1BD,OAAQA,EACRC,cAAeA,GAEf,kBAAC,IAAD,CACEsF,MAAM,IACN0E,QAAQ,QACR2B,aAAW,EACXpD,MAvCqB,GAwCrBwB,eAAgBA,KAElB,kBAAC,IAAD,CACExB,MAAO4C,EACP1Q,UAAW2J,KAAOwH,WAClBtG,MAAM,UACN0E,QAAQ,UACR6B,qBAAqB,MACrB9B,eAAgBA,KAEjB,CACC,CAAEzE,MAAO,YAAa1H,OAAQ1C,EAAOG,WACrC,CAAEiK,MAAO,YAAa1H,OAAQ1C,EAAOK,WACrC,CAAE+J,MAAO,SAAU1H,OAAQ1C,EAAOI,QAClC,CAAEgK,MAAO,SAAU1H,OAAQ1C,EAAOE,SAClCmE,KAAI,SAACuM,GAAD,OACJ,kBAAC,IAAD,CACEhN,IAAKgN,EAAOlO,OACZ0H,MAAOwG,EAAOxG,MACd0E,QAAS8B,EAAOlO,OAChBiO,qBAAqB,OACrBtD,MAAO2C,EACPnB,eAAgBA,GAChBgC,eAAgB,kBAAG/B,EAAH,EAAGA,QAAH,OACd,UADc,EAAY0B,QAClBhP,SAASsN,GAASnO,UAA1B,eAAiC8J,mBAAoB,QAI3D,kBAAC,IAAD,CACEL,MAAM,GACN0E,QAAQ,WACR2B,aAAW,EACXpD,MAvEmB,GAwEnBwB,eAAgB,WACd,IAAMiC,EAAWpM,EAASC,SAAWoM,KAAOC,KAE5C,OACE,kBAACF,EAAD,CACEvR,UAAW2J,KAAO+H,aAClB3G,cAAY,qBACZ4G,QAAS,SAAClD,GACRA,EAAEmD,kBACFlC,EACE3J,EAAY,eACPZ,EADM,CAETC,UAAWD,EAASC,iBAOhCyM,aAAc,YAAkB,IAAfZ,EAAc,EAAdA,QACTM,EAAW3B,EAAaqB,EAAQxP,SAClC+P,KACAC,KAEJ,OACE,kBAACF,EAAD,CACEvR,UAAW2J,KAAO+H,aAClB3G,cAAY,kBACZ4G,QAAS,SAAClD,GACRA,EAAEmD,kBACFlC,EAASpI,GAAe2J,EAAQxP,qBAWpD,4BACEzB,UAAW2J,KAAOmI,YAClBH,QAAS,kBAAMjC,EAASpJ,OAF1B,UAIMX,EAAyB,OAAS,OAJxC,YAUN,SAASmL,GAAT,GAA6D,IAArClI,EAAoC,EAApCA,MACtB,OAAIA,GAAS,EACJA,EAAQ,EAAIe,KAAOoI,QAAUpI,KAAOqI,OAGtCrI,KAAOsI,U,wBE/MT,SAASC,GAAT,GAMgB,IALrBrH,EAKoB,EALpBA,MACAsH,EAIoB,EAJpBA,SACAC,EAGoB,EAHpBA,YACAC,EAEoB,EAFpBA,SACAV,EACoB,EADpBA,QAEA,OACE,yBACE3R,UAAW+J,aAAKJ,KAAO2I,WAAYD,GAAY1I,KAAO4I,kBACtDvH,MAAOqH,EAAW,CAAEpH,MAAOmH,GAAgB,GAC3CT,QAASA,GAET,yBAAK3R,UAAW2J,KAAO6I,gBAAiBzH,cAAY,qBACjDF,GAEH,yBACE7K,UAAW2J,KAAO8I,wBAClB1H,cAAY,qBAEXoH,EAASjH,mBCPX,SAASwH,KACd,IAAMhD,EAAWC,cACXvO,EAAeqL,YAAY7F,GAC3ByC,EAAoBoD,YAAYrD,IAChCjE,EAAqBsH,YAAY/F,GACjCiM,EAAUlG,YAAY5D,IACtBlD,EAAkC8G,YACtC9F,GAEIiM,EAAS,CACb,CAAE/H,MAAO,YAAa1H,OAAQ1C,EAAOG,WACrC,CAAEiK,MAAO,YAAa1H,OAAQ1C,EAAOK,WACrC,CAAE+J,MAAO,SAAU1H,OAAQ1C,EAAOI,QAClC,CAAEgK,MAAO,SAAU1H,OAAQ1C,EAAOE,SAGpC,OACE,yBACEX,UAAW+J,aAAKJ,KAAOnD,QAASb,GAA0BgE,KAAOkJ,OAEjE,yBAAK7S,UAAW2J,KAAOmJ,QACpBF,EAAO9N,KAAI,gBAAG+F,EAAH,EAAGA,MAAO1H,EAAV,EAAUA,OAAV,OACV,kBAAC+O,GAAD,CACE7N,IAAKlB,EACL0H,MAAOA,EACPsH,SAAUQ,EAAQxP,GAClBiP,YAAahI,GAAsBjF,EAAShC,QAC5CkP,SAAUlN,EAAShC,SAAWA,EAC9BwO,QAAS,kBACPjC,EAAS3J,EAAY,CAAE5C,SAAQiC,SAAUD,EAASC,mBAK1D,kBAAC,GAAD,CACEhE,KAAMC,IAAOD,GACb0I,SAAU,SAAC1I,GAAD,OAAUsO,EAASvJ,EAAgB/E,EAAKI,YAClD+H,QAASF,EACT0F,QAAS1N,QAEX,kBAACkN,GAAD,CACEzE,SAAU,SAACzE,GAAD,OACRqK,EAAStJ,EAAef,OAG5B,kBAACoK,GAAD,O,OC7CSsD,OAjBf,WACE,IAAMrD,EAAWC,cAMjB,OAJApC,qBAAU,WACRmC,EAAS3I,OACR,CAAC2I,IAGF,kBAAC1Q,EAAD,KACE,yBAAKgB,UAAU,OACb,kBAAC0S,GAAD,MACA,kBAAC,GAAD,SCTKM,GAAc,CACzBC,QAAS,CACPvP,aACAoB,OACA0B,WAEF0M,WAAYC,YAAqB,CAC/BC,gBAAgB,EAChBC,mBAAmB,KAIVC,GAAQC,YAAeP,I,OCVhBQ,QACW,cAA7BnU,OAAOoU,SAASC,UAEe,UAA7BrU,OAAOoU,SAASC,UAEhBrU,OAAOoU,SAASC,SAASvL,MACvB,2DCVNwL,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,IACf,kBAAC,GAAD,OAEFxT,SAAS+T,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC/M,GACNzD,QAAQyD,MAAMA,EAAMgN,a,mBE7I5B7V,EAAOC,QAAU,CAAC,UAAY,kCAAkC,gBAAkB,wCAAwC,UAAY,kCAAkC,QAAU,gCAAgC,OAAS,+BAA+B,UAAY,kCAAkC,WAAa,mCAAmC,aAAe,qCAAqC,YAAc,sC,mBCA1ZD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,OAAS,wBAAwB,WAAa,4BAA4B,gBAAkB,iCAAiC,wBAA0B,2C,mBCAzOD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,KAAO,0BAA0B,SAAW,gC,mBCA7GD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,WAAa,iC","file":"static/js/main.6a1325a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltip\":\"Tooltip_tooltip__32Y0_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapContainer\":\"Map_mapContainer__dIyOX\"};","import React, { useLayoutEffect, useState } from \"react\";\nimport { Nullable } from \"../../genericTypes\";\nimport { getBrowserTheme } from \"./themeUtils\";\n\nexport enum Theme {\n  Light = \"light\",\n  Dark = \"dark\",\n}\n\nexport interface ThemeContext {\n  theme: Nullable<Theme>;\n  switchTheme: (theme: Theme) => void;\n}\n\nexport const ThemeContext = React.createContext<ThemeContext>({\n  theme: null,\n  switchTheme: (theme: Theme) => {},\n});\n\ninterface ThemeContextProviderProps {\n  children: React.ReactNode | ((theme: Theme) => Theme);\n}\n\nexport function ThemeContextProvider({ children }: ThemeContextProviderProps) {\n  const defaultTheme: Theme =\n    (localStorage.getItem(\"theme\") as Nullable<Theme>) || getBrowserTheme();\n  const [theme, switchTheme] = useState(defaultTheme);\n\n  useLayoutEffect(() => {\n    const prevTheme: string = theme === Theme.Dark ? Theme.Light : Theme.Dark;\n    const root = document.getElementsByTagName(\"html\")[0];\n    root.className = root.className.includes(theme)\n      ? root.className\n      : root.className.includes(prevTheme)\n      ? root.className.replace(prevTheme, theme)\n      : root.className.split(\" \").concat(theme).join(\" \");\n\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, switchTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","import { Theme } from \"./ThemeContext\";\n\nexport function getBrowserTheme(): Theme {\n  return window.matchMedia &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ? Theme.Dark\n    : Theme.Light;\n}\n","import { HashMap, Nullable } from \"../../genericTypes\";\n\nexport enum Status {\n  Active = \"active\",\n  Confirmed = \"confirmed\",\n  Deaths = \"deaths\",\n  Recovered = \"recovered\",\n}\n\nexport interface Country {\n  country: string;\n  province: Nullable<string>;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timeline: Timeline;\n  updated?: Date;\n}\n\nexport type CountriesByName = HashMap<Country>;\nexport type TimelineDates = HashMap<number>;\n\nexport interface Timeline {\n  [Status.Active]: TimelineDates;\n  [Status.Confirmed]: TimelineDates;\n  [Status.Deaths]: TimelineDates;\n  [Status.Recovered]: TimelineDates;\n}\n\nexport interface Timeline {\n  [Status.Active]: HashMap<number>;\n  [Status.Confirmed]: HashMap<number>;\n  [Status.Deaths]: HashMap<number>;\n  [Status.Recovered]: HashMap<number>;\n}\n\nexport interface TotalByCountry {\n  active: number;\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n}\n","import moment from \"moment\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport {\n  CountriesByName,\n  Country,\n  Status,\n  Timeline,\n  TimelineDates,\n} from \"./countriesTypes\";\n\nconst defaultTimeline: Timeline = {\n  [Status.Active]: {},\n  [Status.Confirmed]: {},\n  [Status.Deaths]: {},\n  [Status.Recovered]: {},\n};\n\n/**\n * Returns an array of merged countries with timelines\n * @param response\n */\nexport function mergeCountriesWithHistoricalData(\n  response: any[]\n): CountriesByName {\n  const countriesByName: CountriesByName = getCountriesByHistoricalName(\n    response[0]\n  );\n  const historicalCountriesWithProvincesByName: CountriesByName = getHistoricalCountriesWithProvincesByGlobalName(\n    response[1],\n    countriesByName\n  );\n\n  return Object.values(countriesByName).reduce(\n    (countries: CountriesByName, country: Country) => {\n      const historicalCountry =\n        historicalCountriesWithProvincesByName[country.country];\n      const timeline: Timeline = historicalCountry\n        ? historicalCountry.timeline\n        : defaultTimeline;\n\n      if (!Object.keys(timeline[Status.Confirmed]).length) {\n        console.warn(\"countries without timeline\", country);\n      }\n\n      return {\n        ...countries,\n        [country.country]: {\n          ...country,\n          timeline: removeEmptyDays({\n            [Status.Active]: {\n              ...timeline[Status.Active],\n              ...country.timeline[Status.Active],\n            },\n            [Status.Confirmed]: {\n              ...timeline[Status.Confirmed],\n              ...country.timeline[Status.Confirmed],\n            },\n            [Status.Deaths]: {\n              ...timeline[Status.Deaths],\n              ...country.timeline[Status.Deaths],\n            },\n            [Status.Recovered]: {\n              ...timeline[Status.Recovered],\n              ...country.timeline[Status.Recovered],\n            },\n          }),\n        },\n      };\n    },\n    {}\n  );\n}\n\n/**\n * Returns map of countrise by historical name\n * @param response\n */\nfunction getCountriesByHistoricalName(response: []): CountriesByName {\n  return response.reduce((countriesByName: CountriesByName, value: any) => {\n    const date = moment.utc(value.updated).format(SHORT_DATE_FORMAT);\n    const country: Country = {\n      country: value.country,\n      province: null,\n      coordinates: {\n        latitude: value.countryInfo.lat,\n        longitude: value.countryInfo.long,\n      },\n      timeline: {\n        [Status.Active]: {\n          [date]: value.cases - value.deaths - value.recovered,\n        },\n        [Status.Confirmed]: {\n          [date]: value.cases,\n        },\n        [Status.Deaths]: {\n          [date]: value.deaths,\n        },\n        [Status.Recovered]: {\n          [date]: value.recovered,\n        },\n      },\n      updated: value.updated,\n    };\n\n    return {\n      ...countriesByName,\n      [convertGlobalNameToHistorical(country.country)]: country,\n    };\n  }, {});\n}\n\n/**\n * Returns map of historical countries and provinces by global name\n * @param response\n * @param countriesByName\n */\nfunction getHistoricalCountriesWithProvincesByGlobalName(\n  response: [],\n  countriesByName: CountriesByName\n): CountriesByName {\n  return response.reduce((prev: CountriesByName, curr: any) => {\n    const country: Country = {\n      country:\n        countriesByName[curr.country]?.country ||\n        convertHistoricalNameToGlobal(curr.country),\n      province:\n        countriesByName[curr.province]?.country ||\n        convertHistoricalNameToGlobal(curr.province),\n      coordinates: {\n        latitude: 0,\n        longitude: 0,\n      },\n      timeline: {\n        [Status.Active]: Object.keys(curr.timeline.cases).reduce(\n          (prevDates: TimelineDates, date: string) => {\n            const active: number =\n              curr.timeline.cases[date] -\n              curr.timeline.deaths[date] -\n              curr.timeline.recovered[date];\n\n            prevDates[date] = active;\n\n            return prevDates;\n          },\n          {}\n        ),\n        [Status.Confirmed]: curr.timeline.cases,\n        [Status.Deaths]: curr.timeline.deaths,\n        [Status.Recovered]: curr.timeline.recovered,\n      },\n    };\n    const shouldSummarizeProvinces: boolean = [\n      \"Australia\",\n      \"China\",\n      \"Canada\",\n    ].includes(country.country);\n\n    if (!prev[country.country]) {\n      if (!country.province || shouldSummarizeProvinces) {\n        prev[country.country] = {\n          ...country,\n          province: null,\n          timeline: country.province ? defaultTimeline : country.timeline,\n        };\n      }\n    }\n\n    if (country.province) {\n      prev[country.province] = country;\n    }\n\n    if (prev[country.country] && country.province) {\n      if (shouldSummarizeProvinces) {\n        prev[country.country].timeline = sumTimelines(\n          prev[country.country].timeline,\n          country.timeline\n        );\n      }\n    }\n\n    return prev;\n  }, {});\n}\n\n/**\n * Returns Timeline without empty days to optimize store size\n * @param timeline\n */\nfunction removeEmptyDays(timeline: Timeline): Timeline {\n  const statuses = Object.keys(timeline) as Status[];\n\n  return statuses.reduce((statuses: Timeline, status: Status) => {\n    return {\n      ...statuses,\n      [status]: Object.keys(timeline[status]).reduce(\n        (dates: TimelineDates, date: string) => {\n          if (timeline[status][date]) {\n            dates[date] = timeline[status][date];\n          }\n\n          return dates;\n        },\n        {}\n      ),\n    };\n  }, defaultTimeline);\n}\n\n/**\n * Returns summarized timelines\n * @param timeline1\n * @param timeline2\n */\nfunction sumTimelines(timeline1: Timeline, timeline2: Timeline) {\n  const statuses = Object.keys(timeline1) as Status[];\n\n  return statuses.reduce((timeline: Timeline, status: Status) => {\n    const timelineDates1 = Object.keys(timeline1[status]);\n    const timelineDates2 = Object.keys(timeline2[status]);\n    const dates = timelineDates1.length ? timelineDates1 : timelineDates2;\n\n    return {\n      ...timeline,\n      [status]: dates.reduce((dates, date: string) => {\n        return {\n          ...dates,\n          [date]:\n            (timeline1[status][date] || 0) + (timeline2[status][date] || 0),\n        };\n      }, {}),\n    };\n  }, defaultTimeline);\n}\n\nconst globalToHistoricalNames: { [name: string]: string } = {\n  \"Côte d'Ivoire\": \"Cote d'Ivoire\",\n  Palestine: \"West Bank and Gaza\",\n  \"Lao People's Democratic Republic\": 'Lao People\"s Democratic Republic',\n  Myanmar: \"Burma\",\n  \"Holy See (Vatican City State)\": \"Holy See\",\n  Réunion: \"Reunion\",\n  Macao: \"macau\",\n  \"Saint Martin\": \"st martin\",\n  \"St. Barth\": \"saint barthelemy\",\n  \"Saint Pierre Miquelon\": \"saint pierre and miquelon\",\n  Curaçao: \"curacao\",\n  \"Caribbean Netherlands\": \"bonaire, sint eustatius and saba\",\n};\n\nfunction convertGlobalNameToHistorical(name: string) {\n  return (globalToHistoricalNames[name] || name).toLowerCase();\n}\n\nfunction convertHistoricalNameToGlobal(name: string) {\n  const historicalToGlobalNames: {\n    [name: string]: string;\n  } = Object.keys(globalToHistoricalNames).reduce(\n    (prev, key) => ({ ...prev, [globalToHistoricalNames[key]]: key }),\n    {}\n  );\n\n  return historicalToGlobalNames[name] || name;\n}\n","export const SHORT_DATE_FORMAT = \"M/D/YY\";\n","import { CountriesByName } from \"../features/countries/countriesTypes\";\nimport { mergeCountriesWithHistoricalData } from \"../features/countries/countriesUtils\";\n\nexport const API_URL = \"https://corona.lmao.ninja\";\nexport const COUNTRIES_URL = `${API_URL}/v2/countries`;\nexport const HISTORICAL_URL = `${API_URL}/v2/historical?lastdays=all`;\n\nexport async function getCountries(): Promise<CountriesByName> {\n  const urls: string[] = [COUNTRIES_URL, HISTORICAL_URL];\n  const response: any[] = await Promise.all(\n    urls.map(async (url: string) => {\n      const response = await fetch(url);\n      return response.json();\n    })\n  );\n\n  return mergeCountriesWithHistoricalData(response);\n}\n","import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport moment from \"moment\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport { RootState } from \"../../app/store\";\nimport { Status } from \"../countries/countriesTypes\";\nimport { FilterBy } from \"./sideBarTypes\";\n\ninterface SideBarState {\n  filterBy: FilterBy;\n  searchValue: string;\n  sortBy: string;\n  sortDirection: SortDirectionType;\n  timelineDate: string; // ISO format\n  isTableVisibleOnMobile: boolean;\n}\n\nconst initialState: SideBarState = {\n  filterBy: {\n    status: Status.Confirmed,\n    favorite: false,\n  },\n  searchValue: \"\",\n  sortBy: Status.Confirmed,\n  sortDirection: SortDirection.DESC,\n  timelineDate: moment().format(),\n  isTableVisibleOnMobile: false,\n};\n\nexport const sideBarSlice = createSlice({\n  name: \"sideBar\",\n  initialState,\n  reducers: {\n    setFilterBy: (state, action: PayloadAction<FilterBy>) => {\n      state.filterBy = action.payload;\n    },\n    setTimelineDate: (state, action: PayloadAction<string>) => {\n      state.timelineDate = action.payload;\n    },\n    setSearchValue: (state, action: PayloadAction<string>) => {\n      state.searchValue = action.payload;\n    },\n    sort: (\n      state,\n      action: PayloadAction<{\n        sortBy: string;\n        sortDirection: SortDirectionType;\n      }>\n    ) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortDirection = action.payload.sortDirection;\n    },\n    toggleTableVisibility: (state) => {\n      state.isTableVisibleOnMobile = !state.isTableVisibleOnMobile;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectSearchValue = (state: RootState) =>\n  state.sideBar.searchValue;\nexport const selectSortBy = (state: RootState) => state.sideBar.sortBy;\nexport const selectSortDirection = (state: RootState) =>\n  state.sideBar.sortDirection;\nexport const selectTimelineDate = (state: RootState) =>\n  state.sideBar.timelineDate;\nexport const selectFilterBy = (state: RootState) => state.sideBar.filterBy;\nexport const selectIsTableVisibleOnMobile = (state: RootState) =>\n  state.sideBar.isTableVisibleOnMobile;\n\nexport const selectMomentTimelineDate = createSelector(\n  [selectTimelineDate],\n  (timelineDate: string) => moment(timelineDate)\n);\n\nexport const {\n  setFilterBy,\n  setTimelineDate,\n  setSearchValue,\n  sort,\n  toggleTableVisibility,\n} = sideBarSlice.actions;\nexport default sideBarSlice.reducer;\n","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n  PayloadAction,\n  SerializedError,\n} from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\nimport moment, { Moment } from \"moment\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport * as CoronaAPI from \"../../api/corona\";\nimport { RootState } from \"../../app/store\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { HashMap, Nullable } from \"../../genericTypes\";\nimport {\n  selectFilterBy,\n  selectMomentTimelineDate,\n  selectSearchValue,\n  selectSortBy,\n  selectSortDirection,\n} from \"../sideBar/sideBarSlice\";\nimport { FilterBy } from \"../sideBar/sideBarTypes\";\nimport {\n  CountriesByName,\n  Country,\n  Status,\n  TotalByCountry,\n} from \"./countriesTypes\";\n\n// Async actions\n\nexport const fetchCountries = createAsyncThunk(\n  \"countries/fetchCountries\",\n  async () => await CoronaAPI.getCountries()\n);\n\n// Slice\n\ninterface CountriesState {\n  loading: \"idle\" | \"pending\" | \"succeeded\" | \"failed\";\n  countriesByName: CountriesByName;\n  favoriteCountries: HashMap<boolean>;\n  error: Nullable<SerializedError>;\n}\n\nconst initialState: CountriesState = {\n  loading: \"idle\",\n  countriesByName: {},\n  favoriteCountries: {},\n  error: null,\n};\n\nexport const countriesSlice = createSlice({\n  name: \"countries\",\n  initialState,\n  reducers: {\n    toggleFavorite: (state, action: PayloadAction<string>) => {\n      if (state.favoriteCountries[action.payload]) {\n        delete state.favoriteCountries[action.payload];\n      } else {\n        state.favoriteCountries[action.payload] = true;\n      }\n    },\n    updateFavoriteCountries: (\n      state,\n      action: PayloadAction<HashMap<boolean>>\n    ) => {\n      state.favoriteCountries = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCountries.pending, (state) => {\n        if (state.loading === \"idle\") {\n          state.loading = \"pending\";\n        }\n      })\n      .addCase(\n        fetchCountries.fulfilled,\n        (state, action: PayloadAction<CountriesByName>) => {\n          if (state.loading === \"pending\") {\n            state.loading = \"idle\";\n          }\n\n          state.countriesByName = action.payload;\n        }\n      )\n      .addCase(fetchCountries.rejected, (state, action) => {\n        state.error = action.error;\n      });\n  },\n});\n\n// Selectors\n\nexport const selectCountriesByName = (state: RootState) =>\n  state.countries.countriesByName;\n\nexport const selectFavoriteCountries = (state: RootState) =>\n  state.countries.favoriteCountries;\n\nexport const selectCountries = createSelector(\n  [selectCountriesByName],\n  (countriesByName: CountriesByName) => Object.values(countriesByName)\n);\n\nexport const selectFilteredCountries = createSelector(\n  [selectCountries, selectSearchValue, selectFilterBy, selectFavoriteCountries],\n  (\n    countries: Country[],\n    searchValue: string,\n    filterBy: FilterBy,\n    favoriteCountries: HashMap<boolean>\n  ) => {\n    return countries.filter((country: Country) => {\n      // Filter by search\n      if (searchValue && !country.country.match(new RegExp(searchValue, \"i\"))) {\n        return false;\n      }\n\n      // Filter by favorite\n      if (filterBy.favorite && !favoriteCountries[country.country]) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n);\n\nexport const selectFilteredWithTimelineCountries = createSelector(\n  [selectFilteredCountries, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.filter((country: Country) => {\n      return (\n        country.timeline.active[date] ||\n        country.timeline.confirmed[date] ||\n        country.timeline.deaths[date] ||\n        country.timeline.recovered[date]\n      );\n    });\n  }\n);\n\nexport const selectFilteredAndOrderedCountries = createSelector(\n  [\n    selectFilteredWithTimelineCountries,\n    selectMomentTimelineDate,\n    selectSortBy,\n    selectSortDirection,\n  ],\n  (\n    countries: Country[],\n    timelineDate: Moment,\n    sortBy: string,\n    sortDirection: SortDirectionType\n  ) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n    const isSortByStatus = Object.values(Status as any).includes(sortBy);\n\n    return _.orderBy(\n      countries,\n      (country: Country) => {\n        if (isSortByStatus) {\n          return country.timeline[sortBy as Status][date] || 0;\n        }\n\n        return country[sortBy as keyof Country];\n      },\n      sortDirection === SortDirection.ASC ? \"asc\" : \"desc\"\n    ).map((country, index) => ({ ...country, index: index + 1 }));\n  }\n);\n\nexport const selectFilteredSumData = createSelector(\n  [selectFilteredWithTimelineCountries, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const defaultValues: TotalByCountry = {\n      active: 0,\n      confirmed: 0,\n      deaths: 0,\n      recovered: 0,\n    };\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.reduce((total: TotalByCountry, country: Country) => {\n      return {\n        active: total.active + (country.timeline.active[date] || 0),\n        confirmed: total.confirmed + (country.timeline.confirmed[date] || 0),\n        deaths: total.deaths + (country.timeline.deaths[date] || 0),\n        recovered: total.recovered + (country.timeline.recovered[date] || 0),\n      };\n    }, defaultValues);\n  }\n);\n\nexport const selectlFilteredCountriesFC = createSelector(\n  [selectFilteredWithTimelineCountries],\n  (countries: Country[]) => {\n    const featuerCollection: GeoJSON.FeatureCollection<\n      GeoJSON.Point,\n      Country\n    > = {\n      type: \"FeatureCollection\",\n      features: countries.map((country) => {\n        const feature: GeoJSON.Feature<GeoJSON.Point, Country> = {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              country.coordinates.longitude,\n              country.coordinates.latitude,\n            ],\n          },\n          properties: country,\n        };\n\n        return feature;\n      }),\n    };\n\n    return featuerCollection;\n  }\n);\n\nexport const selectFilteredStartTimelineDate = createSelector(\n  [selectFilteredCountries],\n  (countries: Country[]) => {\n    return countries.reduce((startDate: Moment, curr: Country) => {\n      const confirmedKeys = Object.keys(curr.timeline[Status.Confirmed]);\n\n      if (confirmedKeys.length) {\n        const minDate = moment(confirmedKeys[0], SHORT_DATE_FORMAT);\n\n        if (startDate.isAfter(minDate)) {\n          return minDate;\n        }\n      }\n\n      return startDate;\n    }, moment());\n  }\n);\n\nexport const {\n  toggleFavorite,\n  updateFavoriteCountries,\n} = countriesSlice.actions;\nexport default countriesSlice.reducer;\n","import clsx from \"clsx\";\nimport React, { useContext } from \"react\";\nimport { Theme, ThemeContext } from \"../../common/theme/ThemeContext\";\nimport styles from \"./ThemeSwitch.module.css\";\n\nfunction ThemeSwitch() {\n  const { theme, switchTheme } = useContext(ThemeContext);\n\n  return (\n    <label className={styles.themeSwitch}>\n      <input\n        type=\"checkbox\"\n        checked={theme === Theme.Dark}\n        onChange={() =>\n          switchTheme(theme === Theme.Dark ? Theme.Light : Theme.Dark)\n        }\n      />\n      <span\n        className={clsx(styles.icon, theme === Theme.Dark && styles.iconDark)}\n        aria-label=\"Switch theme\"\n        role=\"img\"\n      >\n        💡\n      </span>\n    </label>\n  );\n}\n\nexport { ThemeSwitch };\n","import { Status } from \"../countries/countriesTypes\";\n\nexport const COLORS_BY_FILTER_TYPE = {\n  [Status.Confirmed]: \"#FF5733\",\n  [Status.Recovered]: \"#7ECB88\",\n  [Status.Deaths]: \"#BD33FF\",\n  [Status.Active]: \"#FFBD33\",\n};\n\n/**\n * Creates an array with input/output paris for interpolate expression\n * @param max\n */\nexport function getInOurPais(max: number = 1000000) {\n  const steps = [0, 1, 5, 10, 50, 100, 500, 1000, 2000];\n  let step = 5000;\n\n  while (step <= max) {\n    steps.push(step);\n\n    if (step < 100000) {\n      step += 5000;\n    } else if (step < 500000) {\n      step += 20000;\n    } else {\n      step += 50000;\n    }\n  }\n\n  return steps.reduce((steps: number[], step: number, index) => {\n    return [...steps, step, index + 2 * 2];\n  }, []);\n}\n\n/**\n * Creates specific expression for getting timeline information from feature property\n * @param operator\n * @param date\n * @param status\n */\nexport function getTimelineExpression(\n  operator: mapboxgl.ExpressionName = \"get\",\n  date: string,\n  status: Status\n): mapboxgl.Expression {\n  return [operator, date, [\"get\", status, [\"get\", \"timeline\"]]];\n}\n","import React from \"react\";\nimport { Status } from \"../../features/countries/countriesTypes\";\nimport { COLORS_BY_FILTER_TYPE } from \"../../features/map/mapUtils\";\n\ninterface TooltipRowProps {\n  label: string;\n  value: number;\n  perDay: number;\n  status: Status;\n}\n\nfunction TooltipRow({ label, value, perDay, status }: TooltipRowProps) {\n  return (\n    <div>\n      <span data-testid=\"tooltip-label\">{label}:</span>\n      <span\n        data-testid=\"tooltip-value\"\n        style={{ color: COLORS_BY_FILTER_TYPE[status] }}\n      >\n        {value?.toLocaleString() || 0}\n        <sup data-testid=\"difference\">\n          {`(${perDay > 0 ? \"+\" : \"\"}${\n            (!isNaN(perDay) && perDay?.toLocaleString()) || 0\n          })`}\n        </sup>\n      </span>\n    </div>\n  );\n}\n\nexport { TooltipRow };\n","import { Moment } from \"moment\";\nimport React from \"react\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { Status } from \"../../features/countries/countriesTypes\";\nimport { HoveredCountry } from \"../../features/map/mapTypes\";\nimport { Nullable } from \"../../genericTypes\";\nimport styles from \"./Tooltip.module.scss\";\nimport { TooltipRow } from \"./TooltipRow\";\n\ninterface TooltipProps {\n  date: Moment;\n  hoveredCountry?: Nullable<HoveredCountry>;\n}\n\nfunction Tooltip({ date, hoveredCountry }: TooltipProps) {\n  if (hoveredCountry) {\n    const currentDate: string = date.format(SHORT_DATE_FORMAT);\n    const prevDate: string = date\n      .clone()\n      .subtract(1, \"day\")\n      .format(SHORT_DATE_FORMAT);\n    const timeline = hoveredCountry.country.timeline;\n    const tooltipRows = [\n      { label: \"Confirmed\", status: Status.Confirmed },\n      { label: \"Recovered\", status: Status.Recovered },\n      { label: \"Deaths\", status: Status.Deaths },\n      { label: \"Active\", status: Status.Active },\n    ];\n\n    return (\n      <div\n        className={styles.tooltip}\n        style={{\n          top: hoveredCountry.offsetY,\n          left: hoveredCountry.offsetX,\n        }}\n      >\n        <b data-testid=\"tooltip-country\">{hoveredCountry.country.country}</b>\n        {tooltipRows.map(({ label, status }) => (\n          <TooltipRow\n            key={status}\n            label={label}\n            value={timeline[status][currentDate]}\n            perDay={timeline[status][currentDate] - timeline[status][prevDate]}\n            status={status}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport { Tooltip };\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { Viewport } from \"./mapTypes\";\n\nexport interface MapState {\n  viewport: Viewport;\n}\n\nconst initialState: MapState = {\n  viewport: {\n    longitude: 0,\n    latitude: 15,\n    zoom: 1.5,\n  },\n};\n\n// Slice\n\nexport const mapSlice = createSlice({\n  name: \"map\",\n  initialState,\n  reducers: {\n    setViewport: (state, action: PayloadAction<Viewport>) => {\n      state.viewport = action.payload;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectViewPort = (state: RootState) => state.map.viewport;\n\nexport const { setViewport } = mapSlice.actions;\nexport default mapSlice.reducer;\n","import { Feature } from \"geojson\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { Moment } from \"moment\";\nimport React, {\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport MapGL, {\n  FlyToInterpolator,\n  InteractiveMap,\n  InteractiveMapProps,\n  Layer,\n  Source,\n} from \"react-map-gl\";\nimport { useSelector } from \"react-redux\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { Theme, ThemeContext } from \"../../common/theme/ThemeContext\";\nimport { ThemeSwitch } from \"../../components/themeSwitch/ThemeSwitch\";\nimport { Tooltip } from \"../../components/tooltip/Tooltip\";\nimport { Nullable } from \"../../genericTypes\";\nimport {\n  selectCountriesByName,\n  selectlFilteredCountriesFC,\n} from \"../countries/countriesSlice\";\nimport { CountriesByName, Country } from \"../countries/countriesTypes\";\nimport {\n  selectFilterBy,\n  selectMomentTimelineDate,\n} from \"../sideBar/sideBarSlice\";\nimport { FilterBy } from \"../sideBar/sideBarTypes\";\nimport styles from \"./Map.module.css\";\nimport { selectViewPort } from \"./mapSlice\";\nimport {\n  COLORS_BY_FILTER_TYPE,\n  getInOurPais,\n  getTimelineExpression,\n} from \"./mapUtils\";\n\nfunction Map() {\n  const mapRef = useRef<InteractiveMap>(null);\n  const { theme } = useContext(ThemeContext);\n  const initialViewport = useSelector(selectViewPort);\n  const [viewport, setViewport] = useState<Partial<InteractiveMapProps>>(\n    initialViewport\n  );\n  const [hoveredCountry, setHoveredCountry] = useState<\n    Nullable<{\n      country: Country;\n      offsetX: number;\n      offsetY: number;\n    }>\n  >(null);\n  const countriesByName: CountriesByName = useSelector(selectCountriesByName);\n  const featureCollection = useSelector(selectlFilteredCountriesFC);\n  const filterBy: FilterBy = useSelector(selectFilterBy);\n  const currentMoment: Moment = useSelector(selectMomentTimelineDate);\n  const date: string = currentMoment.format(SHORT_DATE_FORMAT);\n  const hasCasesExpression = getTimelineExpression(\n    \"has\",\n    date,\n    filterBy.status\n  );\n  const getCasesExpression = getTimelineExpression(\n    \"get\",\n    date,\n    filterBy.status\n  );\n  const onHover = useCallback(\n    ({ features = [], srcEvent: { offsetX, offsetY } }) => {\n      const feature: Feature = features.find((f: any) =>\n        [\"label\", \"point\"].includes(f.layer.id)\n      );\n\n      if (feature && feature.properties && feature.properties.country) {\n        if (hoveredCountry?.country !== feature.properties.country) {\n          return setHoveredCountry({\n            offsetX,\n            offsetY,\n            country: countriesByName[feature.properties.country],\n          });\n        }\n      } else {\n        if (hoveredCountry?.country) {\n          return setHoveredCountry(null);\n        }\n      }\n    },\n    [countriesByName, hoveredCountry]\n  );\n\n  useEffect(() => {\n    // fly to the new position\n    setViewport({\n      ...initialViewport,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: \"auto\",\n    });\n  }, [initialViewport]);\n\n  return (\n    <div className={styles.mapContainer}>\n      <MapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={`mapbox://styles/mapbox/${theme}-v10`}\n        mapboxApiAccessToken=\"pk.eyJ1IjoiZGVtcGtoIiwiYSI6ImNrOGZwanFuazAxdnozbG4yNm1tOHVuYzkifQ.fRJrCsndLJ4yM-jlPaAG9Q\"\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        onHover={onHover}\n      >\n        <Source id=\"data\" type=\"geojson\" data={featureCollection}>\n          <Layer\n            id=\"point\"\n            type=\"circle\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"circle-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                getCasesExpression,\n                ...getInOurPais(),\n              ],\n              \"circle-color\": COLORS_BY_FILTER_TYPE[filterBy.status],\n              \"circle-opacity\": 0.4,\n              \"circle-stroke-width\": 1,\n              \"circle-stroke-color\": COLORS_BY_FILTER_TYPE[filterBy.status],\n            }}\n          />\n          <Layer\n            id=\"label\"\n            type=\"symbol\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"text-color\": theme === Theme.Light ? \"#3B3B3B\" : \"#EBEBEB\",\n            }}\n            layout={{\n              \"text-field\": getCasesExpression,\n              \"text-font\": [\"DIN Offc Pro Medium\", \"Arial Unicode MS Bold\"],\n              \"text-size\": 12,\n            }}\n          />\n        </Source>\n        <Tooltip date={currentMoment} hoveredCountry={hoveredCountry} />\n      </MapGL>\n      <ThemeSwitch />\n    </div>\n  );\n}\n\nexport default memo(Map);\n","import { SearchOutlined } from \"@material-ui/icons\";\nimport React, { useCallback, useState } from \"react\";\nimport styles from \"./SearchBar.module.scss\";\n\ninterface SearchBarProps {\n  onChange: (searchValue: string) => void;\n}\n\nexport function SearchBar({ onChange }: SearchBarProps) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const _onChange = useCallback(\n    (e) => {\n      setSearchValue(e.target.value);\n      onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return (\n    <div className={styles.searchBar}>\n      <input value={searchValue} onChange={_onChange} placeholder=\"Search...\" />\n      <SearchOutlined className={styles.searchIcon} />\n    </div>\n  );\n}\n","import moment, { Moment } from \"moment\";\nimport React, { memo, useCallback } from \"react\";\nimport \"./TimelinePanel.scss\";\n\ninterface TimelinePanelProps {\n  date?: Moment;\n  onChange: (date: Moment) => void;\n  minDate?: Moment;\n  maxDate?: Moment;\n}\n\nfunction TimelinePanel({\n  date = moment(),\n  onChange,\n  minDate,\n  maxDate,\n}: TimelinePanelProps) {\n  const updateValue = useCallback(\n    (e) => {\n      const newDate = date.clone().dayOfYear(+e.currentTarget.value);\n      return onChange(newDate);\n    },\n    [date, onChange]\n  );\n\n  return (\n    <div className=\"timeline-panel\" data-testid=\"timeline-panel\">\n      <label htmlFor=\"timeline\">{date.format(\"LL\")}</label>\n      <input\n        id=\"timeline\"\n        className=\"range\"\n        type=\"range\"\n        value={date.dayOfYear()}\n        step={1}\n        min={minDate?.dayOfYear()}\n        max={maxDate?.dayOfYear()}\n        onChange={updateValue}\n      />\n    </div>\n  );\n}\n\nexport default memo(TimelinePanel);\n","import React from \"react\";\nimport { SortIndicator, TableHeaderProps } from \"react-virtualized\";\nimport styles from \"./CountriesTable.module.scss\";\n\nexport function headerRenderer({\n  dataKey,\n  label,\n  sortBy,\n  sortDirection,\n}: TableHeaderProps): React.ReactNode {\n  return (\n    <div key={dataKey} className={styles.headerCol}>\n      <span>{label}</span>\n      <span>\n        {sortBy === dataKey && <SortIndicator sortDirection={sortDirection} />}\n      </span>\n    </div>\n  );\n}\n","import { Star, StarBorder } from \"@material-ui/icons\";\nimport clsx from \"clsx\";\nimport _ from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AutoSizer, Column, SortDirectionType, Table } from \"react-virtualized\";\nimport \"react-virtualized/styles.css\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport usePrevious from \"../../common/hooks/usePrevious\";\nimport { HashMap, Nullable } from \"../../genericTypes\";\nimport {\n  selectFavoriteCountries,\n  selectFilteredAndOrderedCountries,\n  toggleFavorite,\n  updateFavoriteCountries,\n} from \"../countries/countriesSlice\";\nimport { Country, Status } from \"../countries/countriesTypes\";\nimport { setViewport } from \"../map/mapSlice\";\nimport {\n  selectFilterBy,\n  selectIsTableVisibleOnMobile,\n  selectMomentTimelineDate,\n  selectSortBy,\n  selectSortDirection,\n  setFilterBy,\n  sort,\n  toggleTableVisibility,\n} from \"../sideBar/sideBarSlice\";\nimport { FilterBy } from \"../sideBar/sideBarTypes\";\nimport styles from \"./CountriesTable.module.scss\";\nimport { headerRenderer } from \"./CountriesTableHeader\";\n\nconst FAVORITE_COUNTRIES = \"favoriteCountries\";\n\nexport function CountriesTable() {\n  const dispatch = useDispatch();\n  const countries: Country[] = useSelector(selectFilteredAndOrderedCountries);\n  const filterBy: FilterBy = useSelector(selectFilterBy);\n  const favCountries: HashMap<boolean> = useSelector(selectFavoriteCountries);\n  const prevFavCountries: HashMap<boolean> = usePrevious<HashMap<boolean>>(\n    favCountries\n  );\n  const date: string = useSelector(selectMomentTimelineDate).format(\n    SHORT_DATE_FORMAT\n  );\n  const sortBy: string = useSelector(selectSortBy);\n  const sortDirection: SortDirectionType = useSelector(selectSortDirection);\n  const isTableVisibleOnMobile: boolean = useSelector(\n    selectIsTableVisibleOnMobile\n  );\n\n  useEffect(() => {\n    try {\n      const favoriteCountriesJson: Nullable<string> = localStorage.getItem(\n        FAVORITE_COUNTRIES\n      );\n\n      if (favoriteCountriesJson) {\n        const favoriteCountries = JSON.parse(favoriteCountriesJson) as HashMap<\n          boolean\n        >;\n        dispatch(updateFavoriteCountries(favoriteCountries));\n      }\n    } catch (ex) {\n      // TODO: show some error message\n      console.warn(ex);\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (prevFavCountries && !_.isEqual(favCountries, prevFavCountries)) {\n      try {\n        localStorage.setItem(FAVORITE_COUNTRIES, JSON.stringify(favCountries));\n      } catch (ex) {\n        // TODO: show some error message\n        console.warn(ex);\n      }\n    }\n  }, [favCountries, prevFavCountries]);\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <div\n        className={clsx(\n          styles.container,\n          !isTableVisibleOnMobile && styles.hiddenContainer\n        )}\n      >\n        <AutoSizer>\n          {({ width, height }) => {\n            const indexWidth: number = 30;\n            const favWidth: number = 50;\n            const widthWithoutIndexAndFav =\n              (width - (indexWidth + favWidth)) / 100;\n            const colWidth = widthWithoutIndexAndFav * 20;\n            const countryWidth = widthWithoutIndexAndFav * 20;\n\n            return (\n              <Table\n                width={width}\n                height={height}\n                headerHeight={40}\n                rowHeight={50}\n                rowCount={countries.length}\n                rowClassName={rowClassName}\n                rowGetter={({ index }) => countries[index]}\n                onRowClick={({ rowData }: { rowData: Country }) => {\n                  if (isTableVisibleOnMobile) {\n                    dispatch(toggleTableVisibility());\n                  }\n\n                  dispatch(\n                    setViewport({\n                      longitude: rowData.coordinates.longitude,\n                      latitude: rowData.coordinates.latitude,\n                      zoom: 6,\n                    })\n                  );\n                }}\n                sort={({ sortBy, sortDirection }) =>\n                  dispatch(sort({ sortBy, sortDirection }))\n                }\n                sortBy={sortBy}\n                sortDirection={sortDirection}\n              >\n                <Column\n                  label=\"#\"\n                  dataKey=\"index\"\n                  disableSort\n                  width={indexWidth}\n                  headerRenderer={headerRenderer}\n                />\n                <Column\n                  width={countryWidth}\n                  className={styles.countryCol}\n                  label=\"Country\"\n                  dataKey=\"country\"\n                  defaultSortDirection=\"ASC\"\n                  headerRenderer={headerRenderer}\n                />\n                {[\n                  { label: \"Confirmed\", status: Status.Confirmed },\n                  { label: \"Recovered\", status: Status.Recovered },\n                  { label: \"Deaths\", status: Status.Deaths },\n                  { label: \"Active\", status: Status.Active },\n                ].map((column) => (\n                  <Column\n                    key={column.status}\n                    label={column.label}\n                    dataKey={column.status}\n                    defaultSortDirection=\"DESC\"\n                    width={colWidth}\n                    headerRenderer={headerRenderer}\n                    cellDataGetter={({ dataKey, rowData }) =>\n                      rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                    }\n                  />\n                ))}\n                <Column\n                  label=\"\"\n                  dataKey=\"favorite\"\n                  disableSort\n                  width={favWidth}\n                  headerRenderer={() => {\n                    const StarIcon = filterBy.favorite ? Star : StarBorder;\n\n                    return (\n                      <StarIcon\n                        className={styles.favoriteIcon}\n                        data-testid=\"filter-by-favorite\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          dispatch(\n                            setFilterBy({\n                              ...filterBy,\n                              favorite: !filterBy.favorite,\n                            })\n                          );\n                        }}\n                      />\n                    );\n                  }}\n                  cellRenderer={({ rowData }) => {\n                    const StarIcon = favCountries[rowData.country]\n                      ? Star\n                      : StarBorder;\n\n                    return (\n                      <StarIcon\n                        className={styles.favoriteIcon}\n                        data-testid=\"toggle-favorite\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          dispatch(toggleFavorite(rowData.country));\n                        }}\n                      />\n                    );\n                  }}\n                />\n              </Table>\n            );\n          }}\n        </AutoSizer>\n      </div>\n      <button\n        className={styles.toggleTable}\n        onClick={() => dispatch(toggleTableVisibility())}\n      >\n        {`${isTableVisibleOnMobile ? \"Hide\" : \"Show\"} table`}\n      </button>\n    </div>\n  );\n}\n\nfunction rowClassName({ index }: { index: number }): string {\n  if (index >= 0) {\n    return index % 2 ? styles.evenRow : styles.oddRow;\n  }\n\n  return styles.headerRow;\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function usePrevious<T>(value: T): T {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current as T;\n}\n","import clsx from \"clsx\";\nimport React from \"react\";\nimport styles from \"./SideBar.module.css\";\n\ninterface SideBarTotalCount {\n  label: string;\n  quantity: number;\n  activeColor: string;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport function SideBarTotalCount({\n  label,\n  quantity,\n  activeColor,\n  isActive,\n  onClick,\n}: SideBarTotalCount) {\n  return (\n    <div\n      className={clsx(styles.totalCount, isActive && styles.totalCountActive)}\n      style={isActive ? { color: activeColor } : {}}\n      onClick={onClick}\n    >\n      <div className={styles.totalCountLabel} data-testid=\"total-count-label\">\n        {label}\n      </div>\n      <div\n        className={styles.totalCountTotalQuantity}\n        data-testid=\"total-count-value\"\n      >\n        {quantity.toLocaleString()}\n      </div>\n    </div>\n  );\n}\n","import clsx from \"clsx\";\nimport moment, { Moment } from \"moment\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SearchBar } from \"../../components/searchBar/SearchBar\";\nimport TimelinePanel from \"../../components/timelinePanel/TimelinePanel\";\nimport {\n  selectFilteredStartTimelineDate,\n  selectFilteredSumData,\n} from \"../countries/countriesSlice\";\nimport { Status } from \"../countries/countriesTypes\";\nimport { CountriesTable } from \"../countriesTable/CountriesTable\";\nimport { COLORS_BY_FILTER_TYPE } from \"../map/mapUtils\";\nimport styles from \"./SideBar.module.css\";\nimport {\n  selectFilterBy,\n  selectIsTableVisibleOnMobile,\n  selectMomentTimelineDate,\n  setFilterBy,\n  setSearchValue,\n  setTimelineDate,\n} from \"./sideBarSlice\";\nimport { SideBarTotalCount } from \"./SideBarTotalCount\";\nimport { FilterBy } from \"./sideBarTypes\";\n\nexport function SideBar() {\n  const dispatch = useDispatch();\n  const date: Moment = useSelector(selectMomentTimelineDate);\n  const startDate: Moment = useSelector(selectFilteredStartTimelineDate);\n  const filterBy: FilterBy = useSelector(selectFilterBy);\n  const sumData = useSelector(selectFilteredSumData);\n  const isTableVisibleOnMobile: boolean = useSelector(\n    selectIsTableVisibleOnMobile\n  );\n  const totals = [\n    { label: \"Confirmed\", status: Status.Confirmed },\n    { label: \"Recovered\", status: Status.Recovered },\n    { label: \"Deaths\", status: Status.Deaths },\n    { label: \"Active\", status: Status.Active },\n  ];\n\n  return (\n    <div\n      className={clsx(styles.sideBar, isTableVisibleOnMobile && styles.open)}\n    >\n      <div className={styles.header}>\n        {totals.map(({ label, status }) => (\n          <SideBarTotalCount\n            key={status}\n            label={label}\n            quantity={sumData[status]}\n            activeColor={COLORS_BY_FILTER_TYPE[filterBy.status]}\n            isActive={filterBy.status === status}\n            onClick={() =>\n              dispatch(setFilterBy({ status, favorite: filterBy.favorite }))\n            }\n          />\n        ))}\n      </div>\n      <TimelinePanel\n        date={moment(date)}\n        onChange={(date) => dispatch(setTimelineDate(date.format()))}\n        minDate={startDate}\n        maxDate={moment()}\n      />\n      <SearchBar\n        onChange={(searchValue: string) =>\n          dispatch(setSearchValue(searchValue))\n        }\n      />\n      <CountriesTable />\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ThemeContextProvider } from \"../common/theme/ThemeContext\";\nimport { fetchCountries } from \"../features/countries/countriesSlice\";\nimport Map from \"../features/map/Map\";\nimport { SideBar } from \"../features/sideBar/SideBar\";\nimport \"./App.css\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCountries());\n  }, [dispatch]);\n\n  return (\n    <ThemeContextProvider>\n      <div className=\"App\">\n        <SideBar />\n        <Map />\n      </div>\n    </ThemeContextProvider>\n  );\n}\n\nexport default App;\n","import {\n  Action,\n  configureStore,\n  getDefaultMiddleware,\n  ThunkAction,\n} from \"@reduxjs/toolkit\";\nimport countries from \"../features/countries/countriesSlice\";\nimport map from \"../features/map/mapSlice\";\nimport sideBar from \"../features/sideBar/sideBarSlice\";\n\nexport const storeConfig = {\n  reducer: {\n    countries,\n    map,\n    sideBar,\n  },\n  middleware: getDefaultMiddleware({\n    immutableCheck: false,\n    serializableCheck: false,\n  }),\n};\n\nexport const store = configureStore(storeConfig);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./app/App\";\nimport { store } from \"./app/store\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountriesTable_container__1oVjo\",\"hiddenContainer\":\"CountriesTable_hiddenContainer__3NqiL\",\"headerRow\":\"CountriesTable_headerRow__2Vc_X\",\"evenRow\":\"CountriesTable_evenRow__2A5TA\",\"oddRow\":\"CountriesTable_oddRow__2S4nV\",\"headerCol\":\"CountriesTable_headerCol__1v3XC\",\"countryCol\":\"CountriesTable_countryCol__3D66T\",\"favoriteIcon\":\"CountriesTable_favoriteIcon__2h8jb\",\"toggleTable\":\"CountriesTable_toggleTable__3_2VX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBar\":\"SideBar_sideBar__3wXsx\",\"open\":\"SideBar_open__EKK0f\",\"header\":\"SideBar_header__1g25-\",\"totalCount\":\"SideBar_totalCount__3igL0\",\"totalCountLabel\":\"SideBar_totalCountLabel__1ys8g\",\"totalCountTotalQuantity\":\"SideBar_totalCountTotalQuantity__p9LpH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"themeSwitch\":\"ThemeSwitch_themeSwitch__1QWdi\",\"icon\":\"ThemeSwitch_icon__3Wdqm\",\"iconDark\":\"ThemeSwitch_iconDark___vnup\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"SearchBar_searchBar__3WxVo\",\"searchIcon\":\"SearchBar_searchIcon__1voj6\"};"],"sourceRoot":""}