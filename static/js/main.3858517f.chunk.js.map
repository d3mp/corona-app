{"version":3,"sources":["features/countries/countriesTypes.ts","contexts/TabsContext.tsx","features/countries/countriesUtils.ts","common/constants/global.ts","api/corona.ts","features/sideBar/sideBarSlice.ts","features/countries/countriesSlice.ts","components/TimelinePanel/timleinePanel.styles.ts","components/TimelinePanel/TimelinePanel.tsx","components/BottomTabs/bottomTabs.styles.ts","components/BottomTabs/BottomTabs.tsx","components/TopBar/topBar.styles.ts","components/TopBar/TopBar.tsx","features/map/mapUtils.ts","components/Tooltip/TooltipRow.tsx","components/Tooltip/Tooltip.tsx","features/sideBar/sideBar.styles.ts","features/map/map.styles.ts","features/map/mapSlice.ts","features/map/Map.tsx","components/TotalTabs/TotalTabs.styles.ts","components/TotalTabs/TotalTabs.tsx","components/FavoriteButton/FavoriteButton.tsx","components/TableBodyCell/tableBodyCell.styles.ts","components/TableBodyCell/TableBodyCell.tsx","components/TableHeaderCell/tableHeaderCell.styles.ts","components/TableHeaderCell/TableHeaderCell.tsx","features/countriesTable/countriesTable.styles.ts","features/countriesTable/CountriesTable.tsx","features/sideBar/SideBar.tsx","app/app.styles.ts","app/App.tsx","app/persistConfig.ts","app/rootReducer.ts","serviceWorker.ts","app/store.ts","index.tsx"],"names":["Status","TabsContext","createContext","tab","setTab","defaultTimeline","Active","Confirmed","Deaths","Recovered","mergeCountriesWithHistoricalData","response","countriesByName","reduce","value","name","date","moment","utc","updated","format","country","province","coordinates","latitude","countryInfo","lat","longitude","long","timeline","cases","deaths","recovered","globalToHistoricalNames","toLowerCase","getCountriesByHistoricalName","historicalCountriesWithProvincesByName","prev","curr","timeline1","timeline2","convertHistoricalNameToGlobal","Object","keys","prevDates","active","shouldSummarizeProvinces","includes","status","timelineDates1","timelineDates2","dates","length","getHistoricalCountriesWithProvincesByGlobalName","values","countries","historicalCountry","console","warn","removeEmptyDays","statuses","Palestine","Myanmar","Réunion","Macao","Curaçao","key","API_URL","COUNTRIES_URL","HISTORICAL_URL","getCountries","a","urls","Promise","all","map","url","fetch","json","initialState","filterBy","favorite","searchValue","sortBy","sortDirection","SortDirection","DESC","timelineDate","isTableVisibleOnMobile","sideBarSlice","createSlice","reducers","setFilterBy","state","action","payload","setTimelineDate","setSearchValue","sort","toggleTableVisibility","selectSortBy","sideBar","selectSortDirection","selectFilterBy","selectMomentTimelineDate","createSelector","actions","fetchCountries","createAsyncThunk","CoronaAPI","countriesSlice","loading","favoriteCountries","error","toggleFavorite","updateFavoriteCountries","extraReducers","builder","addCase","pending","fulfilled","rejected","selectCountriesByName","selectFavoriteCountries","selectCountries","selectFilteredCountries","searchValueLowerCase","filter","selectFilteredWithTimelineCountries","confirmed","selectFilteredAndOrderedCountries","isSortByStatus","_","orderBy","ASC","index","selectFilteredSumData","total","selectlFilteredCountriesFC","type","features","geometry","properties","selectFilteredStartTimelineDate","startDate","confirmedKeys","minDate","isAfter","set","hours","minutes","seconds","milliseconds","makeStyles","theme","root","minHeight","padding","spacing","paddingLeft","paddingRight","backgroundColor","palette","background","paper","borderTopWidth","borderTopColor","divider","borderTopStyle","zIndex","drawer","paddingTop","paddingBottom","top","label","color","text","primary","fontSize","typography","memo","onChange","maxDate","classes","useStyles","updateValue","useCallback","e","newDate","clone","dayOfYear","marks","useMemo","i","iDate","push","getMarks","className","Typography","data-testid","Slider","aria-labelledby","step","min","max","valueLabelFormat","valueLabelDisplay","boxShadow","borderRadius","breakpoints","up","display","tabs","flex","tabLabel","textTransform","indicator","panels","height","position","panel","BottomTabs","dispatch","useDispatch","useTheme","useState","setValue","handleChange","newValue","largeScreen","useMediaQuery","useSelector","Provider","idx","hidden","Paper","Tabs","centered","TabIndicatorProps","Tab","Container","Box","appBar","toolbar","menuButton","marginRight","title","flexGrow","search","shape","fade","common","white","marginLeft","width","searchIcon","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","transition","transitions","create","TopBar","AppBar","Toolbar","variant","noWrap","InputBase","input","target","placeholder","inputProps","COLORS_BY_FILTER_TYPE","getTimelineExpression","operator","tooltipRow","whiteSpace","textAlign","quantityChange","verticalAlign","TooltipRow","perDay","component","align","style","toLocaleString","isNaN","tooltip","maxWidth","margin","borderColor","body2","fontWeight","fontWeightBold","Tooltip","hoveredCountry","currentDate","prevDate","subtract","tooltipRows","offsetY","left","offsetX","body","flexDirection","flexShrink","down","drawerPaper","timelineHeight","right","mapSlice","viewport","zoom","setViewport","selectViewPort","inOurPairs","steps","getInOurPais","Map","mapRef","useRef","initialViewport","setHoveredCountry","featureCollection","currentMoment","hasCasesExpression","getCasesExpression","onHover","srcEvent","feature","find","f","layer","id","useEffect","transitionInterpolator","FlyToInterpolator","speed","transitionDuration","ref","mapStyle","mapboxApiAccessToken","process","onViewportChange","nextViewport","data","paint","layout","borderBottomWidth","borderBottomColor","borderBottomStyle","minWidth","tabSubLabel","body1","lineHeight","TotalTabs","tabTextColor","tabIndicatorColor","findIndex","item","textColor","FavoriteButton","React","isFavorite","onClick","IconButton","aria-label","size","Star","StarBorder","tableCell","boxSizing","cellData","dataKey","TableCell","tableHeaderCell","userSelect","disableSort","clsx","TableSortLabel","direction","rowColumn","cursor","hover","doubleLine","wordBreak","WebkitLineClamp","WebkitBoxOrient","overflow","headerRenderer","props","cellRenderer","CountriesTable","tabsContext","useContext","onFavoriteHeaderClick","stopPropagation","favoriteHeaderRenderer","favoriteCellRenderer","rowData","widthWithoutIndexAndFav","colWidth","countryWidth","headerHeight","headerClassName","overscanRowCount","rowHeight","rowCount","rowClassName","rowGetter","onRowClick","setTimeout","defaultSortDirection","column","cellDataGetter","SideBar","sumData","Drawer","anchor","App","prefersDarkMode","createMuiTheme","overrides","MuiCssBaseline","outline","ThemeProvider","CssBaseline","saveSubsetFilter","createFilter","persistConfig","storage","whitelist","transforms","rootReducer","persistCombineReducers","Boolean","window","location","hostname","match","storeConfig","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","store","configureStore","persistor","persistStore","getStore","ReactGA","initialize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3858517f.chunk.js","sourcesContent":["import { HashMap, Nullable } from \"../../genericTypes\";\n\nexport enum Status {\n  Active = \"active\",\n  Confirmed = \"confirmed\",\n  Deaths = \"deaths\",\n  Recovered = \"recovered\",\n}\n\nexport interface Country {\n  country: string;\n  province: Nullable<string>;\n  coordinates: {\n    latitude: number;\n    longitude: number;\n  };\n  timeline: Timeline;\n  updated?: Date;\n}\n\nexport type CountriesByName = HashMap<Country>;\nexport type TimelineDates = HashMap<number>;\n\nexport interface Timeline {\n  [Status.Active]: TimelineDates;\n  [Status.Confirmed]: TimelineDates;\n  [Status.Deaths]: TimelineDates;\n  [Status.Recovered]: TimelineDates;\n}\n\nexport interface Timeline {\n  [Status.Active]: HashMap<number>;\n  [Status.Confirmed]: HashMap<number>;\n  [Status.Deaths]: HashMap<number>;\n  [Status.Recovered]: HashMap<number>;\n}\n\nexport interface TotalByCountry {\n  active: number;\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n}\n","import { createContext } from \"react\";\n\nexport type TabsContext = {\n  tab: number;\n  setTab: (tab: number) => void;\n};\n\nexport const TabsContext = createContext<TabsContext>({\n  tab: 0,\n  setTab: () => null,\n});\n","import moment from \"moment\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport {\n  CountriesByName,\n  Country,\n  Status,\n  Timeline,\n  TimelineDates,\n} from \"./countriesTypes\";\n\nconst defaultTimeline: Timeline = {\n  [Status.Active]: {},\n  [Status.Confirmed]: {},\n  [Status.Deaths]: {},\n  [Status.Recovered]: {},\n};\n\n/**\n * Returns an array of merged countries with timelines\n * @param response\n */\nexport function mergeCountriesWithHistoricalData(\n  response: any[]\n): CountriesByName {\n  const countriesByName: CountriesByName = getCountriesByHistoricalName(\n    response[0]\n  );\n  const historicalCountriesWithProvincesByName: CountriesByName = getHistoricalCountriesWithProvincesByGlobalName(\n    response[1],\n    countriesByName\n  );\n\n  return Object.values(countriesByName).reduce(\n    (countries: CountriesByName, country: Country) => {\n      const historicalCountry =\n        historicalCountriesWithProvincesByName[country.country];\n      const timeline: Timeline = historicalCountry\n        ? historicalCountry.timeline\n        : defaultTimeline;\n\n      if (!Object.keys(timeline[Status.Confirmed]).length) {\n        console.warn(\"countries without timeline\", country);\n      }\n\n      return {\n        ...countries,\n        [country.country]: {\n          ...country,\n          timeline: removeEmptyDays({\n            [Status.Active]: {\n              ...timeline[Status.Active],\n              ...country.timeline[Status.Active],\n            },\n            [Status.Confirmed]: {\n              ...timeline[Status.Confirmed],\n              ...country.timeline[Status.Confirmed],\n            },\n            [Status.Deaths]: {\n              ...timeline[Status.Deaths],\n              ...country.timeline[Status.Deaths],\n            },\n            [Status.Recovered]: {\n              ...timeline[Status.Recovered],\n              ...country.timeline[Status.Recovered],\n            },\n          }),\n        },\n      };\n    },\n    {}\n  );\n}\n\n/**\n * Returns map of countrise by historical name\n * @param response\n */\nfunction getCountriesByHistoricalName(response: []): CountriesByName {\n  return response.reduce((countriesByName: CountriesByName, value: any) => {\n    const date = moment.utc(value.updated).format(SHORT_DATE_FORMAT);\n    const country: Country = {\n      country: value.country,\n      province: null,\n      coordinates: {\n        latitude: value.countryInfo.lat,\n        longitude: value.countryInfo.long,\n      },\n      timeline: {\n        [Status.Active]: {\n          [date]: value.cases - value.deaths - value.recovered,\n        },\n        [Status.Confirmed]: {\n          [date]: value.cases,\n        },\n        [Status.Deaths]: {\n          [date]: value.deaths,\n        },\n        [Status.Recovered]: {\n          [date]: value.recovered,\n        },\n      },\n      updated: value.updated,\n    };\n\n    return {\n      ...countriesByName,\n      [convertGlobalNameToHistorical(country.country)]: country,\n    };\n  }, {});\n}\n\n/**\n * Returns map of historical countries and provinces by global name\n * @param response\n * @param countriesByName\n */\nfunction getHistoricalCountriesWithProvincesByGlobalName(\n  response: [],\n  countriesByName: CountriesByName\n): CountriesByName {\n  return response.reduce((prev: CountriesByName, curr: any) => {\n    const country: Country = {\n      country:\n        countriesByName[curr.country]?.country ||\n        convertHistoricalNameToGlobal(curr.country),\n      province:\n        countriesByName[curr.province]?.country ||\n        convertHistoricalNameToGlobal(curr.province),\n      coordinates: {\n        latitude: 0,\n        longitude: 0,\n      },\n      timeline: {\n        [Status.Active]: Object.keys(curr.timeline.cases).reduce(\n          (prevDates: TimelineDates, date: string) => {\n            const active: number =\n              curr.timeline.cases[date] -\n              curr.timeline.deaths[date] -\n              curr.timeline.recovered[date];\n\n            prevDates[date] = active;\n\n            return prevDates;\n          },\n          {}\n        ),\n        [Status.Confirmed]: curr.timeline.cases,\n        [Status.Deaths]: curr.timeline.deaths,\n        [Status.Recovered]: curr.timeline.recovered,\n      },\n    };\n    const shouldSummarizeProvinces: boolean = [\n      \"Australia\",\n      \"China\",\n      \"Canada\",\n    ].includes(country.country);\n\n    if (!prev[country.country]) {\n      if (!country.province || shouldSummarizeProvinces) {\n        prev[country.country] = {\n          ...country,\n          province: null,\n          timeline: country.province ? defaultTimeline : country.timeline,\n        };\n      }\n    }\n\n    if (country.province) {\n      prev[country.province] = country;\n    }\n\n    if (prev[country.country] && country.province) {\n      if (shouldSummarizeProvinces) {\n        prev[country.country].timeline = sumTimelines(\n          prev[country.country].timeline,\n          country.timeline\n        );\n      }\n    }\n\n    return prev;\n  }, {});\n}\n\n/**\n * Returns Timeline without empty days to optimize store size\n * @param timeline\n */\nfunction removeEmptyDays(timeline: Timeline): Timeline {\n  const statuses = Object.keys(timeline) as Status[];\n\n  return statuses.reduce((statuses: Timeline, status: Status) => {\n    return {\n      ...statuses,\n      [status]: Object.keys(timeline[status]).reduce(\n        (dates: TimelineDates, date: string) => {\n          if (timeline[status][date]) {\n            dates[date] = timeline[status][date];\n          }\n\n          return dates;\n        },\n        {}\n      ),\n    };\n  }, defaultTimeline);\n}\n\n/**\n * Returns summarized timelines\n * @param timeline1\n * @param timeline2\n */\nfunction sumTimelines(timeline1: Timeline, timeline2: Timeline) {\n  const statuses = Object.keys(timeline1) as Status[];\n\n  return statuses.reduce((timeline: Timeline, status: Status) => {\n    const timelineDates1 = Object.keys(timeline1[status]);\n    const timelineDates2 = Object.keys(timeline2[status]);\n    const dates = timelineDates1.length ? timelineDates1 : timelineDates2;\n\n    return {\n      ...timeline,\n      [status]: dates.reduce((dates, date: string) => {\n        return {\n          ...dates,\n          [date]:\n            (timeline1[status][date] || 0) + (timeline2[status][date] || 0),\n        };\n      }, {}),\n    };\n  }, defaultTimeline);\n}\n\nconst globalToHistoricalNames: { [name: string]: string } = {\n  \"Côte d'Ivoire\": \"Cote d'Ivoire\",\n  Palestine: \"West Bank and Gaza\",\n  \"Lao People's Democratic Republic\": 'Lao People\"s Democratic Republic',\n  Myanmar: \"Burma\",\n  \"Holy See (Vatican City State)\": \"Holy See\",\n  Réunion: \"Reunion\",\n  Macao: \"macau\",\n  \"Saint Martin\": \"st martin\",\n  \"St. Barth\": \"saint barthelemy\",\n  \"Saint Pierre Miquelon\": \"saint pierre and miquelon\",\n  Curaçao: \"curacao\",\n  \"Caribbean Netherlands\": \"bonaire, sint eustatius and saba\",\n};\n\nfunction convertGlobalNameToHistorical(name: string) {\n  return (globalToHistoricalNames[name] || name).toLowerCase();\n}\n\nfunction convertHistoricalNameToGlobal(name: string) {\n  const historicalToGlobalNames: {\n    [name: string]: string;\n  } = Object.keys(globalToHistoricalNames).reduce(\n    (prev, key) => ({ ...prev, [globalToHistoricalNames[key]]: key }),\n    {}\n  );\n\n  return historicalToGlobalNames[name] || name;\n}\n","export const SHORT_DATE_FORMAT = \"M/D/YY\";\n","import { CountriesByName } from \"../features/countries/countriesTypes\";\nimport { mergeCountriesWithHistoricalData } from \"../features/countries/countriesUtils\";\n\nexport const API_URL = \"https://corona.lmao.ninja\";\nexport const COUNTRIES_URL = `${API_URL}/v2/countries`;\nexport const HISTORICAL_URL = `${API_URL}/v2/historical?lastdays=all`;\n\nexport async function getCountries(): Promise<CountriesByName> {\n  const urls: string[] = [COUNTRIES_URL, HISTORICAL_URL];\n  const response: any[] = await Promise.all(\n    urls.map(async (url: string) => {\n      const response = await fetch(url);\n      return response.json();\n    })\n  );\n\n  return mergeCountriesWithHistoricalData(response);\n}\n","import { createSelector, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport moment from \"moment\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport { RootState } from \"../../app/rootReducer\";\nimport { Status } from \"../countries/countriesTypes\";\nimport { FilterBy } from \"./sideBarTypes\";\n\ninterface SideBarState {\n  filterBy: FilterBy;\n  searchValue: string;\n  sortBy: string;\n  sortDirection: SortDirectionType;\n  timelineDate: string; // ISO format\n  isTableVisibleOnMobile: boolean;\n}\n\nconst initialState: SideBarState = {\n  filterBy: {\n    status: Status.Confirmed,\n    favorite: false,\n  },\n  searchValue: \"\",\n  sortBy: Status.Confirmed,\n  sortDirection: SortDirection.DESC,\n  timelineDate: moment().format(),\n  isTableVisibleOnMobile: false,\n};\n\nexport const sideBarSlice = createSlice({\n  name: \"sideBar\",\n  initialState,\n  reducers: {\n    setFilterBy: (state, action: PayloadAction<FilterBy>) => {\n      state.filterBy = action.payload;\n    },\n    setTimelineDate: (state, action: PayloadAction<string>) => {\n      state.timelineDate = action.payload;\n    },\n    setSearchValue: (state, action: PayloadAction<string>) => {\n      state.searchValue = action.payload;\n    },\n    sort: (\n      state,\n      action: PayloadAction<{\n        sortBy: string;\n        sortDirection: SortDirectionType;\n      }>\n    ) => {\n      state.sortBy = action.payload.sortBy;\n      state.sortDirection = action.payload.sortDirection;\n    },\n    toggleTableVisibility: (state) => {\n      state.isTableVisibleOnMobile = !state.isTableVisibleOnMobile;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectSearchValue = (state: RootState) =>\n  state.sideBar.searchValue;\nexport const selectSortBy = (state: RootState) => state.sideBar.sortBy;\nexport const selectSortDirection = (state: RootState) =>\n  state.sideBar.sortDirection;\nexport const selectTimelineDate = (state: RootState) =>\n  state.sideBar.timelineDate;\nexport const selectFilterBy = (state: RootState) => state.sideBar.filterBy;\nexport const selectIsTableVisibleOnMobile = (state: RootState) =>\n  state.sideBar.isTableVisibleOnMobile;\n\nexport const selectMomentTimelineDate = createSelector(\n  [selectTimelineDate],\n  (timelineDate: string) => moment(timelineDate)\n);\n\nexport const {\n  setFilterBy,\n  setTimelineDate,\n  setSearchValue,\n  sort,\n  toggleTableVisibility,\n} = sideBarSlice.actions;\nexport default sideBarSlice.reducer;\n","import {\n  createAsyncThunk,\n  createSelector,\n  createSlice,\n  PayloadAction,\n  SerializedError,\n} from \"@reduxjs/toolkit\";\nimport _ from \"lodash\";\nimport moment, { Moment } from \"moment\";\nimport { SortDirection, SortDirectionType } from \"react-virtualized\";\nimport * as CoronaAPI from \"../../api/corona\";\nimport { RootState } from \"../../app/rootReducer\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { HashMap, Nullable } from \"../../genericTypes\";\nimport {\n  selectFilterBy,\n  selectMomentTimelineDate,\n  selectSearchValue,\n  selectSortBy,\n  selectSortDirection,\n} from \"../sideBar/sideBarSlice\";\nimport { FilterBy } from \"../sideBar/sideBarTypes\";\nimport {\n  CountriesByName,\n  Country,\n  Status,\n  TotalByCountry,\n} from \"./countriesTypes\";\n\n// Async actions\n\nexport const fetchCountries = createAsyncThunk(\n  \"countries/fetchCountries\",\n  async () => await CoronaAPI.getCountries()\n);\n\n// Slice\n\ninterface CountriesState {\n  loading: \"idle\" | \"pending\" | \"succeeded\" | \"failed\";\n  countriesByName: CountriesByName;\n  favoriteCountries: HashMap<boolean>;\n  error: Nullable<SerializedError>;\n}\n\nconst initialState: CountriesState = {\n  loading: \"idle\",\n  countriesByName: {},\n  favoriteCountries: {},\n  error: null,\n};\n\nexport const countriesSlice = createSlice({\n  name: \"countries\",\n  initialState,\n  reducers: {\n    toggleFavorite: (state, action: PayloadAction<string>) => {\n      if (state.favoriteCountries[action.payload]) {\n        delete state.favoriteCountries[action.payload];\n      } else {\n        state.favoriteCountries[action.payload] = true;\n      }\n    },\n    updateFavoriteCountries: (\n      state,\n      action: PayloadAction<HashMap<boolean>>\n    ) => {\n      state.favoriteCountries = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCountries.pending, (state) => {\n        if (state.loading === \"idle\") {\n          state.loading = \"pending\";\n        }\n      })\n      .addCase(\n        fetchCountries.fulfilled,\n        (state, action: PayloadAction<CountriesByName>) => {\n          if (state.loading === \"pending\") {\n            state.loading = \"idle\";\n          }\n\n          state.countriesByName = action.payload;\n        }\n      )\n      .addCase(fetchCountries.rejected, (state, action) => {\n        state.error = action.error;\n      });\n  },\n});\n\n// Selectors\n\nexport const selectCountriesByName = (state: RootState) =>\n  state.countries.countriesByName;\n\nexport const selectFavoriteCountries = (state: RootState) =>\n  state.countries.favoriteCountries;\n\nexport const selectCountries = createSelector(\n  [selectCountriesByName],\n  (countriesByName: CountriesByName) => Object.values(countriesByName)\n);\n\nexport const selectFilteredCountries = createSelector(\n  [selectCountries, selectSearchValue, selectFilterBy, selectFavoriteCountries],\n  (\n    countries: Country[],\n    searchValue: string,\n    filterBy: FilterBy,\n    favoriteCountries: HashMap<boolean>\n  ) => {\n    const searchValueLowerCase = searchValue.toLowerCase();\n    return countries.filter((country: Country) => {\n      // Filter by search\n      if (\n        searchValue &&\n        !country.country.toLowerCase().includes(searchValueLowerCase)\n      ) {\n        return false;\n      }\n\n      // Filter by favorite\n      if (filterBy.favorite && !favoriteCountries[country.country]) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n);\n\nexport const selectFilteredWithTimelineCountries = createSelector(\n  [selectFilteredCountries, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.filter((country: Country) => {\n      return (\n        country.timeline.active[date] ||\n        country.timeline.confirmed[date] ||\n        country.timeline.deaths[date] ||\n        country.timeline.recovered[date]\n      );\n    });\n  }\n);\n\nexport const selectFilteredAndOrderedCountries = createSelector(\n  [\n    selectFilteredWithTimelineCountries,\n    selectMomentTimelineDate,\n    selectSortBy,\n    selectSortDirection,\n  ],\n  (\n    countries: Country[],\n    timelineDate: Moment,\n    sortBy: string,\n    sortDirection: SortDirectionType\n  ) => {\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n    const isSortByStatus = Object.values(Status as any).includes(sortBy);\n\n    return _.orderBy(\n      countries,\n      (country: Country) => {\n        if (isSortByStatus) {\n          return country.timeline[sortBy as Status][date] || 0;\n        }\n\n        return country[sortBy as keyof Country];\n      },\n      sortDirection === SortDirection.ASC ? \"asc\" : \"desc\"\n    ).map((country, index) => ({ ...country, index: index + 1 }));\n  }\n);\n\nexport const selectFilteredSumData = createSelector(\n  [selectFilteredWithTimelineCountries, selectMomentTimelineDate],\n  (countries: Country[], timelineDate: Moment) => {\n    const defaultValues: TotalByCountry = {\n      active: 0,\n      confirmed: 0,\n      deaths: 0,\n      recovered: 0,\n    };\n    const date: string = timelineDate.format(SHORT_DATE_FORMAT);\n\n    return countries.reduce((total: TotalByCountry, country: Country) => {\n      return {\n        active: total.active + (country.timeline.active[date] || 0),\n        confirmed: total.confirmed + (country.timeline.confirmed[date] || 0),\n        deaths: total.deaths + (country.timeline.deaths[date] || 0),\n        recovered: total.recovered + (country.timeline.recovered[date] || 0),\n      };\n    }, defaultValues);\n  }\n);\n\nexport const selectlFilteredCountriesFC = createSelector(\n  [selectFilteredWithTimelineCountries, selectFilterBy],\n  (countries: Country[], filterBy) => {\n    const featuerCollection: GeoJSON.FeatureCollection<\n      GeoJSON.Point,\n      Country\n    > = {\n      type: \"FeatureCollection\",\n      features: countries.map((country) => {\n        const feature: GeoJSON.Feature<GeoJSON.Point, any> = {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [\n              country.coordinates.longitude,\n              country.coordinates.latitude,\n            ],\n          },\n          properties: {\n            country: country.country,\n            // Dates added to the root of properties because otherwise\n            // it will be a JSON and circle hovering will not work\n            ...country.timeline[filterBy.status as Status],\n          },\n        };\n\n        return feature;\n      }),\n    };\n\n    return featuerCollection;\n  }\n);\n\nexport const selectFilteredStartTimelineDate = createSelector(\n  [selectFilteredCountries],\n  (countries: Country[]) => {\n    return countries.reduce(\n      (startDate: Moment, curr: Country) => {\n        const confirmedKeys = Object.keys(curr.timeline[Status.Confirmed]);\n\n        if (confirmedKeys.length) {\n          const minDate = moment(confirmedKeys[0], SHORT_DATE_FORMAT);\n\n          if (startDate.isAfter(minDate)) {\n            return minDate;\n          }\n        }\n\n        return startDate;\n      },\n      moment().set({\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        milliseconds: 0,\n      })\n    );\n  }\n);\n\nexport const {\n  toggleFavorite,\n  updateFavoriteCountries,\n} = countriesSlice.actions;\nexport default countriesSlice.reducer;\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport const timelineHeight: number = 80;\n\nexport default makeStyles((theme: Theme) => ({\n  root: {\n    minHeight: timelineHeight,\n    padding: theme.spacing(1),\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(2),\n    backgroundColor: theme.palette.background.paper,\n    borderTopWidth: 1,\n    borderTopColor: theme.palette.divider,\n    borderTopStyle: \"solid\",\n    zIndex: theme.zIndex.drawer,\n\n    \"& .MuiSlider-root\": {\n      paddingTop: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n    },\n\n    \"@media (pointer: coarse)\": {\n      \"& .MuiSlider-root\": {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n      },\n\n      \"& .MuiSlider-markLabel\": {\n        top: 26,\n      },\n    },\n  },\n  label: {\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.fontSize,\n  },\n}));\n","import { Slider, Typography } from \"@material-ui/core\";\nimport moment, { Moment } from \"moment\";\nimport React, { memo, useCallback, useMemo } from \"react\";\nimport useStyles from \"./timleinePanel.styles\";\n\ninterface TimelinePanelProps {\n  date?: Moment;\n  onChange: (date: Moment) => void;\n  minDate?: Moment;\n  maxDate?: Moment;\n}\n\nfunction TimelinePanel({\n  date = moment(),\n  onChange,\n  minDate,\n  maxDate,\n}: TimelinePanelProps) {\n  const classes = useStyles();\n  const updateValue = useCallback(\n    (e, value) => {\n      const newDate = date.clone().dayOfYear(value);\n      return onChange(newDate);\n    },\n    [date, onChange]\n  );\n\n  const getMarks = (\n    minDate: Moment | undefined,\n    maxDate: Moment | undefined\n  ) => {\n    if (!minDate || !maxDate) return [];\n\n    let dayOfYear: number = maxDate.dayOfYear();\n    let marks = [];\n\n    for (let i = dayOfYear; i > minDate.dayOfYear(); i--) {\n      const iDate = moment().dayOfYear(i);\n\n      if (iDate.date() === 1) {\n        marks.push({\n          value: i,\n          label: iDate.format(\"MMMM\"),\n        });\n      }\n    }\n\n    return marks;\n  };\n\n  const marks = useMemo(\n    () => getMarks(minDate, maxDate),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [minDate?.format(), maxDate?.format()]\n  );\n\n  return (\n    <div className={classes.root}>\n      <Typography className={classes.label} data-testid=\"timeline-label\">\n        {date.format(\"LL\")}\n      </Typography>\n      <Slider\n        data-testid=\"timeline-slider\"\n        aria-labelledby=\"discrete-slider\"\n        step={1}\n        marks={marks}\n        min={minDate?.dayOfYear()}\n        max={maxDate?.dayOfYear()}\n        value={date.dayOfYear()}\n        valueLabelFormat={() => date.format(\"D\")}\n        valueLabelDisplay=\"on\"\n        onChange={updateValue}\n      />\n    </div>\n  );\n}\n\nexport default memo(TimelinePanel);\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport default makeStyles((theme: Theme) => ({\n  root: {\n    boxShadow: \"none\",\n    borderRadius: 0,\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n  tabs: {\n    borderTopWidth: 1,\n    borderTopColor: theme.palette.divider,\n    borderTopStyle: \"solid\",\n  },\n  tab: {\n    flex: 1,\n  },\n  tabLabel: {\n    textTransform: \"capitalize\",\n  },\n  indicator: {\n    top: 0,\n  },\n  panels: {\n    height: \"100%\",\n    position: \"relative\",\n  },\n  panel: {\n    height: 0,\n  },\n}));\n","import {\n  Box,\n  Container,\n  Paper,\n  Tab,\n  Tabs,\n  Theme,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport moment, { Moment } from \"moment\";\nimport React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { TabsContext } from \"../../contexts/TabsContext\";\nimport { selectFilteredStartTimelineDate } from \"../../features/countries/countriesSlice\";\nimport {\n  selectMomentTimelineDate,\n  setTimelineDate,\n} from \"../../features/sideBar/sideBarSlice\";\nimport TimelinePanel from \"../TimelinePanel/TimelinePanel\";\nimport useStyles from \"./bottomTabs.styles\";\n\ntype Tab = {\n  label: string;\n  panel: React.ReactElement;\n};\n\ntype Props = {\n  tabs: Tab[];\n};\n\nconst BottomTabs = ({ tabs }: Props) => {\n  const dispatch = useDispatch();\n  const theme: Theme = useTheme();\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n  const handleChange = useCallback(\n    (e, newValue: number) => setValue(newValue),\n    []\n  );\n  const largeScreen: boolean = useMediaQuery(theme.breakpoints.up(\"md\"));\n  const date: Moment = useSelector(selectMomentTimelineDate);\n  const startDate: Moment = useSelector(selectFilteredStartTimelineDate);\n\n  return (\n    <TabsContext.Provider value={{ tab: value, setTab: setValue }}>\n      <div className={classes.panels}>\n        {tabs.map((tab: Tab, idx) => (\n          <div\n            key={tab.label}\n            className={classes.panel}\n            hidden={!largeScreen && value !== idx}\n          >\n            {tab.panel}\n          </div>\n        ))}\n      </div>\n      <TimelinePanel\n        date={date}\n        onChange={(date) => dispatch(setTimelineDate(date.format()))}\n        minDate={startDate}\n        maxDate={moment().set({\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n          milliseconds: 0,\n        })}\n      />\n      <Paper className={classes.root}>\n        <Tabs\n          className={classes.tabs}\n          value={value}\n          onChange={handleChange}\n          centered\n          TabIndicatorProps={{ className: classes.indicator }}\n        >\n          {tabs.map((tab: Tab) => (\n            <Tab\n              key={tab.label}\n              className={classes.tab}\n              label={\n                <Container>\n                  <Box className={classes.tabLabel}>{tab.label}</Box>\n                </Container>\n              }\n            />\n          ))}\n        </Tabs>\n      </Paper>\n    </TabsContext.Provider>\n  );\n};\n\nexport default BottomTabs;\n","import { fade, makeStyles, Theme } from \"@material-ui/core\";\n\nexport default makeStyles((theme: Theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  tabLabel: {\n    textTransform: \"capitalize\",\n  },\n  toolbar: {},\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"16ch\",\n      \"&:focus\": {\n        width: \"24ch\",\n      },\n    },\n  },\n}));\n","import { AppBar, InputBase, Toolbar, Typography } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setSearchValue } from \"../../features/sideBar/sideBarSlice\";\nimport useStyles from \"./topBar.styles\";\n\nconst TopBar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  return (\n    <AppBar className={classes.appBar} color=\"primary\" position=\"static\">\n      <Toolbar className={classes.toolbar}>\n        <Typography className={classes.title} variant=\"h6\" noWrap>\n          Corona App\n        </Typography>\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n            onChange={(e) => dispatch(setSearchValue(e.target.value))}\n            placeholder=\"Search...\"\n            inputProps={{ \"aria-label\": \"search\" }}\n          />\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default TopBar;\n","import { Status } from \"../countries/countriesTypes\";\n\nexport const COLORS_BY_FILTER_TYPE = {\n  [Status.Confirmed]: \"#FF5733\",\n  [Status.Recovered]: \"#6EB277\",\n  [Status.Deaths]: \"#BD33FF\",\n  [Status.Active]: \"#FF8A33\",\n};\n\n/**\n * Creates an array with input/output paris for interpolate expression\n * @param max\n */\nexport function getInOurPais(max: number = 50000000) {\n  const steps = [0, 1, 5, 10, 50, 100, 500, 1000, 2000];\n  let step = 5000;\n\n  while (step <= max) {\n    steps.push(step);\n\n    if (step < 100000) {\n      step += 5000;\n    } else if (step < 500000) {\n      step += 30000;\n    } else {\n      step += 100000;\n    }\n  }\n\n  return steps.reduce((steps: number[], step: number, index) => {\n    return [...steps, step, index + 2 * 2];\n  }, []);\n}\n\n/**\n * Creates specific expression for getting timeline information from feature property\n * @param operator\n * @param date\n * @param status\n */\nexport function getTimelineExpression(\n  operator: mapboxgl.ExpressionName = \"get\",\n  date: string\n): mapboxgl.Expression {\n  return [operator, date];\n}\n","import { makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Status } from \"../../features/countries/countriesTypes\";\nimport { COLORS_BY_FILTER_TYPE } from \"../../features/map/mapUtils\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  tooltipRow: {\n    display: \"flex\",\n  },\n  label: {\n    flex: 1,\n    paddingTop: theme.spacing(0.3),\n    whiteSpace: \"nowrap\",\n\n    \"&:last-child\": {\n      paddingLeft: theme.spacing(1),\n      textAlign: \"right\",\n    },\n  },\n  quantityChange: {\n    paddingLeft: theme.spacing(0.1),\n    verticalAlign: \"top\",\n  },\n}));\n\ninterface TooltipRowProps {\n  label: string;\n  value: number;\n  perDay: number;\n  status: Status;\n}\n\nconst TooltipRow = ({ label, value, perDay, status }: TooltipRowProps) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.tooltipRow}>\n      <Typography\n        className={classes.label}\n        variant=\"body2\"\n        component=\"span\"\n        data-testid=\"tooltip-label\"\n      >\n        {label}:\n      </Typography>\n      <Typography\n        className={classes.label}\n        align=\"right\"\n        variant=\"body2\"\n        component=\"span\"\n        style={{ color: COLORS_BY_FILTER_TYPE[status] }}\n        data-testid=\"tooltip-value\"\n      >\n        {value?.toLocaleString() || 0}\n        <Typography\n          className={classes.quantityChange}\n          variant=\"caption\"\n          component=\"sup\"\n          data-testid=\"difference\"\n        >\n          {`(${perDay > 0 ? \"+\" : \"\"}${\n            (!isNaN(perDay) && perDay?.toLocaleString()) || 0\n          })`}\n        </Typography>\n      </Typography>\n    </div>\n  );\n};\n\nexport default TooltipRow;\n","import { makeStyles, Paper, Theme, Typography } from \"@material-ui/core\";\nimport { Moment } from \"moment\";\nimport React from \"react\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { Status } from \"../../features/countries/countriesTypes\";\nimport { HoveredCountry } from \"../../features/map/mapTypes\";\nimport { Nullable } from \"../../genericTypes\";\nimport TooltipRow from \"./TooltipRow\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  tooltip: {\n    position: \"absolute\",\n    maxWidth: 400,\n    margin: theme.spacing(1),\n    padding: theme.spacing(2),\n    borderColor: theme.palette.divider,\n    pointerEvents: \"none\",\n  },\n  country: {\n    fontSize: theme.typography.body2.fontSize,\n    fontWeight: theme.typography.fontWeightBold,\n  },\n}));\n\ntype Props = {\n  date: Moment;\n  hoveredCountry?: Nullable<HoveredCountry>;\n};\n\nconst Tooltip = ({ date, hoveredCountry }: Props) => {\n  const classes = useStyles();\n\n  if (hoveredCountry) {\n    const currentDate: string = date.format(SHORT_DATE_FORMAT);\n    const prevDate: string = date\n      .clone()\n      .subtract(1, \"day\")\n      .format(SHORT_DATE_FORMAT);\n    const timeline = hoveredCountry.country.timeline;\n    const tooltipRows = [\n      { label: \"Confirmed\", status: Status.Confirmed },\n      { label: \"Recovered\", status: Status.Recovered },\n      { label: \"Deaths\", status: Status.Deaths },\n      { label: \"Active\", status: Status.Active },\n    ];\n\n    return (\n      <Paper\n        className={classes.tooltip}\n        style={{\n          position: \"absolute\",\n          top: hoveredCountry.offsetY,\n          left: hoveredCountry.offsetX,\n        }}\n      >\n        <Typography className={classes.country} data-testid=\"tooltip-country\">\n          {hoveredCountry.country.country}\n        </Typography>\n        {tooltipRows.map(({ label, status }) => (\n          <TooltipRow\n            key={status}\n            label={label}\n            value={timeline[status][currentDate]}\n            perDay={timeline[status][currentDate] - timeline[status][prevDate]}\n            status={status}\n          />\n        ))}\n      </Paper>\n    );\n  }\n\n  return null;\n};\n\nexport default Tooltip;\n","import { makeStyles, Theme } from \"@material-ui/core\";\nimport { timelineHeight } from \"../../components/TimelinePanel/timleinePanel.styles\";\n\nexport const drawerWidth = 600;\n\nexport default makeStyles((theme: Theme) => ({\n  body: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n    },\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    height: `calc(100% - ${timelineHeight}px) !important`,\n    [theme.breakpoints.down(\"sm\")]: {\n      width: \"100%\",\n      height: `calc(100% - ${timelineHeight + 49}px) !important`,\n    },\n  },\n}));\n","import { makeStyles, Theme } from \"@material-ui/core\";\nimport { drawerWidth } from \"../sideBar/sideBar.styles\";\n\nexport default makeStyles((theme: Theme) => ({\n  root: {\n    height: \"100%\",\n    width: `calc(100% - ${drawerWidth})`,\n    position: \"absolute\",\n    left: drawerWidth,\n    right: 0,\n    [theme.breakpoints.down(\"sm\")]: {\n      left: 0,\n    },\n  },\n}));\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/rootReducer\";\nimport { Viewport } from \"./mapTypes\";\n\nexport interface MapState {\n  viewport: Viewport;\n}\n\nconst initialState: MapState = {\n  viewport: {\n    longitude: 0,\n    latitude: 15,\n    zoom: 1.5,\n  },\n};\n\n// Slice\n\nexport const mapSlice = createSlice({\n  name: \"map\",\n  initialState,\n  reducers: {\n    setViewport: (state, action: PayloadAction<Viewport>) => {\n      state.viewport = action.payload;\n    },\n  },\n});\n\n// Selectors\n\nexport const selectViewPort = (state: RootState) => state.map.viewport;\n\nexport const { setViewport } = mapSlice.actions;\nexport default mapSlice.reducer;\n","import { useTheme } from \"@material-ui/core\";\nimport { Feature } from \"geojson\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { Moment } from \"moment\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport MapGL, {\n  FlyToInterpolator,\n  InteractiveMap,\n  InteractiveMapProps,\n  Layer,\n  Source,\n} from \"react-map-gl\";\nimport { useSelector } from \"react-redux\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport Tooltip from \"../../components/Tooltip/Tooltip\";\nimport { Nullable } from \"../../genericTypes\";\nimport {\n  selectCountriesByName,\n  selectlFilteredCountriesFC,\n} from \"../countries/countriesSlice\";\nimport { CountriesByName, Country } from \"../countries/countriesTypes\";\nimport {\n  selectFilterBy,\n  selectMomentTimelineDate,\n} from \"../sideBar/sideBarSlice\";\nimport { FilterBy } from \"../sideBar/sideBarTypes\";\nimport useStyles from \"./map.styles\";\nimport { selectViewPort } from \"./mapSlice\";\nimport {\n  COLORS_BY_FILTER_TYPE,\n  getInOurPais,\n  getTimelineExpression,\n} from \"./mapUtils\";\n\nconst inOurPairs = getInOurPais();\n\nfunction Map() {\n  const classes = useStyles();\n  const mapRef = useRef<InteractiveMap>(null);\n  const theme = useTheme();\n  const initialViewport = useSelector(selectViewPort);\n  const [viewport, setViewport] = useState<Partial<InteractiveMapProps>>(\n    initialViewport\n  );\n  const [hoveredCountry, setHoveredCountry] = useState<\n    Nullable<{\n      country: Country;\n      offsetX: number;\n      offsetY: number;\n    }>\n  >(null);\n  const countriesByName: CountriesByName = useSelector(selectCountriesByName);\n  const featureCollection = useSelector(selectlFilteredCountriesFC);\n  const filterBy: FilterBy = useSelector(selectFilterBy);\n  const currentMoment: Moment = useSelector(selectMomentTimelineDate);\n  const date: string = currentMoment.format(SHORT_DATE_FORMAT);\n  const hasCasesExpression = getTimelineExpression(\"has\", date);\n  const getCasesExpression = getTimelineExpression(\"get\", date);\n\n  const onHover = useCallback(\n    ({ features = [], srcEvent: { offsetX, offsetY } }) => {\n      const feature: Feature = features.find((f: any) =>\n        [\"label\", \"point\"].includes(f.layer.id)\n      );\n\n      if (feature && feature.properties && feature.properties.country) {\n        if (hoveredCountry?.country !== feature.properties.country) {\n          return setHoveredCountry({\n            offsetX,\n            offsetY,\n            country: countriesByName[feature.properties.country],\n          });\n        }\n      } else {\n        if (hoveredCountry?.country) {\n          return setHoveredCountry(null);\n        }\n      }\n    },\n    [countriesByName, hoveredCountry]\n  );\n\n  useEffect(() => {\n    // fly to the new position\n    setViewport({\n      ...initialViewport,\n      transitionInterpolator: new FlyToInterpolator({ speed: 1.2 }),\n      transitionDuration: \"auto\",\n    });\n  }, [initialViewport]);\n\n  return (\n    <div className={classes.root}>\n      <MapGL\n        ref={mapRef}\n        {...viewport}\n        width=\"100%\"\n        height=\"100%\"\n        mapStyle={`mapbox://styles/mapbox/${theme.palette.type}-v10?optimize=true`}\n        mapboxApiAccessToken={process.env.REACT_APP_MAP_BOX_API_TOKEN}\n        onViewportChange={(nextViewport) => setViewport(nextViewport)}\n        onHover={onHover}\n      >\n        <Source id=\"data\" type=\"geojson\" data={featureCollection}>\n          <Layer\n            id=\"point\"\n            type=\"circle\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"circle-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                getCasesExpression,\n                ...inOurPairs,\n              ],\n              \"circle-color\": COLORS_BY_FILTER_TYPE[filterBy.status],\n              \"circle-opacity\": 0.4,\n              \"circle-stroke-width\": 1,\n              \"circle-stroke-color\": COLORS_BY_FILTER_TYPE[filterBy.status],\n            }}\n          />\n          <Layer\n            id=\"label\"\n            type=\"symbol\"\n            filter={[\"all\", hasCasesExpression, [\">\", getCasesExpression, 0]]}\n            paint={{\n              \"text-color\":\n                theme.palette.type === \"light\" ? \"#3B3B3B\" : \"#EBEBEB\",\n            }}\n            layout={{\n              \"text-field\": getCasesExpression,\n              \"text-font\": [\"DIN Offc Pro Medium\", \"Arial Unicode MS Bold\"],\n              \"text-size\": 12,\n            }}\n          />\n        </Source>\n        <Tooltip date={currentMoment} hoveredCountry={hoveredCountry} />\n      </MapGL>\n    </div>\n  );\n}\n\nexport default Map;\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport default makeStyles((theme: Theme) => ({\n  root: {\n    boxShadow: \"none\",\n  },\n  tabs: {\n    borderBottomWidth: 1,\n    borderBottomColor: theme.palette.divider,\n    borderBottomStyle: \"solid\",\n  },\n  tab: {\n    flex: 1,\n    minWidth: \"initial\",\n    padding: 0,\n    \"&:hover\": {\n      color: theme.palette.text.primary,\n    },\n  },\n  tabLabel: {\n    fontSize: theme.typography.fontSize,\n    textTransform: \"capitalize\",\n  },\n  tabSubLabel: {\n    fontWeight: theme.typography.fontWeightBold,\n    fontSize: theme.typography.body1.fontSize,\n    lineHeight: 1,\n  },\n}));\n","import { Container, Paper, Tab, Tabs, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Nullable } from \"../../genericTypes\";\nimport useStyles from \"./TotalTabs.styles\";\n\nexport type Tab = {\n  key: string;\n  label: string;\n  value: Nullable<number | string>;\n};\n\ntype Props = {\n  onChange: (value: Tab) => void;\n  tab: Tab;\n  tabs: Tab[];\n  tabTextColor: \"inherit\" | \"secondary\" | \"primary\" | undefined;\n  tabIndicatorColor: string;\n};\n\nconst TotalTabs = ({\n  onChange,\n  tabs,\n  tab,\n  tabTextColor,\n  tabIndicatorColor,\n}: Props) => {\n  const classes = useStyles();\n\n  return (\n    <Paper className={classes.root}>\n      <Tabs\n        className={classes.tabs}\n        value={tabs.findIndex((item) => item.key === tab.key)}\n        onChange={(_, idx: number) => onChange(tabs[idx])}\n        textColor={tabTextColor}\n        TabIndicatorProps={{\n          style: {\n            backgroundColor: tabIndicatorColor,\n          },\n        }}\n        centered\n      >\n        {tabs.map(({ key, label, value }) => (\n          <Tab\n            className={classes.tab}\n            key={key}\n            label={\n              <Container>\n                <Typography\n                  className={classes.tabLabel}\n                  component=\"div\"\n                  data-testid=\"totals-tab-label\"\n                >\n                  {label}\n                </Typography>\n                <Typography\n                  className={classes.tabSubLabel}\n                  component=\"div\"\n                  data-testid=\"totals-tab-value\"\n                >\n                  {value}\n                </Typography>\n              </Container>\n            }\n          />\n        ))}\n      </Tabs>\n    </Paper>\n  );\n};\n\nexport default TotalTabs;\n","import { IconButton } from \"@material-ui/core\";\nimport { Star, StarBorder } from \"@material-ui/icons\";\nimport React from \"react\";\n\ntype Props = {\n  isFavorite: boolean;\n  onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n};\n\nexport const FavoriteButton = React.memo(({ isFavorite, onClick }: Props) => {\n  return (\n    <IconButton aria-label=\"button favorite\" size=\"small\" onClick={onClick}>\n      {isFavorite ? <Star /> : <StarBorder />}\n    </IconButton>\n  );\n});\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport default makeStyles((theme: Theme) => ({\n  tableCell: {\n    height: 50,\n    width: \"100%\",\n    alignItems: \"center\",\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    flex: 1,\n    padding: theme.spacing(1),\n\n    [theme.breakpoints.down(550)]: {\n      padding: theme.spacing(1) / 2,\n    },\n    [theme.breakpoints.down(450)]: {\n      fontSize: theme.typography.fontSize - 2,\n    },\n  },\n}));\n","import { TableCell } from \"@material-ui/core\";\nimport React, { memo } from \"react\";\nimport { TableCellProps } from \"react-virtualized\";\nimport useStyles from \"./tableBodyCell.styles\";\n\nconst TableBodyCell = ({ cellData, dataKey }: TableCellProps) => {\n  const classes = useStyles();\n\n  return (\n    <TableCell\n      className={classes.tableCell}\n      component=\"div\"\n      key={dataKey}\n      variant=\"body\"\n    >\n      {cellData}\n    </TableCell>\n  );\n};\n\nexport default memo(TableBodyCell);\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport default makeStyles((theme: Theme) => ({\n  tableHeaderCell: {\n    textTransform: \"capitalize\",\n    userSelect: \"none\",\n  },\n  tableCell: {\n    height: 50,\n    width: \"100%\",\n    alignItems: \"center\",\n    boxSizing: \"border-box\",\n    display: \"flex\",\n    flex: 1,\n    padding: theme.spacing(1),\n\n    [theme.breakpoints.down(550)]: {\n      padding: theme.spacing(1) / 2,\n      flexDirection: \"column-reverse\",\n    },\n    [theme.breakpoints.down(450)]: {\n      fontSize: theme.typography.fontSize - 2,\n    },\n  },\n  label: {\n    fontSize: \"inherit\",\n  },\n}));\n","import { TableCell, TableSortLabel, Typography } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport React, { memo } from \"react\";\nimport { SortDirection, TableHeaderProps } from \"react-virtualized\";\nimport useStyles from \"./tableHeaderCell.styles\";\n\nconst TableHeaderCell = ({\n  dataKey,\n  label,\n  sortBy,\n  sortDirection,\n  disableSort,\n}: TableHeaderProps) => {\n  const classes = useStyles();\n\n  return (\n    <TableCell\n      className={clsx(classes.tableCell, classes.tableHeaderCell)}\n      component=\"div\"\n      key={dataKey}\n      variant=\"head\"\n    >\n      {disableSort ? (\n        label\n      ) : (\n        <TableSortLabel\n          active={sortBy === dataKey}\n          direction={sortDirection === SortDirection.DESC ? \"desc\" : \"asc\"}\n        >\n          <Typography className={classes.label}>{label}</Typography>\n        </TableSortLabel>\n      )}\n    </TableCell>\n  );\n};\n\nexport default memo(TableHeaderCell);\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport const headerHeight = 50;\nexport const rowHeight = 50;\n\nexport default makeStyles((theme: Theme) => ({\n  root: {\n    height: \"100%\",\n    boxShadow: \"none\",\n    borderRadius: 0,\n  },\n  rowColumn: {\n    cursor: \"pointer\",\n    display: \"flex\",\n    height: \"100%\",\n\n    \"&.ReactVirtualized__Table__row:hover\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n\n    \"&:not(:last-child)\": {\n      marginRight: 0,\n    },\n  },\n  doubleLine: {\n    wordBreak: \"break-word\",\n    whiteSpace: \"normal\",\n    display: \"-webkit-box\",\n    WebkitLineClamp: 2,\n    WebkitBoxOrient: \"vertical\",\n    overflow: \"hidden\",\n  },\n}));\n","import { Paper } from \"@material-ui/core\";\nimport React, { useCallback, useContext } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  AutoSizer,\n  Column,\n  SortDirectionType,\n  Table,\n  TableCellProps,\n  TableHeaderProps,\n} from \"react-virtualized\";\nimport \"react-virtualized/styles.css\";\nimport { SHORT_DATE_FORMAT } from \"../../common/constants/global\";\nimport { FavoriteButton } from \"../../components/FavoriteButton/FavoriteButton\";\nimport TableBodyCell from \"../../components/TableBodyCell/TableBodyCell\";\nimport TableHeaderCell from \"../../components/TableHeaderCell/TableHeaderCell\";\nimport { TabsContext } from \"../../contexts/TabsContext\";\nimport { HashMap } from \"../../genericTypes\";\nimport {\n  selectFavoriteCountries,\n  selectFilteredAndOrderedCountries,\n  toggleFavorite,\n} from \"../countries/countriesSlice\";\nimport { Country, Status } from \"../countries/countriesTypes\";\nimport { setViewport } from \"../map/mapSlice\";\nimport {\n  selectFilterBy,\n  selectMomentTimelineDate,\n  selectSortBy,\n  selectSortDirection,\n  setFilterBy,\n  sort,\n} from \"../sideBar/sideBarSlice\";\nimport { FilterBy } from \"../sideBar/sideBarTypes\";\nimport useStyles, { headerHeight, rowHeight } from \"./countriesTable.styles\";\n\nconst headerRenderer = (props: TableHeaderProps) => (\n  <TableHeaderCell {...props} />\n);\nconst cellRenderer = (props: TableCellProps) => <TableBodyCell {...props} />;\n\nexport function CountriesTable() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const tabsContext = useContext(TabsContext);\n  const countries: Country[] = useSelector(selectFilteredAndOrderedCountries);\n  const filterBy: FilterBy = useSelector(selectFilterBy);\n  const favoriteCountries: HashMap<boolean> = useSelector(\n    selectFavoriteCountries\n  );\n  const date: string = useSelector(selectMomentTimelineDate).format(\n    SHORT_DATE_FORMAT\n  );\n  const sortBy: string = useSelector(selectSortBy);\n  const sortDirection: SortDirectionType = useSelector(selectSortDirection);\n\n  const onFavoriteHeaderClick = useCallback(\n    (e) => {\n      e.stopPropagation();\n      dispatch(\n        setFilterBy({\n          ...filterBy,\n          favorite: !filterBy.favorite,\n        })\n      );\n    },\n    [dispatch, filterBy]\n  );\n\n  const favoriteHeaderRenderer = useCallback(\n    (props: TableHeaderProps) => {\n      return headerRenderer({\n        ...props,\n        label: (\n          <FavoriteButton\n            isFavorite={filterBy.favorite}\n            onClick={onFavoriteHeaderClick}\n          />\n        ),\n      });\n    },\n    [filterBy.favorite, onFavoriteHeaderClick]\n  );\n\n  const favoriteCellRenderer = useCallback(\n    (props: TableCellProps) => {\n      return cellRenderer({\n        ...props,\n        cellData: (\n          <FavoriteButton\n            isFavorite={favoriteCountries[props.rowData.country]}\n            onClick={(e) => {\n              e.stopPropagation();\n              dispatch(toggleFavorite(props.rowData.country));\n            }}\n          />\n        ),\n      });\n    },\n    [dispatch, favoriteCountries]\n  );\n\n  return (\n    <Paper className={classes.root}>\n      <AutoSizer>\n        {({ width, height }) => {\n          const indexWidth: number = 40;\n          const favWidth: number = 32 + 16; // 16 - side padding\n          const widthWithoutIndexAndFav =\n            (width - (indexWidth + favWidth)) / 100;\n          const colWidth = widthWithoutIndexAndFav * 20;\n          const countryWidth = widthWithoutIndexAndFav * 20;\n\n          return (\n            <Table\n              width={width}\n              height={height}\n              headerHeight={headerHeight}\n              headerClassName={classes.rowColumn}\n              overscanRowCount={3}\n              rowHeight={rowHeight}\n              rowCount={countries.length}\n              rowClassName={classes.rowColumn}\n              rowGetter={({ index }) => countries[index]}\n              onRowClick={({ rowData }: { rowData: Country }) => {\n                tabsContext.setTab(1);\n\n                setTimeout(() => {\n                  dispatch(\n                    setViewport({\n                      longitude: rowData.coordinates.longitude,\n                      latitude: rowData.coordinates.latitude,\n                      zoom: 6,\n                    })\n                  );\n                }, 200);\n              }}\n              sort={({ sortBy, sortDirection }) =>\n                dispatch(sort({ sortBy, sortDirection }))\n              }\n              sortBy={sortBy}\n              sortDirection={sortDirection}\n            >\n              <Column\n                className={classes.rowColumn}\n                label=\"#\"\n                dataKey=\"index\"\n                disableSort\n                width={indexWidth}\n                cellRenderer={cellRenderer}\n                headerRenderer={headerRenderer}\n              />\n              <Column\n                className={classes.rowColumn}\n                label=\"Country\"\n                dataKey=\"country\"\n                defaultSortDirection=\"ASC\"\n                cellRenderer={(props: TableCellProps) =>\n                  cellRenderer({\n                    ...props,\n                    cellData: (\n                      <div className={classes.doubleLine}>{props.cellData}</div>\n                    ),\n                  })\n                }\n                flexGrow={1}\n                headerRenderer={headerRenderer}\n                width={countryWidth}\n              />\n              {[\n                { label: \"Confirmed\", status: Status.Confirmed },\n                { label: \"Recovered\", status: Status.Recovered },\n                { label: \"Deaths\", status: Status.Deaths },\n                { label: \"Active\", status: Status.Active },\n              ].map((column) => (\n                <Column\n                  className={classes.rowColumn}\n                  cellDataGetter={({ dataKey, rowData }) =>\n                    rowData.timeline[dataKey][date]?.toLocaleString() || 0\n                  }\n                  cellRenderer={cellRenderer}\n                  dataKey={column.status}\n                  defaultSortDirection=\"DESC\"\n                  headerRenderer={headerRenderer}\n                  key={column.status}\n                  label={column.label}\n                  width={colWidth}\n                />\n              ))}\n              <Column\n                className={classes.rowColumn}\n                cellRenderer={favoriteCellRenderer}\n                dataKey=\"favorite\"\n                disableSort\n                headerRenderer={favoriteHeaderRenderer}\n                label=\"\"\n                width={favWidth}\n              />\n            </Table>\n          );\n        }}\n      </AutoSizer>\n    </Paper>\n  );\n}\n","import { Drawer, Toolbar } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TotalTabs, { Tab } from \"../../components/TotalTabs/TotalTabs\";\nimport { selectFilteredSumData } from \"../countries/countriesSlice\";\nimport { Status } from \"../countries/countriesTypes\";\nimport { CountriesTable } from \"../countriesTable/CountriesTable\";\nimport { COLORS_BY_FILTER_TYPE } from \"../map/mapUtils\";\nimport useStyles from \"./sideBar.styles\";\nimport { selectFilterBy, setFilterBy } from \"./sideBarSlice\";\nimport { FilterBy } from \"./sideBarTypes\";\n\nconst tabs: Tab[] = [\n  { key: Status.Confirmed, label: \"Confirmed\", value: null },\n  { key: Status.Recovered, label: \"Recovered\", value: null },\n  { key: Status.Deaths, label: \"Deaths\", value: null },\n  { key: Status.Active, label: \"Active\", value: null },\n];\n\nconst SideBar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const filterBy: FilterBy = useSelector(selectFilterBy);\n  const sumData = useSelector(selectFilteredSumData);\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      variant=\"permanent\"\n      classes={{\n        paper: classes.drawerPaper,\n      }}\n      anchor=\"left\"\n    >\n      <Toolbar />\n      <TotalTabs\n        onChange={(tab: Tab) =>\n          dispatch(\n            setFilterBy({\n              status: tab.key as Status,\n              favorite: filterBy.favorite,\n            })\n          )\n        }\n        tabs={tabs.map((tab: Tab) => ({\n          ...tab,\n          value: sumData[tab.key as Status].toLocaleString(),\n        }))}\n        tab={tabs.find((tab) => tab.key === filterBy.status) as Tab}\n        tabTextColor=\"inherit\"\n        tabIndicatorColor={COLORS_BY_FILTER_TYPE[filterBy.status]}\n      />\n      <CountriesTable />\n    </Drawer>\n  );\n};\n\nexport default SideBar;\n","import { makeStyles, Theme } from \"@material-ui/core\";\n\nexport default makeStyles((theme: Theme) => ({\n  root: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n}));\n","import {\n  createMuiTheme,\n  CssBaseline,\n  Theme,\n  ThemeProvider,\n  useMediaQuery,\n} from \"@material-ui/core\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport BottomTabs from \"../components/BottomTabs/BottomTabs\";\nimport TopBar from \"../components/TopBar/TopBar\";\nimport { fetchCountries } from \"../features/countries/countriesSlice\";\nimport Map from \"../features/map/Map\";\nimport SideBar from \"../features/sideBar/SideBar\";\nimport useStyles from \"./app.styles\";\n\nconst App = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n\n  const theme: Theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n        overrides: {\n          MuiCssBaseline: {\n            \"@global\": {\n              \"#root\": {\n                height: \"100%\",\n                width: \"100%\",\n                position: \"fixed\",\n                boxSizing: \"border-box\",\n              },\n              \"*:focus\": {\n                outline: \"none\",\n              },\n            },\n          },\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  useEffect(() => {\n    dispatch(fetchCountries());\n  }, [dispatch]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className={classes.root}>\n        <TopBar />\n        <BottomTabs\n          tabs={[\n            {\n              label: \"Table\",\n              panel: <SideBar />,\n            },\n            {\n              label: \"Map\",\n              panel: <Map />,\n            },\n          ]}\n        />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import createFilter from \"redux-persist-transform-filter\";\nimport storage from \"redux-persist/lib/storage\";\n\nexport const saveSubsetFilter = createFilter(\"countries\", [\n  \"favoriteCountries\",\n]);\n\nexport const persistConfig = {\n  key: \"root\",\n  storage: storage,\n  whitelist: [\"countries\"],\n  transforms: [saveSubsetFilter],\n};\n","import { Action, ThunkAction } from \"@reduxjs/toolkit\";\nimport { persistCombineReducers } from \"redux-persist\";\nimport countries from \"../features/countries/countriesSlice\";\nimport map from \"../features/map/mapSlice\";\nimport sideBar from \"../features/sideBar/sideBarSlice\";\nimport { persistConfig } from \"./persistConfig\";\n\nexport const rootReducer = persistCombineReducers(persistConfig, {\n  countries,\n  map,\n  sideBar,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { persistStore } from \"redux-persist\";\nimport { rootReducer } from \"./rootReducer\";\n\nexport default () => {\n  const storeConfig = {\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware({\n      immutableCheck: false,\n      serializableCheck: false,\n    }),\n  };\n\n  const store = configureStore(storeConfig);\n  const persistor = persistStore(store);\n\n  return { store, storeConfig, persistor };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactGA from \"react-ga\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./app/App\";\nimport getStore from \"./app/store\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst { store, persistor } = getStore();\n\nif (process.env.REACT_APP_GA_TRACKING_ID) {\n  ReactGA.initialize(process.env.REACT_APP_GA_TRACKING_ID);\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}